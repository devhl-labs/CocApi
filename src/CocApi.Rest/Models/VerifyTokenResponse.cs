// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using CocApi.Rest.Client;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// VerifyTokenResponse
    /// </summary>
    public partial class VerifyTokenResponse : IEquatable<VerifyTokenResponse?>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerifyTokenResponse" /> class.
        /// </summary>
        /// <param name="status">status</param>
        /// <param name="tag">tag</param>
        /// <param name="token">token</param>
        [JsonConstructor]
        internal VerifyTokenResponse(string status, string tag, string token)
        {
            Status = status;
            Tag = tag;
            Token = token;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [JsonPropertyName("status")]
        public string Status { get; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [JsonPropertyName("tag")]
        public string Tag { get; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [JsonPropertyName("token")]
        public string Token { get; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VerifyTokenResponse {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as VerifyTokenResponse);
        }

        /// <summary>
        /// Returns true if VerifyTokenResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of VerifyTokenResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerifyTokenResponse? input)
        {
            if (input == null)
                return false;

            return 
                (
                    Status == input.Status ||
                    (Status != null &&
                    Status.Equals(input.Status))
                ) && 
                (
                    Tag == input.Tag ||
                    (Tag != null &&
                    Tag.Equals(input.Tag))
                ) && 
                (
                    Token == input.Token ||
                    (Token != null &&
                    Token.Equals(input.Token))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + Status.GetHashCode();
                hashCode = (hashCode * 59) + Tag.GetHashCode();
                hashCode = (hashCode * 59) + Token.GetHashCode();

                return hashCode;
            }
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VerifyTokenResponse" />
    /// </summary>
    public class VerifyTokenResponseJsonConverter : JsonConverter<VerifyTokenResponse>
    {
        /// <summary>
        /// Deserializes json to <see cref="VerifyTokenResponse" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VerifyTokenResponse Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> status = default;
            Option<string?> tag = default;
            Option<string?> token = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "status":
                            status = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "token":
                            token = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!status.IsSet)
                throw new ArgumentException("Property is required for class VerifyTokenResponse.", nameof(status));

            if (!tag.IsSet)
                throw new ArgumentException("Property is required for class VerifyTokenResponse.", nameof(tag));

            if (!token.IsSet)
                throw new ArgumentException("Property is required for class VerifyTokenResponse.", nameof(token));

            if (status.IsSet && status.Value == null)
                throw new ArgumentNullException(nameof(status), "Property is not nullable for class VerifyTokenResponse.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class VerifyTokenResponse.");

            if (token.IsSet && token.Value == null)
                throw new ArgumentNullException(nameof(token), "Property is not nullable for class VerifyTokenResponse.");

            return new VerifyTokenResponse(status.Value!, tag.Value!, token.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="VerifyTokenResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="verifyTokenResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VerifyTokenResponse verifyTokenResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, verifyTokenResponse, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VerifyTokenResponse" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="verifyTokenResponse"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VerifyTokenResponse verifyTokenResponse, JsonSerializerOptions jsonSerializerOptions)
        {
            if (verifyTokenResponse.Status == null)
                throw new ArgumentNullException(nameof(verifyTokenResponse.Status), "Property is required for class VerifyTokenResponse.");

            if (verifyTokenResponse.Tag == null)
                throw new ArgumentNullException(nameof(verifyTokenResponse.Tag), "Property is required for class VerifyTokenResponse.");

            if (verifyTokenResponse.Token == null)
                throw new ArgumentNullException(nameof(verifyTokenResponse.Token), "Property is required for class VerifyTokenResponse.");

            writer.WriteString("status", verifyTokenResponse.Status);

            writer.WriteString("tag", verifyTokenResponse.Tag);

            writer.WriteString("token", verifyTokenResponse.Token);
        }
    }
}
