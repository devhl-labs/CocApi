// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using CocApi.Rest.Client;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// ClanCapitalRaidSeasonAttackLogEntry
    /// </summary>
    public partial class ClanCapitalRaidSeasonAttackLogEntry : IEquatable<ClanCapitalRaidSeasonAttackLogEntry?>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClanCapitalRaidSeasonAttackLogEntry" /> class.
        /// </summary>
        /// <param name="attackCount">attackCount</param>
        /// <param name="defender">defender</param>
        /// <param name="districtCount">districtCount</param>
        /// <param name="districts">districts</param>
        /// <param name="districtsDestroyed">districtsDestroyed</param>
        [JsonConstructor]
        internal ClanCapitalRaidSeasonAttackLogEntry(int attackCount, ClanCapitalRaidSeasonClanInfo defender, int districtCount, List<ClanCapitalRaidSeasonDistrict> districts, int districtsDestroyed)
        {
            AttackCount = attackCount;
            Defender = defender;
            DistrictCount = districtCount;
            Districts = districts;
            DistrictsDestroyed = districtsDestroyed;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AttackCount
        /// </summary>
        [JsonPropertyName("attackCount")]
        public int AttackCount { get; }

        /// <summary>
        /// Gets or Sets Defender
        /// </summary>
        [JsonPropertyName("defender")]
        public ClanCapitalRaidSeasonClanInfo Defender { get; }

        /// <summary>
        /// Gets or Sets DistrictCount
        /// </summary>
        [JsonPropertyName("districtCount")]
        public int DistrictCount { get; }

        /// <summary>
        /// Gets or Sets Districts
        /// </summary>
        [JsonPropertyName("districts")]
        public List<ClanCapitalRaidSeasonDistrict> Districts { get; }

        /// <summary>
        /// Gets or Sets DistrictsDestroyed
        /// </summary>
        [JsonPropertyName("districtsDestroyed")]
        public int DistrictsDestroyed { get; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClanCapitalRaidSeasonAttackLogEntry {\n");
            sb.Append("  AttackCount: ").Append(AttackCount).Append("\n");
            sb.Append("  Defender: ").Append(Defender).Append("\n");
            sb.Append("  DistrictCount: ").Append(DistrictCount).Append("\n");
            sb.Append("  Districts: ").Append(Districts).Append("\n");
            sb.Append("  DistrictsDestroyed: ").Append(DistrictsDestroyed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as ClanCapitalRaidSeasonAttackLogEntry);
        }

        /// <summary>
        /// Returns true if ClanCapitalRaidSeasonAttackLogEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of ClanCapitalRaidSeasonAttackLogEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClanCapitalRaidSeasonAttackLogEntry? input)
        {
            if (input == null)
                return false;

            return 
                (
                    AttackCount == input.AttackCount ||
                    AttackCount.Equals(input.AttackCount)
                ) && 
                (
                    Defender == input.Defender ||
                    (Defender != null &&
                    Defender.Equals(input.Defender))
                ) && 
                (
                    DistrictCount == input.DistrictCount ||
                    DistrictCount.Equals(input.DistrictCount)
                ) && 
                (
                    Districts == input.Districts ||
                    Districts != null &&
                    input.Districts != null &&
                    Districts.SequenceEqual(input.Districts)
                ) && 
                (
                    DistrictsDestroyed == input.DistrictsDestroyed ||
                    DistrictsDestroyed.Equals(input.DistrictsDestroyed)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + AttackCount.GetHashCode();
                hashCode = (hashCode * 59) + Defender.GetHashCode();
                hashCode = (hashCode * 59) + DistrictCount.GetHashCode();
                hashCode = (hashCode * 59) + Districts.GetHashCode();
                hashCode = (hashCode * 59) + DistrictsDestroyed.GetHashCode();

                return hashCode;
            }
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClanCapitalRaidSeasonAttackLogEntry" />
    /// </summary>
    public class ClanCapitalRaidSeasonAttackLogEntryJsonConverter : JsonConverter<ClanCapitalRaidSeasonAttackLogEntry>
    {
        /// <summary>
        /// Deserializes json to <see cref="ClanCapitalRaidSeasonAttackLogEntry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClanCapitalRaidSeasonAttackLogEntry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> attackCount = default;
            Option<ClanCapitalRaidSeasonClanInfo?> defender = default;
            Option<int?> districtCount = default;
            Option<List<ClanCapitalRaidSeasonDistrict>?> districts = default;
            Option<int?> districtsDestroyed = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "attackCount":
                            attackCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "defender":
                            defender = new Option<ClanCapitalRaidSeasonClanInfo?>(JsonSerializer.Deserialize<ClanCapitalRaidSeasonClanInfo>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "districtCount":
                            districtCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "districts":
                            districts = new Option<List<ClanCapitalRaidSeasonDistrict>?>(JsonSerializer.Deserialize<List<ClanCapitalRaidSeasonDistrict>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "districtsDestroyed":
                            districtsDestroyed = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!attackCount.IsSet)
                throw new ArgumentException("Property is required for class ClanCapitalRaidSeasonAttackLogEntry.", nameof(attackCount));

            if (!defender.IsSet)
                throw new ArgumentException("Property is required for class ClanCapitalRaidSeasonAttackLogEntry.", nameof(defender));

            if (!districtCount.IsSet)
                throw new ArgumentException("Property is required for class ClanCapitalRaidSeasonAttackLogEntry.", nameof(districtCount));

            if (!districts.IsSet)
                throw new ArgumentException("Property is required for class ClanCapitalRaidSeasonAttackLogEntry.", nameof(districts));

            if (!districtsDestroyed.IsSet)
                throw new ArgumentException("Property is required for class ClanCapitalRaidSeasonAttackLogEntry.", nameof(districtsDestroyed));

            if (attackCount.IsSet && attackCount.Value == null)
                throw new ArgumentNullException(nameof(attackCount), "Property is not nullable for class ClanCapitalRaidSeasonAttackLogEntry.");

            if (defender.IsSet && defender.Value == null)
                throw new ArgumentNullException(nameof(defender), "Property is not nullable for class ClanCapitalRaidSeasonAttackLogEntry.");

            if (districtCount.IsSet && districtCount.Value == null)
                throw new ArgumentNullException(nameof(districtCount), "Property is not nullable for class ClanCapitalRaidSeasonAttackLogEntry.");

            if (districts.IsSet && districts.Value == null)
                throw new ArgumentNullException(nameof(districts), "Property is not nullable for class ClanCapitalRaidSeasonAttackLogEntry.");

            if (districtsDestroyed.IsSet && districtsDestroyed.Value == null)
                throw new ArgumentNullException(nameof(districtsDestroyed), "Property is not nullable for class ClanCapitalRaidSeasonAttackLogEntry.");

            return new ClanCapitalRaidSeasonAttackLogEntry(attackCount.Value!.Value!, defender.Value!, districtCount.Value!.Value!, districts.Value!, districtsDestroyed.Value!.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="ClanCapitalRaidSeasonAttackLogEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clanCapitalRaidSeasonAttackLogEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClanCapitalRaidSeasonAttackLogEntry clanCapitalRaidSeasonAttackLogEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, clanCapitalRaidSeasonAttackLogEntry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ClanCapitalRaidSeasonAttackLogEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clanCapitalRaidSeasonAttackLogEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ClanCapitalRaidSeasonAttackLogEntry clanCapitalRaidSeasonAttackLogEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (clanCapitalRaidSeasonAttackLogEntry.Defender == null)
                throw new ArgumentNullException(nameof(clanCapitalRaidSeasonAttackLogEntry.Defender), "Property is required for class ClanCapitalRaidSeasonAttackLogEntry.");

            if (clanCapitalRaidSeasonAttackLogEntry.Districts == null)
                throw new ArgumentNullException(nameof(clanCapitalRaidSeasonAttackLogEntry.Districts), "Property is required for class ClanCapitalRaidSeasonAttackLogEntry.");

            writer.WriteNumber("attackCount", clanCapitalRaidSeasonAttackLogEntry.AttackCount);

            writer.WritePropertyName("defender");
            JsonSerializer.Serialize(writer, clanCapitalRaidSeasonAttackLogEntry.Defender, jsonSerializerOptions);
            writer.WriteNumber("districtCount", clanCapitalRaidSeasonAttackLogEntry.DistrictCount);

            writer.WritePropertyName("districts");
            JsonSerializer.Serialize(writer, clanCapitalRaidSeasonAttackLogEntry.Districts, jsonSerializerOptions);
            writer.WriteNumber("districtsDestroyed", clanCapitalRaidSeasonAttackLogEntry.DistrictsDestroyed);
        }
    }
}
