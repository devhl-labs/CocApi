// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// Defines Result
    /// </summary>
    public enum Result
    {
        /// <summary>
        /// Enum Lose for value: lose
        /// </summary>
        Lose = -1,

        /// <summary>
        /// Enum Tie for value: tie
        /// </summary>
        Tie = 0,

        /// <summary>
        /// Enum Win for value: win
        /// </summary>
        Win = 1,
    }

    public class ResultConverter : JsonConverter<Result>
    {
        public static Result FromString(string value)
        {
            if (value == "lose")
                return Result.Lose;

            if (value == "tie")
                return Result.Tie;

            if (value == "win")
                return Result.Win;

            throw new NotImplementedException($"Could not convert value to type Result: '{value}'");
        }

        public static Result? FromStringOrDefault(string value)
        {
            if (value == "lose")
                return Result.Lose;

            if (value == "tie")
                return Result.Tie;

            if (value == "win")
                return Result.Win;

            return null;
        }

        public static string ToJsonValue(Result value)
        {
            if (value == Result.Lose)
                return "lose";

            if (value == Result.Tie)
                return "tie";

            if (value == Result.Win)
                return "win";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Result Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            Result? result = ResultConverter.FromString(rawValue);
            
            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the Result to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="result"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Result result, JsonSerializerOptions options)
        {
            writer.WriteStringValue(result.ToString());
        }
    }

    public class ResultNullableConverter : JsonConverter<Result?>
    {
        /// <summary>
        /// Returns a Result from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override Result? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            if (rawValue == null)
                return null;

            Result? result = ResultConverter.FromString(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="result"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, Result? result, JsonSerializerOptions options)
        {
            writer.WriteStringValue(result?.ToString() ?? "null");
        }
    }

}
