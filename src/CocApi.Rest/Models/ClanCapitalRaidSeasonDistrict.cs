// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using CocApi.Rest.Client;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// ClanCapitalRaidSeasonDistrict
    /// </summary>
    public partial class ClanCapitalRaidSeasonDistrict : IEquatable<ClanCapitalRaidSeasonDistrict?>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClanCapitalRaidSeasonDistrict" /> class.
        /// </summary>
        /// <param name="attackCount">attackCount</param>
        /// <param name="destructionPercent">destructionPercent</param>
        /// <param name="districtHallLevel">districtHallLevel</param>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="stars">stars</param>
        /// <param name="totalLooted">totalLooted</param>
        /// <param name="attacks">attacks</param>
        [JsonConstructor]
        internal ClanCapitalRaidSeasonDistrict(int attackCount, int destructionPercent, int districtHallLevel, int id, string name, int stars, int totalLooted, Option<List<ClanCapitalRaidSeasonAttack>?> attacks = default)
        {
            AttackCount = attackCount;
            DestructionPercent = destructionPercent;
            DistrictHallLevel = districtHallLevel;
            Id = id;
            Name = name;
            Stars = stars;
            TotalLooted = totalLooted;
            AttacksOption = attacks;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets AttackCount
        /// </summary>
        [JsonPropertyName("attackCount")]
        public int AttackCount { get; }

        /// <summary>
        /// Gets or Sets DestructionPercent
        /// </summary>
        [JsonPropertyName("destructionPercent")]
        public int DestructionPercent { get; }

        /// <summary>
        /// Gets or Sets DistrictHallLevel
        /// </summary>
        [JsonPropertyName("districtHallLevel")]
        public int DistrictHallLevel { get; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int Id { get; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; }

        /// <summary>
        /// Gets or Sets Stars
        /// </summary>
        [JsonPropertyName("stars")]
        public int Stars { get; }

        /// <summary>
        /// Gets or Sets TotalLooted
        /// </summary>
        [JsonPropertyName("totalLooted")]
        public int TotalLooted { get; }

        /// <summary>
        /// Used to track the state of Attacks
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ClanCapitalRaidSeasonAttack>?> AttacksOption { get; }

        /// <summary>
        /// Gets or Sets Attacks
        /// </summary>
        [JsonPropertyName("attacks")]
        public List<ClanCapitalRaidSeasonAttack>? Attacks { get { return this.AttacksOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClanCapitalRaidSeasonDistrict {\n");
            sb.Append("  AttackCount: ").Append(AttackCount).Append("\n");
            sb.Append("  DestructionPercent: ").Append(DestructionPercent).Append("\n");
            sb.Append("  DistrictHallLevel: ").Append(DistrictHallLevel).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Stars: ").Append(Stars).Append("\n");
            sb.Append("  TotalLooted: ").Append(TotalLooted).Append("\n");
            sb.Append("  Attacks: ").Append(Attacks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as ClanCapitalRaidSeasonDistrict);
        }

        /// <summary>
        /// Returns true if ClanCapitalRaidSeasonDistrict instances are equal
        /// </summary>
        /// <param name="input">Instance of ClanCapitalRaidSeasonDistrict to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClanCapitalRaidSeasonDistrict? input)
        {
            if (input == null)
                return false;

            return 
                (
                    AttackCount == input.AttackCount ||
                    AttackCount.Equals(input.AttackCount)
                ) && 
                (
                    DestructionPercent == input.DestructionPercent ||
                    DestructionPercent.Equals(input.DestructionPercent)
                ) && 
                (
                    DistrictHallLevel == input.DistrictHallLevel ||
                    DistrictHallLevel.Equals(input.DistrictHallLevel)
                ) && 
                (
                    Id == input.Id ||
                    Id.Equals(input.Id)
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Stars == input.Stars ||
                    Stars.Equals(input.Stars)
                ) && 
                (
                    TotalLooted == input.TotalLooted ||
                    TotalLooted.Equals(input.TotalLooted)
                ) && 
                (
                    Attacks == input.Attacks ||
                    Attacks != null &&
                    input.Attacks != null &&
                    Attacks.SequenceEqual(input.Attacks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + AttackCount.GetHashCode();
                hashCode = (hashCode * 59) + DestructionPercent.GetHashCode();
                hashCode = (hashCode * 59) + DistrictHallLevel.GetHashCode();
                hashCode = (hashCode * 59) + Id.GetHashCode();
                hashCode = (hashCode * 59) + Name.GetHashCode();
                hashCode = (hashCode * 59) + Stars.GetHashCode();
                hashCode = (hashCode * 59) + TotalLooted.GetHashCode();
                if (Attacks != null)
                    hashCode = (hashCode * 59) + Attacks.GetHashCode();


                return hashCode;
            }
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClanCapitalRaidSeasonDistrict" />
    /// </summary>
    public class ClanCapitalRaidSeasonDistrictJsonConverter : JsonConverter<ClanCapitalRaidSeasonDistrict>
    {
        /// <summary>
        /// Deserializes json to <see cref="ClanCapitalRaidSeasonDistrict" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClanCapitalRaidSeasonDistrict Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> attackCount = default;
            Option<int?> destructionPercent = default;
            Option<int?> districtHallLevel = default;
            Option<int?> id = default;
            Option<string?> name = default;
            Option<int?> stars = default;
            Option<int?> totalLooted = default;
            Option<List<ClanCapitalRaidSeasonAttack>?> attacks = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "attackCount":
                            attackCount = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "destructionPercent":
                            destructionPercent = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "districtHallLevel":
                            districtHallLevel = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "stars":
                            stars = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "totalLooted":
                            totalLooted = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "attacks":
                            attacks = new Option<List<ClanCapitalRaidSeasonAttack>?>(JsonSerializer.Deserialize<List<ClanCapitalRaidSeasonAttack>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!attackCount.IsSet)
                throw new ArgumentException("Property is required for class ClanCapitalRaidSeasonDistrict.", nameof(attackCount));

            if (!destructionPercent.IsSet)
                throw new ArgumentException("Property is required for class ClanCapitalRaidSeasonDistrict.", nameof(destructionPercent));

            if (!districtHallLevel.IsSet)
                throw new ArgumentException("Property is required for class ClanCapitalRaidSeasonDistrict.", nameof(districtHallLevel));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class ClanCapitalRaidSeasonDistrict.", nameof(id));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class ClanCapitalRaidSeasonDistrict.", nameof(name));

            if (!stars.IsSet)
                throw new ArgumentException("Property is required for class ClanCapitalRaidSeasonDistrict.", nameof(stars));

            if (!totalLooted.IsSet)
                throw new ArgumentException("Property is required for class ClanCapitalRaidSeasonDistrict.", nameof(totalLooted));

            if (attackCount.IsSet && attackCount.Value == null)
                throw new ArgumentNullException(nameof(attackCount), "Property is not nullable for class ClanCapitalRaidSeasonDistrict.");

            if (destructionPercent.IsSet && destructionPercent.Value == null)
                throw new ArgumentNullException(nameof(destructionPercent), "Property is not nullable for class ClanCapitalRaidSeasonDistrict.");

            if (districtHallLevel.IsSet && districtHallLevel.Value == null)
                throw new ArgumentNullException(nameof(districtHallLevel), "Property is not nullable for class ClanCapitalRaidSeasonDistrict.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ClanCapitalRaidSeasonDistrict.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ClanCapitalRaidSeasonDistrict.");

            if (stars.IsSet && stars.Value == null)
                throw new ArgumentNullException(nameof(stars), "Property is not nullable for class ClanCapitalRaidSeasonDistrict.");

            if (totalLooted.IsSet && totalLooted.Value == null)
                throw new ArgumentNullException(nameof(totalLooted), "Property is not nullable for class ClanCapitalRaidSeasonDistrict.");

            if (attacks.IsSet && attacks.Value == null)
                throw new ArgumentNullException(nameof(attacks), "Property is not nullable for class ClanCapitalRaidSeasonDistrict.");

            return new ClanCapitalRaidSeasonDistrict(attackCount.Value!.Value!, destructionPercent.Value!.Value!, districtHallLevel.Value!.Value!, id.Value!.Value!, name.Value!, stars.Value!.Value!, totalLooted.Value!.Value!, attacks);
        }

        /// <summary>
        /// Serializes a <see cref="ClanCapitalRaidSeasonDistrict" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clanCapitalRaidSeasonDistrict"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClanCapitalRaidSeasonDistrict clanCapitalRaidSeasonDistrict, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, clanCapitalRaidSeasonDistrict, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ClanCapitalRaidSeasonDistrict" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clanCapitalRaidSeasonDistrict"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ClanCapitalRaidSeasonDistrict clanCapitalRaidSeasonDistrict, JsonSerializerOptions jsonSerializerOptions)
        {
            if (clanCapitalRaidSeasonDistrict.Name == null)
                throw new ArgumentNullException(nameof(clanCapitalRaidSeasonDistrict.Name), "Property is required for class ClanCapitalRaidSeasonDistrict.");

            if (clanCapitalRaidSeasonDistrict.AttacksOption.IsSet && clanCapitalRaidSeasonDistrict.Attacks == null)
                throw new ArgumentNullException(nameof(clanCapitalRaidSeasonDistrict.Attacks), "Property is required for class ClanCapitalRaidSeasonDistrict.");

            writer.WriteNumber("attackCount", clanCapitalRaidSeasonDistrict.AttackCount);

            writer.WriteNumber("destructionPercent", clanCapitalRaidSeasonDistrict.DestructionPercent);

            writer.WriteNumber("districtHallLevel", clanCapitalRaidSeasonDistrict.DistrictHallLevel);

            writer.WriteNumber("id", clanCapitalRaidSeasonDistrict.Id);

            writer.WriteString("name", clanCapitalRaidSeasonDistrict.Name);

            writer.WriteNumber("stars", clanCapitalRaidSeasonDistrict.Stars);

            writer.WriteNumber("totalLooted", clanCapitalRaidSeasonDistrict.TotalLooted);

            if (clanCapitalRaidSeasonDistrict.AttacksOption.IsSet)
            {
                writer.WritePropertyName("attacks");
                JsonSerializer.Serialize(writer, clanCapitalRaidSeasonDistrict.Attacks, jsonSerializerOptions);
            }
        }
    }
}
