// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using CocApi.Rest.Client;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// Location
    /// </summary>
    public partial class Location : IEquatable<Location?>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="isCountry">isCountry</param>
        /// <param name="name">name</param>
        /// <param name="countryCode">countryCode</param>
        /// <param name="localizedName">localizedName</param>
        [JsonConstructor]
        internal Location(int id, bool isCountry, string name, Option<string?> countryCode = default, Option<string?> localizedName = default)
        {
            Id = id;
            IsCountry = isCountry;
            Name = name;
            CountryCodeOption = countryCode;
            LocalizedNameOption = localizedName;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int Id { get; }

        /// <summary>
        /// Gets or Sets IsCountry
        /// </summary>
        [JsonPropertyName("isCountry")]
        public bool IsCountry { get; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; }

        /// <summary>
        /// Used to track the state of CountryCode
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryCodeOption { get; }

        /// <summary>
        /// Gets or Sets CountryCode
        /// </summary>
        [JsonPropertyName("countryCode")]
        public string? CountryCode { get { return this. CountryCodeOption; } }

        /// <summary>
        /// Used to track the state of LocalizedName
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LocalizedNameOption { get; }

        /// <summary>
        /// Gets or Sets LocalizedName
        /// </summary>
        [JsonPropertyName("localizedName")]
        public string? LocalizedName { get { return this. LocalizedNameOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsCountry: ").Append(IsCountry).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CountryCode: ").Append(CountryCode).Append("\n");
            sb.Append("  LocalizedName: ").Append(LocalizedName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as Location);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="input">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location? input)
        {
            if (input == null)
                return false;

            return 
                (
                    Id == input.Id ||
                    Id.Equals(input.Id)
                ) && 
                (
                    IsCountry == input.IsCountry ||
                    IsCountry.Equals(input.IsCountry)
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    CountryCode == input.CountryCode ||
                    (CountryCode != null &&
                    CountryCode.Equals(input.CountryCode))
                ) && 
                (
                    LocalizedName == input.LocalizedName ||
                    (LocalizedName != null &&
                    LocalizedName.Equals(input.LocalizedName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + Id.GetHashCode();
                hashCode = (hashCode * 59) + IsCountry.GetHashCode();
                hashCode = (hashCode * 59) + Name.GetHashCode();
                if (CountryCode != null)
                    hashCode = (hashCode * 59) + CountryCode.GetHashCode();

                if (LocalizedName != null)
                    hashCode = (hashCode * 59) + LocalizedName.GetHashCode();


                return hashCode;
            }
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Location" />
    /// </summary>
    public class LocationJsonConverter : JsonConverter<Location>
    {
        /// <summary>
        /// Deserializes json to <see cref="Location" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Location Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<bool?> isCountry = default;
            Option<string?> name = default;
            Option<string?> countryCode = default;
            Option<string?> localizedName = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = new Option<int?>(utf8JsonReader.GetInt32());
                            break;
                        case "isCountry":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                isCountry = new Option<bool?>(utf8JsonReader.GetBoolean());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "countryCode":
                            countryCode = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "localizedName":
                            localizedName = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Location.", nameof(id));

            if (!isCountry.IsSet)
                throw new ArgumentException("Property is required for class Location.", nameof(isCountry));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Location.", nameof(name));

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Location.");

            if (isCountry.IsSet && isCountry.Value == null)
                throw new ArgumentNullException(nameof(isCountry), "Property is not nullable for class Location.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Location.");

            if (countryCode.IsSet && countryCode.Value == null)
                throw new ArgumentNullException(nameof(countryCode), "Property is not nullable for class Location.");

            if (localizedName.IsSet && localizedName.Value == null)
                throw new ArgumentNullException(nameof(localizedName), "Property is not nullable for class Location.");

            return new Location(id.Value!.Value!, isCountry.Value!.Value!, name.Value!, countryCode, localizedName);
        }

        /// <summary>
        /// Serializes a <see cref="Location" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="location"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Location location, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, location, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Location" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="location"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, Location location, JsonSerializerOptions jsonSerializerOptions)
        {
            if (location.Name == null)
                throw new ArgumentNullException(nameof(location.Name), "Property is required for class Location.");

            if (location.CountryCodeOption.IsSet && location.CountryCode == null)
                throw new ArgumentNullException(nameof(location.CountryCode), "Property is required for class Location.");

            if (location.LocalizedNameOption.IsSet && location.LocalizedName == null)
                throw new ArgumentNullException(nameof(location.LocalizedName), "Property is required for class Location.");

            writer.WriteNumber("id", location.Id);

            writer.WriteBoolean("isCountry", location.IsCountry);

            writer.WriteString("name", location.Name);

            if (location.CountryCodeOption.IsSet)
                writer.WriteString("countryCode", location.CountryCode);

            if (location.LocalizedNameOption.IsSet)
                writer.WriteString("localizedName", location.LocalizedName);
        }
    }
}
