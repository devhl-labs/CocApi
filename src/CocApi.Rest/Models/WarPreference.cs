// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// Defines WarPreference
    /// </summary>
    public enum WarPreference
    {
        /// <summary>
        /// Enum Out for value: out
        /// </summary>
        Out = 0,

        /// <summary>
        /// Enum In for value: in
        /// </summary>
        In = 1
    }

    public class WarPreferenceConverter : JsonConverter<WarPreference>
    {
        public static WarPreference FromString(string value)
        {
            if (value == "out")
                return WarPreference.Out;

            if (value == "in")
                return WarPreference.In;

            throw new NotImplementedException($"Could not convert value to type WarPreference: '{value}'");
        }

        public static WarPreference? FromStringOrDefault(string value)
        {
            if (value == "out")
                return WarPreference.Out;

            if (value == "in")
                return WarPreference.In;

            return null;
        }

        public static string ToJsonValue(WarPreference value)
        {
            if (value == WarPreference.Out)
                return "out";

            if (value == WarPreference.In)
                return "in";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override WarPreference Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            WarPreference? result = WarPreferenceConverter.FromString(rawValue);
            
            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the WarPreference to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="warPreference"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, WarPreference warPreference, JsonSerializerOptions options)
        {
            writer.WriteStringValue(warPreference.ToString());
        }
    }

    public class WarPreferenceNullableConverter : JsonConverter<WarPreference?>
    {
        /// <summary>
        /// Returns a WarPreference from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override WarPreference? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            if (rawValue == null)
                return null;

            WarPreference? result = WarPreferenceConverter.FromString(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="warPreference"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, WarPreference? warPreference, JsonSerializerOptions options)
        {
            writer.WriteStringValue(warPreference?.ToString() ?? "null");
        }
    }

}
