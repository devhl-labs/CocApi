// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// Defines VillageType
    /// </summary>
    public enum VillageType
    {
        /// <summary>
        /// Enum Home for value: home
        /// </summary>
        Home = 1,

        /// <summary>
        /// Enum BuilderBase for value: builderBase
        /// </summary>
        BuilderBase = 2,

        /// <summary>
        /// Enum ClanCapital for value: clanCapital
        /// </summary>
        ClanCapital = 3
    }

    /// <summary>
    /// Converts <see cref="VillageType"/> to and from the JSON value
    /// </summary>
    public static class VillageTypeValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="VillageType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VillageType FromString(string value)
        {
            if (value.Equals("home"))
                return VillageType.Home;

            if (value.Equals("builderBase"))
                return VillageType.BuilderBase;

            if (value.Equals("clanCapital"))
                return VillageType.ClanCapital;

            throw new NotImplementedException($"Could not convert value to type VillageType: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="VillageType"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static VillageType? FromStringOrDefault(string value)
        {
            if (value.Equals("home"))
                return VillageType.Home;

            if (value.Equals("builderBase"))
                return VillageType.BuilderBase;

            if (value.Equals("clanCapital"))
                return VillageType.ClanCapital;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="VillageType"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(VillageType value)
        {
            if (value == VillageType.Home)
                return "home";

            if (value == VillageType.BuilderBase)
                return "builderBase";

            if (value == VillageType.ClanCapital)
                return "clanCapital";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VillageType"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class VillageTypeJsonConverter : JsonConverter<VillageType>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VillageType Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VillageType? result = rawValue == null
                ? null
                : VillageTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the VillageType to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="villageType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VillageType villageType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(villageType.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VillageType"/>
    /// </summary>
    public class VillageTypeNullableJsonConverter : JsonConverter<VillageType?>
    {
        /// <summary>
        /// Returns a VillageType from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override VillageType? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            VillageType? result = rawValue == null
                ? null
                : VillageTypeValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="villageType"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, VillageType? villageType, JsonSerializerOptions options)
        {
            writer.WriteStringValue(villageType?.ToString() ?? "null");
        }
    }
}
