// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// ClanWarMember
    /// </summary>
    public partial class ClanWarMember : IEquatable<ClanWarMember?>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClanWarMember" /> class.
        /// </summary>
        /// <param name="mapPosition">mapPosition</param>
        /// <param name="name">name</param>
        /// <param name="opponentAttacks">opponentAttacks</param>
        /// <param name="tag">tag</param>
        /// <param name="townhallLevel">townhallLevel</param>
        /// <param name="attacks">attacks</param>
        /// <param name="bestOpponentAttack">bestOpponentAttack</param>
        [JsonConstructor]
        internal ClanWarMember(int mapPosition, string name, int opponentAttacks, string tag, int townhallLevel, List<ClanWarAttack>? attacks = default, ClanWarAttack? bestOpponentAttack = default)
        {
            RosterPosition = mapPosition; // this is intentional. The MapPosition will be caculated in ClanWar#OnCreated
            Name = name;
            OpponentAttacks = opponentAttacks;
            Tag = tag;
            TownhallLevel = townhallLevel;
            Attacks = attacks;
            BestOpponentAttack = bestOpponentAttack;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; }

        /// <summary>
        /// Gets or Sets OpponentAttacks
        /// </summary>
        [JsonPropertyName("opponentAttacks")]
        public int OpponentAttacks { get; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [JsonPropertyName("tag")]
        public string Tag { get; }

        /// <summary>
        /// Gets or Sets TownhallLevel
        /// </summary>
        [JsonPropertyName("townhallLevel")]
        public int TownhallLevel { get; }

        /// <summary>
        /// Gets or Sets Attacks
        /// </summary>
        [JsonPropertyName("attacks")]
        public List<ClanWarAttack>? Attacks { get; }

        /// <summary>
        /// Gets or Sets BestOpponentAttack
        /// </summary>
        [JsonPropertyName("bestOpponentAttack")]
        public ClanWarAttack? BestOpponentAttack { get; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClanWarMember {\n");
            sb.Append("  MapPosition: ").Append(MapPosition).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OpponentAttacks: ").Append(OpponentAttacks).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  TownhallLevel: ").Append(TownhallLevel).Append("\n");
            sb.Append("  Attacks: ").Append(Attacks).Append("\n");
            sb.Append("  BestOpponentAttack: ").Append(BestOpponentAttack).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as ClanWarMember);
        }

        /// <summary>
        /// Returns true if ClanWarMember instances are equal
        /// </summary>
        /// <param name="input">Instance of ClanWarMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClanWarMember? input)
        {
            if (input == null)
                return false;

            return 
                (
                    MapPosition == input.MapPosition ||
                    (MapPosition != null &&
                    MapPosition.Equals(input.MapPosition))
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    OpponentAttacks == input.OpponentAttacks ||
                    (OpponentAttacks != null &&
                    OpponentAttacks.Equals(input.OpponentAttacks))
                ) && 
                (
                    Tag == input.Tag ||
                    (Tag != null &&
                    Tag.Equals(input.Tag))
                ) && 
                (
                    TownhallLevel == input.TownhallLevel ||
                    (TownhallLevel != null &&
                    TownhallLevel.Equals(input.TownhallLevel))
                ) && 
                (
                    Attacks == input.Attacks ||
                    Attacks != null &&
                    input.Attacks != null &&
                    Attacks.SequenceEqual(input.Attacks)
                ) && 
                (
                    BestOpponentAttack == input.BestOpponentAttack ||
                    (BestOpponentAttack != null &&
                    BestOpponentAttack.Equals(input.BestOpponentAttack))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + MapPosition.GetHashCode();
                hashCode = (hashCode * 59) + Name.GetHashCode();
                hashCode = (hashCode * 59) + OpponentAttacks.GetHashCode();
                hashCode = (hashCode * 59) + Tag.GetHashCode();
                hashCode = (hashCode * 59) + TownhallLevel.GetHashCode();

                if (Attacks != null)
                    hashCode = (hashCode * 59) + Attacks.GetHashCode();

                if (BestOpponentAttack != null)
                    hashCode = (hashCode * 59) + BestOpponentAttack.GetHashCode();

                return hashCode;
            }
        }
    }

    /// <summary>
    /// A Json converter for type ClanWarMember
    /// </summary>
    public class ClanWarMemberJsonConverter : JsonConverter<ClanWarMember>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClanWarMember Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            int? mapPosition = default;
            string? name = default;
            int? opponentAttacks = default;
            string? tag = default;
            int? townhallLevel = default;
            List<ClanWarAttack>? attacks = default;
            ClanWarAttack? bestOpponentAttack = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "mapPosition":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                mapPosition = utf8JsonReader.GetInt32();
                            break;
                        case "name":
                            name = utf8JsonReader.GetString();
                            break;
                        case "opponentAttacks":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                opponentAttacks = utf8JsonReader.GetInt32();
                            break;
                        case "tag":
                            tag = utf8JsonReader.GetString();
                            break;
                        case "townhallLevel":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                townhallLevel = utf8JsonReader.GetInt32();
                            break;
                        case "attacks":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                attacks = JsonSerializer.Deserialize<List<ClanWarAttack>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "bestOpponentAttack":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                bestOpponentAttack = JsonSerializer.Deserialize<ClanWarAttack>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        default:
                            break;
                    }
                }
            }

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (tag == null)
                throw new ArgumentNullException(nameof(tag), "Property is required for class ClanWarMember.");

            if (name == null)
                throw new ArgumentNullException(nameof(name), "Property is required for class ClanWarMember.");

            if (mapPosition == null)
                throw new ArgumentNullException(nameof(mapPosition), "Property is required for class ClanWarMember.");

            if (townhallLevel == null)
                throw new ArgumentNullException(nameof(townhallLevel), "Property is required for class ClanWarMember.");

            if (opponentAttacks == null)
                throw new ArgumentNullException(nameof(opponentAttacks), "Property is required for class ClanWarMember.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return new ClanWarMember(mapPosition.Value, name, opponentAttacks.Value, tag, townhallLevel.Value, attacks, bestOpponentAttack);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clanWarMember"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClanWarMember clanWarMember, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteNumber("mapPosition", clanWarMember.MapPosition);
            writer.WriteString("name", clanWarMember.Name);
            writer.WriteNumber("opponentAttacks", clanWarMember.OpponentAttacks);
            writer.WriteString("tag", clanWarMember.Tag);
            writer.WriteNumber("townhallLevel", clanWarMember.TownhallLevel);
            writer.WritePropertyName("attacks");
            JsonSerializer.Serialize(writer, clanWarMember.Attacks, jsonSerializerOptions);
            writer.WritePropertyName("bestOpponentAttack");
            JsonSerializer.Serialize(writer, clanWarMember.BestOpponentAttack, jsonSerializerOptions);

            writer.WriteEndObject();
        }
    }
}
