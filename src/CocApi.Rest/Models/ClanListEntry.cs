// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using CocApi.Rest.Client;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// ClanListEntry
    /// </summary>
    public partial class ClanListEntry : IEquatable<ClanListEntry?>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClanListEntry" /> class.
        /// </summary>
        /// <param name="badgeUrls">badgeUrls</param>
        /// <param name="clanBuilderBasePoints">clanBuilderBasePoints</param>
        /// <param name="clanLevel">clanLevel</param>
        /// <param name="clanPoints">clanPoints</param>
        /// <param name="isWarLogPublic">isWarLogPublic</param>
        /// <param name="labels">labels</param>
        /// <param name="members">members</param>
        /// <param name="name">name</param>
        /// <param name="requiredTrophies">requiredTrophies</param>
        /// <param name="tag">tag</param>
        /// <param name="warLeague">warLeague</param>
        /// <param name="warWinStreak">warWinStreak</param>
        /// <param name="warWins">warWins</param>
        /// <param name="chatLanguage">chatLanguage</param>
        /// <param name="location">location</param>
        /// <param name="type">type</param>
        /// <param name="warFrequency">warFrequency</param>
        /// <param name="warLosses">warLosses</param>
        /// <param name="warTies">warTies</param>
        [JsonConstructor]
        internal ClanListEntry(BadgeUrls badgeUrls, int clanBuilderBasePoints, int clanLevel, int clanPoints, bool isWarLogPublic, List<Label> labels, int members, string name, int requiredTrophies, string tag, WarLeague warLeague, int warWinStreak, int warWins, Option<Language?> chatLanguage = default, Option<Location?> location = default, Option<RecruitingType?> type = default, Option<WarFrequency?> warFrequency = default, Option<int?> warLosses = default, Option<int?> warTies = default)
        {
            BadgeUrls = badgeUrls;
            ClanBuilderBasePoints = clanBuilderBasePoints;
            ClanLevel = clanLevel;
            ClanPoints = clanPoints;
            IsWarLogPublic = isWarLogPublic;
            Labels = labels;
            Members = members;
            Name = name;
            RequiredTrophies = requiredTrophies;
            Tag = tag;
            WarLeague = warLeague;
            WarWinStreak = warWinStreak;
            WarWins = warWins;
            ChatLanguageOption = chatLanguage;
            LocationOption = location;
            TypeOption = type;
            WarFrequencyOption = warFrequency;
            WarLossesOption = warLosses;
            WarTiesOption = warTies;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Type
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<RecruitingType?> TypeOption { get; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public RecruitingType? Type { get { return this.TypeOption; } }

        /// <summary>
        /// Used to track the state of WarFrequency
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WarFrequency?> WarFrequencyOption { get; }

        /// <summary>
        /// Gets or Sets WarFrequency
        /// </summary>
        [JsonPropertyName("warFrequency")]
        public WarFrequency? WarFrequency { get { return this.WarFrequencyOption; } }

        /// <summary>
        /// Gets or Sets BadgeUrls
        /// </summary>
        [JsonPropertyName("badgeUrls")]
        public BadgeUrls BadgeUrls { get; }

        /// <summary>
        /// Gets or Sets ClanBuilderBasePoints
        /// </summary>
        [JsonPropertyName("clanBuilderBasePoints")]
        public int ClanBuilderBasePoints { get; }

        /// <summary>
        /// Gets or Sets ClanLevel
        /// </summary>
        [JsonPropertyName("clanLevel")]
        public int ClanLevel { get; }

        /// <summary>
        /// Gets or Sets ClanPoints
        /// </summary>
        [JsonPropertyName("clanPoints")]
        public int ClanPoints { get; }

        /// <summary>
        /// Gets or Sets IsWarLogPublic
        /// </summary>
        [JsonPropertyName("isWarLogPublic")]
        public bool IsWarLogPublic { get; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [JsonPropertyName("labels")]
        public List<Label> Labels { get; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [JsonPropertyName("members")]
        public int Members { get; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; }

        /// <summary>
        /// Gets or Sets RequiredTrophies
        /// </summary>
        [JsonPropertyName("requiredTrophies")]
        public int RequiredTrophies { get; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [JsonPropertyName("tag")]
        public string Tag { get; }

        /// <summary>
        /// Gets or Sets WarLeague
        /// </summary>
        [JsonPropertyName("warLeague")]
        public WarLeague WarLeague { get; }

        /// <summary>
        /// Gets or Sets WarWinStreak
        /// </summary>
        [JsonPropertyName("warWinStreak")]
        public int WarWinStreak { get; }

        /// <summary>
        /// Gets or Sets WarWins
        /// </summary>
        [JsonPropertyName("warWins")]
        public int WarWins { get; }

        /// <summary>
        /// Used to track the state of ChatLanguage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Language?> ChatLanguageOption { get; }

        /// <summary>
        /// Gets or Sets ChatLanguage
        /// </summary>
        [JsonPropertyName("chatLanguage")]
        public Language? ChatLanguage { get { return this.ChatLanguageOption; } }

        /// <summary>
        /// Used to track the state of Location
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Location?> LocationOption { get; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [JsonPropertyName("location")]
        public Location? Location { get { return this.LocationOption; } }

        /// <summary>
        /// Used to track the state of WarLosses
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WarLossesOption { get; }

        /// <summary>
        /// Gets or Sets WarLosses
        /// </summary>
        [JsonPropertyName("warLosses")]
        public int? WarLosses { get { return this.WarLossesOption; } }

        /// <summary>
        /// Used to track the state of WarTies
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> WarTiesOption { get; }

        /// <summary>
        /// Gets or Sets WarTies
        /// </summary>
        [JsonPropertyName("warTies")]
        public int? WarTies { get { return this.WarTiesOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClanListEntry {\n");
            sb.Append("  BadgeUrls: ").Append(BadgeUrls).Append("\n");
            sb.Append("  ClanBuilderBasePoints: ").Append(ClanBuilderBasePoints).Append("\n");
            sb.Append("  ClanLevel: ").Append(ClanLevel).Append("\n");
            sb.Append("  ClanPoints: ").Append(ClanPoints).Append("\n");
            sb.Append("  IsWarLogPublic: ").Append(IsWarLogPublic).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RequiredTrophies: ").Append(RequiredTrophies).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  WarLeague: ").Append(WarLeague).Append("\n");
            sb.Append("  WarWinStreak: ").Append(WarWinStreak).Append("\n");
            sb.Append("  WarWins: ").Append(WarWins).Append("\n");
            sb.Append("  ChatLanguage: ").Append(ChatLanguage).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  WarFrequency: ").Append(WarFrequency).Append("\n");
            sb.Append("  WarLosses: ").Append(WarLosses).Append("\n");
            sb.Append("  WarTies: ").Append(WarTies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as ClanListEntry);
        }

        /// <summary>
        /// Returns true if ClanListEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of ClanListEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClanListEntry? input)
        {
            if (input == null)
                return false;

            return 
                (
                    BadgeUrls == input.BadgeUrls ||
                    (BadgeUrls != null &&
                    BadgeUrls.Equals(input.BadgeUrls))
                ) && 
                (
                    ClanBuilderBasePoints == input.ClanBuilderBasePoints ||
                    ClanBuilderBasePoints.Equals(input.ClanBuilderBasePoints)
                ) && 
                (
                    ClanLevel == input.ClanLevel ||
                    ClanLevel.Equals(input.ClanLevel)
                ) && 
                (
                    ClanPoints == input.ClanPoints ||
                    ClanPoints.Equals(input.ClanPoints)
                ) && 
                (
                    IsWarLogPublic == input.IsWarLogPublic ||
                    IsWarLogPublic.Equals(input.IsWarLogPublic)
                ) && 
                (
                    Labels == input.Labels ||
                    Labels != null &&
                    input.Labels != null &&
                    Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    Members == input.Members ||
                    Members.Equals(input.Members)
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    RequiredTrophies == input.RequiredTrophies ||
                    RequiredTrophies.Equals(input.RequiredTrophies)
                ) && 
                (
                    Tag == input.Tag ||
                    (Tag != null &&
                    Tag.Equals(input.Tag))
                ) && 
                (
                    WarLeague == input.WarLeague ||
                    (WarLeague != null &&
                    WarLeague.Equals(input.WarLeague))
                ) && 
                (
                    WarWinStreak == input.WarWinStreak ||
                    WarWinStreak.Equals(input.WarWinStreak)
                ) && 
                (
                    WarWins == input.WarWins ||
                    WarWins.Equals(input.WarWins)
                ) && 
                (
                    ChatLanguage == input.ChatLanguage ||
                    (ChatLanguage != null &&
                    ChatLanguage.Equals(input.ChatLanguage))
                ) && 
                (
                    Location == input.Location ||
                    (Location != null &&
                    Location.Equals(input.Location))
                ) && 
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) && 
                (
                    WarFrequency == input.WarFrequency ||
                    WarFrequency.Equals(input.WarFrequency)
                ) && 
                (
                    WarLosses == input.WarLosses ||
                    WarLosses.Equals(input.WarLosses)
                ) && 
                (
                    WarTies == input.WarTies ||
                    WarTies.Equals(input.WarTies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + BadgeUrls.GetHashCode();
                hashCode = (hashCode * 59) + ClanBuilderBasePoints.GetHashCode();
                hashCode = (hashCode * 59) + ClanLevel.GetHashCode();
                hashCode = (hashCode * 59) + ClanPoints.GetHashCode();
                hashCode = (hashCode * 59) + IsWarLogPublic.GetHashCode();
                hashCode = (hashCode * 59) + Labels.GetHashCode();
                hashCode = (hashCode * 59) + Members.GetHashCode();
                hashCode = (hashCode * 59) + Name.GetHashCode();
                hashCode = (hashCode * 59) + RequiredTrophies.GetHashCode();
                hashCode = (hashCode * 59) + Tag.GetHashCode();
                hashCode = (hashCode * 59) + WarLeague.GetHashCode();
                hashCode = (hashCode * 59) + WarWinStreak.GetHashCode();
                hashCode = (hashCode * 59) + WarWins.GetHashCode();
                if (ChatLanguage != null)
                    hashCode = (hashCode * 59) + ChatLanguage.GetHashCode();

                if (Location != null)
                    hashCode = (hashCode * 59) + Location.GetHashCode();

                if (Type != null)
                    hashCode = (hashCode * 59) + Type.GetHashCode();

                if (WarFrequency != null)
                    hashCode = (hashCode * 59) + WarFrequency.GetHashCode();

                if (WarLosses != null)
                    hashCode = (hashCode * 59) + WarLosses.GetHashCode();

                if (WarTies != null)
                    hashCode = (hashCode * 59) + WarTies.GetHashCode();


                return hashCode;
            }
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClanListEntry" />
    /// </summary>
    public class ClanListEntryJsonConverter : JsonConverter<ClanListEntry>
    {
        /// <summary>
        /// Deserializes json to <see cref="ClanListEntry" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClanListEntry Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<BadgeUrls?> badgeUrls = default;
            Option<int?> clanBuilderBasePoints = default;
            Option<int?> clanLevel = default;
            Option<int?> clanPoints = default;
            Option<bool?> isWarLogPublic = default;
            Option<List<Label>?> labels = default;
            Option<int?> members = default;
            Option<string?> name = default;
            Option<int?> requiredTrophies = default;
            Option<string?> tag = default;
            Option<WarLeague?> warLeague = default;
            Option<int?> warWinStreak = default;
            Option<int?> warWins = default;
            Option<Language?> chatLanguage = default;
            Option<Location?> location = default;
            Option<RecruitingType?> type = default;
            Option<WarFrequency?> warFrequency = default;
            Option<int?> warLosses = default;
            Option<int?> warTies = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "badgeUrls":
                            badgeUrls = new Option<BadgeUrls?>(JsonSerializer.Deserialize<BadgeUrls>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "clanBuilderBasePoints":
                            clanBuilderBasePoints = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "clanLevel":
                            clanLevel = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "clanPoints":
                            clanPoints = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "isWarLogPublic":
                            isWarLogPublic = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "labels":
                            labels = new Option<List<Label>?>(JsonSerializer.Deserialize<List<Label>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "members":
                            members = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "requiredTrophies":
                            requiredTrophies = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "warLeague":
                            warLeague = new Option<WarLeague?>(JsonSerializer.Deserialize<WarLeague>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "warWinStreak":
                            warWinStreak = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "warWins":
                            warWins = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "chatLanguage":
                            chatLanguage = new Option<Language?>(JsonSerializer.Deserialize<Language>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "location":
                            location = new Option<Location?>(JsonSerializer.Deserialize<Location>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "type":
                            string? typeRawValue = utf8JsonReader.GetString();
                            if (typeRawValue != null)
                                type = new Option<RecruitingType?>(RecruitingTypeValueConverter.FromStringOrDefault(typeRawValue));
                            break;
                        case "warFrequency":
                            string? warFrequencyRawValue = utf8JsonReader.GetString();
                            if (warFrequencyRawValue != null)
                                warFrequency = new Option<WarFrequency?>(WarFrequencyValueConverter.FromStringOrDefault(warFrequencyRawValue));
                            break;
                        case "warLosses":
                            warLosses = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "warTies":
                            warTies = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!badgeUrls.IsSet)
                throw new ArgumentException("Property is required for class ClanListEntry.", nameof(badgeUrls));

            if (!clanBuilderBasePoints.IsSet)
                throw new ArgumentException("Property is required for class ClanListEntry.", nameof(clanBuilderBasePoints));

            if (!clanLevel.IsSet)
                throw new ArgumentException("Property is required for class ClanListEntry.", nameof(clanLevel));

            if (!clanPoints.IsSet)
                throw new ArgumentException("Property is required for class ClanListEntry.", nameof(clanPoints));

            if (!isWarLogPublic.IsSet)
                throw new ArgumentException("Property is required for class ClanListEntry.", nameof(isWarLogPublic));

            if (!labels.IsSet)
                throw new ArgumentException("Property is required for class ClanListEntry.", nameof(labels));

            if (!members.IsSet)
                throw new ArgumentException("Property is required for class ClanListEntry.", nameof(members));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class ClanListEntry.", nameof(name));

            if (!requiredTrophies.IsSet)
                throw new ArgumentException("Property is required for class ClanListEntry.", nameof(requiredTrophies));

            if (!tag.IsSet)
                throw new ArgumentException("Property is required for class ClanListEntry.", nameof(tag));

            if (!warLeague.IsSet)
                throw new ArgumentException("Property is required for class ClanListEntry.", nameof(warLeague));

            if (!warWinStreak.IsSet)
                throw new ArgumentException("Property is required for class ClanListEntry.", nameof(warWinStreak));

            if (!warWins.IsSet)
                throw new ArgumentException("Property is required for class ClanListEntry.", nameof(warWins));

            if (badgeUrls.IsSet && badgeUrls.Value == null)
                throw new ArgumentNullException(nameof(badgeUrls), "Property is not nullable for class ClanListEntry.");

            if (clanBuilderBasePoints.IsSet && clanBuilderBasePoints.Value == null)
                throw new ArgumentNullException(nameof(clanBuilderBasePoints), "Property is not nullable for class ClanListEntry.");

            if (clanLevel.IsSet && clanLevel.Value == null)
                throw new ArgumentNullException(nameof(clanLevel), "Property is not nullable for class ClanListEntry.");

            if (clanPoints.IsSet && clanPoints.Value == null)
                throw new ArgumentNullException(nameof(clanPoints), "Property is not nullable for class ClanListEntry.");

            if (isWarLogPublic.IsSet && isWarLogPublic.Value == null)
                throw new ArgumentNullException(nameof(isWarLogPublic), "Property is not nullable for class ClanListEntry.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class ClanListEntry.");

            if (members.IsSet && members.Value == null)
                throw new ArgumentNullException(nameof(members), "Property is not nullable for class ClanListEntry.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ClanListEntry.");

            if (requiredTrophies.IsSet && requiredTrophies.Value == null)
                throw new ArgumentNullException(nameof(requiredTrophies), "Property is not nullable for class ClanListEntry.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class ClanListEntry.");

            if (warLeague.IsSet && warLeague.Value == null)
                throw new ArgumentNullException(nameof(warLeague), "Property is not nullable for class ClanListEntry.");

            if (warWinStreak.IsSet && warWinStreak.Value == null)
                throw new ArgumentNullException(nameof(warWinStreak), "Property is not nullable for class ClanListEntry.");

            if (warWins.IsSet && warWins.Value == null)
                throw new ArgumentNullException(nameof(warWins), "Property is not nullable for class ClanListEntry.");

            if (chatLanguage.IsSet && chatLanguage.Value == null)
                throw new ArgumentNullException(nameof(chatLanguage), "Property is not nullable for class ClanListEntry.");

            if (location.IsSet && location.Value == null)
                throw new ArgumentNullException(nameof(location), "Property is not nullable for class ClanListEntry.");

            if (type.IsSet && type.Value == null)
                throw new ArgumentNullException(nameof(type), "Property is not nullable for class ClanListEntry.");

            if (warFrequency.IsSet && warFrequency.Value == null)
                throw new ArgumentNullException(nameof(warFrequency), "Property is not nullable for class ClanListEntry.");

            if (warLosses.IsSet && warLosses.Value == null)
                throw new ArgumentNullException(nameof(warLosses), "Property is not nullable for class ClanListEntry.");

            if (warTies.IsSet && warTies.Value == null)
                throw new ArgumentNullException(nameof(warTies), "Property is not nullable for class ClanListEntry.");

            return new ClanListEntry(badgeUrls.Value!, clanBuilderBasePoints.Value!.Value!, clanLevel.Value!.Value!, clanPoints.Value!.Value!, isWarLogPublic.Value!.Value!, labels.Value!, members.Value!.Value!, name.Value!, requiredTrophies.Value!.Value!, tag.Value!, warLeague.Value!, warWinStreak.Value!.Value!, warWins.Value!.Value!, chatLanguage, location, type, warFrequency, warLosses, warTies);
        }

        /// <summary>
        /// Serializes a <see cref="ClanListEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clanListEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClanListEntry clanListEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, clanListEntry, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ClanListEntry" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clanListEntry"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ClanListEntry clanListEntry, JsonSerializerOptions jsonSerializerOptions)
        {
            if (clanListEntry.BadgeUrls == null)
                throw new ArgumentNullException(nameof(clanListEntry.BadgeUrls), "Property is required for class ClanListEntry.");

            if (clanListEntry.Labels == null)
                throw new ArgumentNullException(nameof(clanListEntry.Labels), "Property is required for class ClanListEntry.");

            if (clanListEntry.Name == null)
                throw new ArgumentNullException(nameof(clanListEntry.Name), "Property is required for class ClanListEntry.");

            if (clanListEntry.Tag == null)
                throw new ArgumentNullException(nameof(clanListEntry.Tag), "Property is required for class ClanListEntry.");

            if (clanListEntry.WarLeague == null)
                throw new ArgumentNullException(nameof(clanListEntry.WarLeague), "Property is required for class ClanListEntry.");

            if (clanListEntry.ChatLanguageOption.IsSet && clanListEntry.ChatLanguage == null)
                throw new ArgumentNullException(nameof(clanListEntry.ChatLanguage), "Property is required for class ClanListEntry.");

            if (clanListEntry.LocationOption.IsSet && clanListEntry.Location == null)
                throw new ArgumentNullException(nameof(clanListEntry.Location), "Property is required for class ClanListEntry.");

            writer.WritePropertyName("badgeUrls");
            JsonSerializer.Serialize(writer, clanListEntry.BadgeUrls, jsonSerializerOptions);
            writer.WriteNumber("clanBuilderBasePoints", clanListEntry.ClanBuilderBasePoints);

            writer.WriteNumber("clanLevel", clanListEntry.ClanLevel);

            writer.WriteNumber("clanPoints", clanListEntry.ClanPoints);

            writer.WriteBoolean("isWarLogPublic", clanListEntry.IsWarLogPublic);

            writer.WritePropertyName("labels");
            JsonSerializer.Serialize(writer, clanListEntry.Labels, jsonSerializerOptions);
            writer.WriteNumber("members", clanListEntry.Members);

            writer.WriteString("name", clanListEntry.Name);

            writer.WriteNumber("requiredTrophies", clanListEntry.RequiredTrophies);

            writer.WriteString("tag", clanListEntry.Tag);

            writer.WritePropertyName("warLeague");
            JsonSerializer.Serialize(writer, clanListEntry.WarLeague, jsonSerializerOptions);
            writer.WriteNumber("warWinStreak", clanListEntry.WarWinStreak);

            writer.WriteNumber("warWins", clanListEntry.WarWins);

            if (clanListEntry.ChatLanguageOption.IsSet)
            {
                writer.WritePropertyName("chatLanguage");
                JsonSerializer.Serialize(writer, clanListEntry.ChatLanguage, jsonSerializerOptions);
            }
            if (clanListEntry.LocationOption.IsSet)
            {
                writer.WritePropertyName("location");
                JsonSerializer.Serialize(writer, clanListEntry.Location, jsonSerializerOptions);
            }
            if (clanListEntry.TypeOption.IsSet)
            {
                var typeRawValue = RecruitingTypeValueConverter.ToJsonValue(clanListEntry.Type!.Value);
                writer.WriteString("type", typeRawValue);
            }
            if (clanListEntry.WarFrequencyOption.IsSet)
            {
                var warFrequencyRawValue = WarFrequencyValueConverter.ToJsonValue(clanListEntry.WarFrequency!.Value);
                writer.WriteString("warFrequency", warFrequencyRawValue);
            }
            if (clanListEntry.WarLossesOption.IsSet)
                writer.WriteNumber("warLosses", clanListEntry.WarLossesOption.Value!.Value);

            if (clanListEntry.WarTiesOption.IsSet)
                writer.WriteNumber("warTies", clanListEntry.WarTiesOption.Value!.Value);
        }
    }
}
