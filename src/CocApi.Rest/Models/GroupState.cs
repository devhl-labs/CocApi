// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// Defines GroupState
    /// </summary>
    public enum GroupState
    {
        /// <summary>
        /// Enum Preparation for value: preparation
        /// </summary>
        Preparation = 1,

        /// <summary>
        /// Enum InWar for value: inWar
        /// </summary>
        InWar = 2,

        /// <summary>
        /// Enum Ended for value: ended
        /// </summary>
        Ended = 3
    }

    /// <summary>
    /// Converts <see cref="GroupState"/> to and from the JSON value
    /// </summary>
    public static class GroupStateValueConverter
    {
        /// <summary>
        /// Parses a given value to <see cref="GroupState"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GroupState FromString(string value)
        {
            if (value.Equals("preparation"))
                return GroupState.Preparation;

            if (value.Equals("inWar"))
                return GroupState.InWar;

            if (value.Equals("ended"))
                return GroupState.Ended;

            throw new NotImplementedException($"Could not convert value to type GroupState: '{value}'");
        }

        /// <summary>
        /// Parses a given value to <see cref="GroupState"/>
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static GroupState? FromStringOrDefault(string value)
        {
            if (value.Equals("preparation"))
                return GroupState.Preparation;

            if (value.Equals("inWar"))
                return GroupState.InWar;

            if (value.Equals("ended"))
                return GroupState.Ended;

            return null;
        }

        /// <summary>
        /// Converts the <see cref="GroupState"/> to the json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string ToJsonValue(GroupState value)
        {
            if (value == GroupState.Preparation)
                return "preparation";

            if (value == GroupState.InWar)
                return "inWar";

            if (value == GroupState.Ended)
                return "ended";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GroupState"/>
    /// </summary>
    /// <exception cref="NotImplementedException"></exception>
    public class GroupStateJsonConverter : JsonConverter<GroupState>
    {
        /// <summary>
        /// Returns a  from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override GroupState Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            GroupState? result = rawValue == null
                ? null
                : GroupStateValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the GroupState to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="groupState"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, GroupState groupState, JsonSerializerOptions options)
        {
            writer.WriteStringValue(groupState.ToString());
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GroupState"/>
    /// </summary>
    public class GroupStateNullableJsonConverter : JsonConverter<GroupState?>
    {
        /// <summary>
        /// Returns a GroupState from the Json object
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        public override GroupState? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            string? rawValue = reader.GetString();

            GroupState? result = rawValue == null
                ? null
                : GroupStateValueConverter.FromStringOrDefault(rawValue);

            if (result != null)
                return result.Value;

            throw new JsonException();
        }

        /// <summary>
        /// Writes the DateTime to the json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="groupState"></param>
        /// <param name="options"></param>
        public override void Write(Utf8JsonWriter writer, GroupState? groupState, JsonSerializerOptions options)
        {
            writer.WriteStringValue(groupState?.ToString() ?? "null");
        }
    }

}
