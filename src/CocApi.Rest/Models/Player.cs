// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using CocApi.Rest.Client;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// Player
    /// </summary>
    public partial class Player : IEquatable<Player?>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Player" /> class.
        /// </summary>
        /// <param name="achievements">achievements</param>
        /// <param name="attackWins">attackWins</param>
        /// <param name="bestTrophies">bestTrophies</param>
        /// <param name="builderBaseTrophies">builderBaseTrophies</param>
        /// <param name="defenseWins">defenseWins</param>
        /// <param name="donations">donations</param>
        /// <param name="donationsReceived">donationsReceived</param>
        /// <param name="expLevel">expLevel</param>
        /// <param name="heroes">heroes</param>
        /// <param name="labels">labels</param>
        /// <param name="name">name</param>
        /// <param name="spells">spells</param>
        /// <param name="tag">tag</param>
        /// <param name="townHallLevel">townHallLevel</param>
        /// <param name="troops">troops</param>
        /// <param name="trophies">trophies</param>
        /// <param name="warStars">warStars</param>
        /// <param name="builderBaseLeague">builderBaseLeague</param>
        /// <param name="builderHallLevel">builderHallLevel</param>
        /// <param name="clan">clan</param>
        /// <param name="clanCapitalContributions">clanCapitalContributions</param>
        /// <param name="heroEquipment">heroEquipment</param>
        /// <param name="league">league</param>
        /// <param name="legendStatistics">legendStatistics</param>
        /// <param name="playerHouse">playerHouse</param>
        /// <param name="role">role</param>
        /// <param name="townHallWeaponLevel">townHallWeaponLevel</param>
        /// <param name="warPreference">warPreference</param>
        [JsonConstructor]
        internal Player(List<PlayerAchievementProgress> achievements, int attackWins, int bestTrophies, int builderBaseTrophies, int defenseWins, int donations, int donationsReceived, int expLevel, List<PlayerItemLevel> heroes, List<Label> labels, string name, List<PlayerItemLevel> spells, string tag, int townHallLevel, List<PlayerItemLevel> troops, int trophies, int warStars, Option<BuilderBaseLeague?> builderBaseLeague = default, Option<int?> builderHallLevel = default, Option<PlayerClan?> clan = default, Option<int?> clanCapitalContributions = default, Option<List<PlayerItemLevel>?> heroEquipment = default, Option<League?> league = default, Option<PlayerLegendStatistics?> legendStatistics = default, Option<PlayerHouse?> playerHouse = default, Option<Role?> role = default, Option<int?> townHallWeaponLevel = default, Option<WarPreference?> warPreference = default)
        {
            Achievements = achievements;
            AttackWins = attackWins;
            BestTrophies = bestTrophies;
            BuilderBaseTrophies = builderBaseTrophies;
            DefenseWins = defenseWins;
            Donations = donations;
            DonationsReceived = donationsReceived;
            ExpLevel = expLevel;
            Heroes = heroes;
            Labels = labels;
            Name = name;
            Spells = spells;
            Tag = tag;
            TownHallLevel = townHallLevel;
            Troops = troops;
            Trophies = trophies;
            WarStars = warStars;
            BuilderBaseLeagueOption = builderBaseLeague;
            BuilderHallLevelOption = builderHallLevel;
            ClanOption = clan;
            ClanCapitalContributionsOption = clanCapitalContributions;
            HeroEquipmentOption = heroEquipment;
            LeagueOption = league;
            LegendStatisticsOption = legendStatistics;
            PlayerHouseOption = playerHouse;
            RoleOption = role;
            TownHallWeaponLevelOption = townHallWeaponLevel;
            WarPreferenceOption = warPreference;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Role?> RoleOption { get; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("role")]
        public Role? Role { get { return this.RoleOption; } }

        /// <summary>
        /// Used to track the state of WarPreference
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<WarPreference?> WarPreferenceOption { get; }

        /// <summary>
        /// Gets or Sets WarPreference
        /// </summary>
        [JsonPropertyName("warPreference")]
        public WarPreference? WarPreference { get { return this.WarPreferenceOption; } }

        /// <summary>
        /// Gets or Sets Achievements
        /// </summary>
        [JsonPropertyName("achievements")]
        public List<PlayerAchievementProgress> Achievements { get; }

        /// <summary>
        /// Gets or Sets AttackWins
        /// </summary>
        [JsonPropertyName("attackWins")]
        public int AttackWins { get; }

        /// <summary>
        /// Gets or Sets BestTrophies
        /// </summary>
        [JsonPropertyName("bestTrophies")]
        public int BestTrophies { get; }

        /// <summary>
        /// Gets or Sets BuilderBaseTrophies
        /// </summary>
        [JsonPropertyName("builderBaseTrophies")]
        public int BuilderBaseTrophies { get; }

        /// <summary>
        /// Gets or Sets DefenseWins
        /// </summary>
        [JsonPropertyName("defenseWins")]
        public int DefenseWins { get; }

        /// <summary>
        /// Gets or Sets Donations
        /// </summary>
        [JsonPropertyName("donations")]
        public int Donations { get; }

        /// <summary>
        /// Gets or Sets DonationsReceived
        /// </summary>
        [JsonPropertyName("donationsReceived")]
        public int DonationsReceived { get; }

        /// <summary>
        /// Gets or Sets ExpLevel
        /// </summary>
        [JsonPropertyName("expLevel")]
        public int ExpLevel { get; }

        /// <summary>
        /// Gets or Sets Heroes
        /// </summary>
        [JsonPropertyName("heroes")]
        public List<PlayerItemLevel> Heroes { get; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [JsonPropertyName("labels")]
        public List<Label> Labels { get; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; }

        /// <summary>
        /// Gets or Sets Spells
        /// </summary>
        [JsonPropertyName("spells")]
        public List<PlayerItemLevel> Spells { get; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [JsonPropertyName("tag")]
        public string Tag { get; }

        /// <summary>
        /// Gets or Sets TownHallLevel
        /// </summary>
        [JsonPropertyName("townHallLevel")]
        public int TownHallLevel { get; }

        /// <summary>
        /// Gets or Sets Troops
        /// </summary>
        [JsonPropertyName("troops")]
        public List<PlayerItemLevel> Troops { get; }

        /// <summary>
        /// Gets or Sets Trophies
        /// </summary>
        [JsonPropertyName("trophies")]
        public int Trophies { get; }

        /// <summary>
        /// Gets or Sets WarStars
        /// </summary>
        [JsonPropertyName("warStars")]
        public int WarStars { get; }

        /// <summary>
        /// Used to track the state of BuilderBaseLeague
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BuilderBaseLeague?> BuilderBaseLeagueOption { get; }

        /// <summary>
        /// Gets or Sets BuilderBaseLeague
        /// </summary>
        [JsonPropertyName("builderBaseLeague")]
        public BuilderBaseLeague? BuilderBaseLeague { get { return this.BuilderBaseLeagueOption; } }

        /// <summary>
        /// Used to track the state of BuilderHallLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> BuilderHallLevelOption { get; }

        /// <summary>
        /// Gets or Sets BuilderHallLevel
        /// </summary>
        [JsonPropertyName("builderHallLevel")]
        public int? BuilderHallLevel { get { return this.BuilderHallLevelOption; } }

        /// <summary>
        /// Used to track the state of Clan
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PlayerClan?> ClanOption { get; }

        /// <summary>
        /// Gets or Sets Clan
        /// </summary>
        [JsonPropertyName("clan")]
        public PlayerClan? Clan { get { return this.ClanOption; } }

        /// <summary>
        /// Used to track the state of ClanCapitalContributions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ClanCapitalContributionsOption { get; }

        /// <summary>
        /// Gets or Sets ClanCapitalContributions
        /// </summary>
        [JsonPropertyName("clanCapitalContributions")]
        public int? ClanCapitalContributions { get { return this.ClanCapitalContributionsOption; } }

        /// <summary>
        /// Used to track the state of HeroEquipment
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<PlayerItemLevel>?> HeroEquipmentOption { get; }

        /// <summary>
        /// Gets or Sets HeroEquipment
        /// </summary>
        [JsonPropertyName("heroEquipment")]
        public List<PlayerItemLevel>? HeroEquipment { get { return this.HeroEquipmentOption; } }

        /// <summary>
        /// Used to track the state of League
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<League?> LeagueOption { get; }

        /// <summary>
        /// Gets or Sets League
        /// </summary>
        [JsonPropertyName("league")]
        public League? League { get { return this.LeagueOption; } }

        /// <summary>
        /// Used to track the state of LegendStatistics
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PlayerLegendStatistics?> LegendStatisticsOption { get; }

        /// <summary>
        /// Gets or Sets LegendStatistics
        /// </summary>
        [JsonPropertyName("legendStatistics")]
        public PlayerLegendStatistics? LegendStatistics { get { return this.LegendStatisticsOption; } }

        /// <summary>
        /// Used to track the state of PlayerHouse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PlayerHouse?> PlayerHouseOption { get; }

        /// <summary>
        /// Gets or Sets PlayerHouse
        /// </summary>
        [JsonPropertyName("playerHouse")]
        public PlayerHouse? PlayerHouse { get { return this.PlayerHouseOption; } }

        /// <summary>
        /// Used to track the state of TownHallWeaponLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TownHallWeaponLevelOption { get; }

        /// <summary>
        /// Gets or Sets TownHallWeaponLevel
        /// </summary>
        [JsonPropertyName("townHallWeaponLevel")]
        public int? TownHallWeaponLevel { get { return this.TownHallWeaponLevelOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Player {\n");
            sb.Append("  Achievements: ").Append(Achievements).Append("\n");
            sb.Append("  AttackWins: ").Append(AttackWins).Append("\n");
            sb.Append("  BestTrophies: ").Append(BestTrophies).Append("\n");
            sb.Append("  BuilderBaseTrophies: ").Append(BuilderBaseTrophies).Append("\n");
            sb.Append("  DefenseWins: ").Append(DefenseWins).Append("\n");
            sb.Append("  Donations: ").Append(Donations).Append("\n");
            sb.Append("  DonationsReceived: ").Append(DonationsReceived).Append("\n");
            sb.Append("  ExpLevel: ").Append(ExpLevel).Append("\n");
            sb.Append("  Heroes: ").Append(Heroes).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Spells: ").Append(Spells).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  TownHallLevel: ").Append(TownHallLevel).Append("\n");
            sb.Append("  Troops: ").Append(Troops).Append("\n");
            sb.Append("  Trophies: ").Append(Trophies).Append("\n");
            sb.Append("  WarStars: ").Append(WarStars).Append("\n");
            sb.Append("  BuilderBaseLeague: ").Append(BuilderBaseLeague).Append("\n");
            sb.Append("  BuilderHallLevel: ").Append(BuilderHallLevel).Append("\n");
            sb.Append("  Clan: ").Append(Clan).Append("\n");
            sb.Append("  ClanCapitalContributions: ").Append(ClanCapitalContributions).Append("\n");
            sb.Append("  HeroEquipment: ").Append(HeroEquipment).Append("\n");
            sb.Append("  League: ").Append(League).Append("\n");
            sb.Append("  LegendStatistics: ").Append(LegendStatistics).Append("\n");
            sb.Append("  PlayerHouse: ").Append(PlayerHouse).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  TownHallWeaponLevel: ").Append(TownHallWeaponLevel).Append("\n");
            sb.Append("  WarPreference: ").Append(WarPreference).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as Player);
        }

        /// <summary>
        /// Returns true if Player instances are equal
        /// </summary>
        /// <param name="input">Instance of Player to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Player? input)
        {
            if (input == null)
                return false;

            return 
                (
                    Achievements == input.Achievements ||
                    Achievements != null &&
                    input.Achievements != null &&
                    Achievements.SequenceEqual(input.Achievements)
                ) && 
                (
                    AttackWins == input.AttackWins ||
                    AttackWins.Equals(input.AttackWins)
                ) && 
                (
                    BestTrophies == input.BestTrophies ||
                    BestTrophies.Equals(input.BestTrophies)
                ) && 
                (
                    BuilderBaseTrophies == input.BuilderBaseTrophies ||
                    BuilderBaseTrophies.Equals(input.BuilderBaseTrophies)
                ) && 
                (
                    DefenseWins == input.DefenseWins ||
                    DefenseWins.Equals(input.DefenseWins)
                ) && 
                (
                    Donations == input.Donations ||
                    Donations.Equals(input.Donations)
                ) && 
                (
                    DonationsReceived == input.DonationsReceived ||
                    DonationsReceived.Equals(input.DonationsReceived)
                ) && 
                (
                    ExpLevel == input.ExpLevel ||
                    ExpLevel.Equals(input.ExpLevel)
                ) && 
                (
                    Heroes == input.Heroes ||
                    Heroes != null &&
                    input.Heroes != null &&
                    Heroes.SequenceEqual(input.Heroes)
                ) && 
                (
                    Labels == input.Labels ||
                    Labels != null &&
                    input.Labels != null &&
                    Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Spells == input.Spells ||
                    Spells != null &&
                    input.Spells != null &&
                    Spells.SequenceEqual(input.Spells)
                ) && 
                (
                    Tag == input.Tag ||
                    (Tag != null &&
                    Tag.Equals(input.Tag))
                ) && 
                (
                    TownHallLevel == input.TownHallLevel ||
                    TownHallLevel.Equals(input.TownHallLevel)
                ) && 
                (
                    Troops == input.Troops ||
                    Troops != null &&
                    input.Troops != null &&
                    Troops.SequenceEqual(input.Troops)
                ) && 
                (
                    Trophies == input.Trophies ||
                    Trophies.Equals(input.Trophies)
                ) && 
                (
                    WarStars == input.WarStars ||
                    WarStars.Equals(input.WarStars)
                ) && 
                (
                    BuilderBaseLeague == input.BuilderBaseLeague ||
                    (BuilderBaseLeague != null &&
                    BuilderBaseLeague.Equals(input.BuilderBaseLeague))
                ) && 
                (
                    BuilderHallLevel == input.BuilderHallLevel ||
                    BuilderHallLevel.Equals(input.BuilderHallLevel)
                ) && 
                (
                    Clan == input.Clan ||
                    (Clan != null &&
                    Clan.Equals(input.Clan))
                ) && 
                (
                    ClanCapitalContributions == input.ClanCapitalContributions ||
                    ClanCapitalContributions.Equals(input.ClanCapitalContributions)
                ) && 
                (
                    HeroEquipment == input.HeroEquipment ||
                    HeroEquipment != null &&
                    input.HeroEquipment != null &&
                    HeroEquipment.SequenceEqual(input.HeroEquipment)
                ) && 
                (
                    League == input.League ||
                    (League != null &&
                    League.Equals(input.League))
                ) && 
                (
                    LegendStatistics == input.LegendStatistics ||
                    (LegendStatistics != null &&
                    LegendStatistics.Equals(input.LegendStatistics))
                ) && 
                (
                    PlayerHouse == input.PlayerHouse ||
                    (PlayerHouse != null &&
                    PlayerHouse.Equals(input.PlayerHouse))
                ) && 
                (
                    Role == input.Role ||
                    Role.Equals(input.Role)
                ) && 
                (
                    TownHallWeaponLevel == input.TownHallWeaponLevel ||
                    TownHallWeaponLevel.Equals(input.TownHallWeaponLevel)
                ) && 
                (
                    WarPreference == input.WarPreference ||
                    WarPreference.Equals(input.WarPreference)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + Achievements.GetHashCode();
                hashCode = (hashCode * 59) + AttackWins.GetHashCode();
                hashCode = (hashCode * 59) + BestTrophies.GetHashCode();
                hashCode = (hashCode * 59) + BuilderBaseTrophies.GetHashCode();
                hashCode = (hashCode * 59) + DefenseWins.GetHashCode();
                hashCode = (hashCode * 59) + Donations.GetHashCode();
                hashCode = (hashCode * 59) + DonationsReceived.GetHashCode();
                hashCode = (hashCode * 59) + ExpLevel.GetHashCode();
                hashCode = (hashCode * 59) + Heroes.GetHashCode();
                hashCode = (hashCode * 59) + Labels.GetHashCode();
                hashCode = (hashCode * 59) + Name.GetHashCode();
                hashCode = (hashCode * 59) + Spells.GetHashCode();
                hashCode = (hashCode * 59) + Tag.GetHashCode();
                hashCode = (hashCode * 59) + TownHallLevel.GetHashCode();
                hashCode = (hashCode * 59) + Troops.GetHashCode();
                hashCode = (hashCode * 59) + Trophies.GetHashCode();
                hashCode = (hashCode * 59) + WarStars.GetHashCode();
                if (BuilderBaseLeague != null)
                    hashCode = (hashCode * 59) + BuilderBaseLeague.GetHashCode();

                if (BuilderHallLevel != null)
                    hashCode = (hashCode * 59) + BuilderHallLevel.GetHashCode();

                if (Clan != null)
                    hashCode = (hashCode * 59) + Clan.GetHashCode();

                if (ClanCapitalContributions != null)
                    hashCode = (hashCode * 59) + ClanCapitalContributions.GetHashCode();

                if (HeroEquipment != null)
                    hashCode = (hashCode * 59) + HeroEquipment.GetHashCode();

                if (League != null)
                    hashCode = (hashCode * 59) + League.GetHashCode();

                if (LegendStatistics != null)
                    hashCode = (hashCode * 59) + LegendStatistics.GetHashCode();

                if (PlayerHouse != null)
                    hashCode = (hashCode * 59) + PlayerHouse.GetHashCode();

                if (Role != null)
                    hashCode = (hashCode * 59) + Role.GetHashCode();

                if (TownHallWeaponLevel != null)
                    hashCode = (hashCode * 59) + TownHallWeaponLevel.GetHashCode();

                if (WarPreference != null)
                    hashCode = (hashCode * 59) + WarPreference.GetHashCode();


                return hashCode;
            }
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Player" />
    /// </summary>
    public class PlayerJsonConverter : JsonConverter<Player>
    {
        /// <summary>
        /// Deserializes json to <see cref="Player" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Player Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<PlayerAchievementProgress>?> achievements = default;
            Option<int?> attackWins = default;
            Option<int?> bestTrophies = default;
            Option<int?> builderBaseTrophies = default;
            Option<int?> defenseWins = default;
            Option<int?> donations = default;
            Option<int?> donationsReceived = default;
            Option<int?> expLevel = default;
            Option<List<PlayerItemLevel>?> heroes = default;
            Option<List<Label>?> labels = default;
            Option<string?> name = default;
            Option<List<PlayerItemLevel>?> spells = default;
            Option<string?> tag = default;
            Option<int?> townHallLevel = default;
            Option<List<PlayerItemLevel>?> troops = default;
            Option<int?> trophies = default;
            Option<int?> warStars = default;
            Option<BuilderBaseLeague?> builderBaseLeague = default;
            Option<int?> builderHallLevel = default;
            Option<PlayerClan?> clan = default;
            Option<int?> clanCapitalContributions = default;
            Option<List<PlayerItemLevel>?> heroEquipment = default;
            Option<League?> league = default;
            Option<PlayerLegendStatistics?> legendStatistics = default;
            Option<PlayerHouse?> playerHouse = default;
            Option<Role?> role = default;
            Option<int?> townHallWeaponLevel = default;
            Option<WarPreference?> warPreference = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "achievements":
                            achievements = new Option<List<PlayerAchievementProgress>?>(JsonSerializer.Deserialize<List<PlayerAchievementProgress>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "attackWins":
                            attackWins = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "bestTrophies":
                            bestTrophies = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "builderBaseTrophies":
                            builderBaseTrophies = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "defenseWins":
                            defenseWins = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "donations":
                            donations = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "donationsReceived":
                            donationsReceived = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "expLevel":
                            expLevel = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "heroes":
                            heroes = new Option<List<PlayerItemLevel>?>(JsonSerializer.Deserialize<List<PlayerItemLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "labels":
                            labels = new Option<List<Label>?>(JsonSerializer.Deserialize<List<Label>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "spells":
                            spells = new Option<List<PlayerItemLevel>?>(JsonSerializer.Deserialize<List<PlayerItemLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "townHallLevel":
                            townHallLevel = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "troops":
                            troops = new Option<List<PlayerItemLevel>?>(JsonSerializer.Deserialize<List<PlayerItemLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "trophies":
                            trophies = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "warStars":
                            warStars = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "builderBaseLeague":
                            builderBaseLeague = new Option<BuilderBaseLeague?>(JsonSerializer.Deserialize<BuilderBaseLeague>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "builderHallLevel":
                            builderHallLevel = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "clan":
                            clan = new Option<PlayerClan?>(JsonSerializer.Deserialize<PlayerClan>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "clanCapitalContributions":
                            clanCapitalContributions = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "heroEquipment":
                            heroEquipment = new Option<List<PlayerItemLevel>?>(JsonSerializer.Deserialize<List<PlayerItemLevel>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "league":
                            league = new Option<League?>(JsonSerializer.Deserialize<League>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "legendStatistics":
                            legendStatistics = new Option<PlayerLegendStatistics?>(JsonSerializer.Deserialize<PlayerLegendStatistics>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "playerHouse":
                            playerHouse = new Option<PlayerHouse?>(JsonSerializer.Deserialize<PlayerHouse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "role":
                            string? roleRawValue = utf8JsonReader.GetString();
                            if (roleRawValue != null)
                                role = new Option<Role?>(RoleValueConverter.FromStringOrDefault(roleRawValue));
                            break;
                        case "townHallWeaponLevel":
                            townHallWeaponLevel = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "warPreference":
                            string? warPreferenceRawValue = utf8JsonReader.GetString();
                            if (warPreferenceRawValue != null)
                                warPreference = new Option<WarPreference?>(WarPreferenceValueConverter.FromStringOrDefault(warPreferenceRawValue));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!achievements.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(achievements));

            if (!attackWins.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(attackWins));

            if (!bestTrophies.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(bestTrophies));

            if (!builderBaseTrophies.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(builderBaseTrophies));

            if (!defenseWins.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(defenseWins));

            if (!donations.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(donations));

            if (!donationsReceived.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(donationsReceived));

            if (!expLevel.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(expLevel));

            if (!heroes.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(heroes));

            if (!labels.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(labels));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(name));

            if (!spells.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(spells));

            if (!tag.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(tag));

            if (!townHallLevel.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(townHallLevel));

            if (!troops.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(troops));

            if (!trophies.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(trophies));

            if (!warStars.IsSet)
                throw new ArgumentException("Property is required for class Player.", nameof(warStars));

            if (achievements.IsSet && achievements.Value == null)
                throw new ArgumentNullException(nameof(achievements), "Property is not nullable for class Player.");

            if (attackWins.IsSet && attackWins.Value == null)
                throw new ArgumentNullException(nameof(attackWins), "Property is not nullable for class Player.");

            if (bestTrophies.IsSet && bestTrophies.Value == null)
                throw new ArgumentNullException(nameof(bestTrophies), "Property is not nullable for class Player.");

            if (builderBaseTrophies.IsSet && builderBaseTrophies.Value == null)
                throw new ArgumentNullException(nameof(builderBaseTrophies), "Property is not nullable for class Player.");

            if (defenseWins.IsSet && defenseWins.Value == null)
                throw new ArgumentNullException(nameof(defenseWins), "Property is not nullable for class Player.");

            if (donations.IsSet && donations.Value == null)
                throw new ArgumentNullException(nameof(donations), "Property is not nullable for class Player.");

            if (donationsReceived.IsSet && donationsReceived.Value == null)
                throw new ArgumentNullException(nameof(donationsReceived), "Property is not nullable for class Player.");

            if (expLevel.IsSet && expLevel.Value == null)
                throw new ArgumentNullException(nameof(expLevel), "Property is not nullable for class Player.");

            if (heroes.IsSet && heroes.Value == null)
                throw new ArgumentNullException(nameof(heroes), "Property is not nullable for class Player.");

            if (labels.IsSet && labels.Value == null)
                throw new ArgumentNullException(nameof(labels), "Property is not nullable for class Player.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Player.");

            if (spells.IsSet && spells.Value == null)
                throw new ArgumentNullException(nameof(spells), "Property is not nullable for class Player.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class Player.");

            if (townHallLevel.IsSet && townHallLevel.Value == null)
                throw new ArgumentNullException(nameof(townHallLevel), "Property is not nullable for class Player.");

            if (troops.IsSet && troops.Value == null)
                throw new ArgumentNullException(nameof(troops), "Property is not nullable for class Player.");

            if (trophies.IsSet && trophies.Value == null)
                throw new ArgumentNullException(nameof(trophies), "Property is not nullable for class Player.");

            if (warStars.IsSet && warStars.Value == null)
                throw new ArgumentNullException(nameof(warStars), "Property is not nullable for class Player.");

            if (builderBaseLeague.IsSet && builderBaseLeague.Value == null)
                throw new ArgumentNullException(nameof(builderBaseLeague), "Property is not nullable for class Player.");

            if (builderHallLevel.IsSet && builderHallLevel.Value == null)
                throw new ArgumentNullException(nameof(builderHallLevel), "Property is not nullable for class Player.");

            if (clan.IsSet && clan.Value == null)
                throw new ArgumentNullException(nameof(clan), "Property is not nullable for class Player.");

            if (clanCapitalContributions.IsSet && clanCapitalContributions.Value == null)
                throw new ArgumentNullException(nameof(clanCapitalContributions), "Property is not nullable for class Player.");

            if (heroEquipment.IsSet && heroEquipment.Value == null)
                throw new ArgumentNullException(nameof(heroEquipment), "Property is not nullable for class Player.");

            if (league.IsSet && league.Value == null)
                throw new ArgumentNullException(nameof(league), "Property is not nullable for class Player.");

            if (legendStatistics.IsSet && legendStatistics.Value == null)
                throw new ArgumentNullException(nameof(legendStatistics), "Property is not nullable for class Player.");

            if (playerHouse.IsSet && playerHouse.Value == null)
                throw new ArgumentNullException(nameof(playerHouse), "Property is not nullable for class Player.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class Player.");

            if (townHallWeaponLevel.IsSet && townHallWeaponLevel.Value == null)
                throw new ArgumentNullException(nameof(townHallWeaponLevel), "Property is not nullable for class Player.");

            if (warPreference.IsSet && warPreference.Value == null)
                throw new ArgumentNullException(nameof(warPreference), "Property is not nullable for class Player.");

            return new Player(achievements.Value!, attackWins.Value!.Value!, bestTrophies.Value!.Value!, builderBaseTrophies.Value!.Value!, defenseWins.Value!.Value!, donations.Value!.Value!, donationsReceived.Value!.Value!, expLevel.Value!.Value!, heroes.Value!, labels.Value!, name.Value!, spells.Value!, tag.Value!, townHallLevel.Value!.Value!, troops.Value!, trophies.Value!.Value!, warStars.Value!.Value!, builderBaseLeague, builderHallLevel, clan, clanCapitalContributions, heroEquipment, league, legendStatistics, playerHouse, role, townHallWeaponLevel, warPreference);
        }

        /// <summary>
        /// Serializes a <see cref="Player" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="player"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Player player, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, player, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Player" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="player"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, Player player, JsonSerializerOptions jsonSerializerOptions)
        {
            if (player.Achievements == null)
                throw new ArgumentNullException(nameof(player.Achievements), "Property is required for class Player.");

            if (player.Heroes == null)
                throw new ArgumentNullException(nameof(player.Heroes), "Property is required for class Player.");

            if (player.Labels == null)
                throw new ArgumentNullException(nameof(player.Labels), "Property is required for class Player.");

            if (player.Name == null)
                throw new ArgumentNullException(nameof(player.Name), "Property is required for class Player.");

            if (player.Spells == null)
                throw new ArgumentNullException(nameof(player.Spells), "Property is required for class Player.");

            if (player.Tag == null)
                throw new ArgumentNullException(nameof(player.Tag), "Property is required for class Player.");

            if (player.Troops == null)
                throw new ArgumentNullException(nameof(player.Troops), "Property is required for class Player.");

            if (player.BuilderBaseLeagueOption.IsSet && player.BuilderBaseLeague == null)
                throw new ArgumentNullException(nameof(player.BuilderBaseLeague), "Property is required for class Player.");

            if (player.ClanOption.IsSet && player.Clan == null)
                throw new ArgumentNullException(nameof(player.Clan), "Property is required for class Player.");

            if (player.HeroEquipmentOption.IsSet && player.HeroEquipment == null)
                throw new ArgumentNullException(nameof(player.HeroEquipment), "Property is required for class Player.");

            if (player.LeagueOption.IsSet && player.League == null)
                throw new ArgumentNullException(nameof(player.League), "Property is required for class Player.");

            if (player.LegendStatisticsOption.IsSet && player.LegendStatistics == null)
                throw new ArgumentNullException(nameof(player.LegendStatistics), "Property is required for class Player.");

            if (player.PlayerHouseOption.IsSet && player.PlayerHouse == null)
                throw new ArgumentNullException(nameof(player.PlayerHouse), "Property is required for class Player.");

            writer.WritePropertyName("achievements");
            JsonSerializer.Serialize(writer, player.Achievements, jsonSerializerOptions);
            writer.WriteNumber("attackWins", player.AttackWins);

            writer.WriteNumber("bestTrophies", player.BestTrophies);

            writer.WriteNumber("builderBaseTrophies", player.BuilderBaseTrophies);

            writer.WriteNumber("defenseWins", player.DefenseWins);

            writer.WriteNumber("donations", player.Donations);

            writer.WriteNumber("donationsReceived", player.DonationsReceived);

            writer.WriteNumber("expLevel", player.ExpLevel);

            writer.WritePropertyName("heroes");
            JsonSerializer.Serialize(writer, player.Heroes, jsonSerializerOptions);
            writer.WritePropertyName("labels");
            JsonSerializer.Serialize(writer, player.Labels, jsonSerializerOptions);
            writer.WriteString("name", player.Name);

            writer.WritePropertyName("spells");
            JsonSerializer.Serialize(writer, player.Spells, jsonSerializerOptions);
            writer.WriteString("tag", player.Tag);

            writer.WriteNumber("townHallLevel", player.TownHallLevel);

            writer.WritePropertyName("troops");
            JsonSerializer.Serialize(writer, player.Troops, jsonSerializerOptions);
            writer.WriteNumber("trophies", player.Trophies);

            writer.WriteNumber("warStars", player.WarStars);

            if (player.BuilderBaseLeagueOption.IsSet)
            {
                writer.WritePropertyName("builderBaseLeague");
                JsonSerializer.Serialize(writer, player.BuilderBaseLeague, jsonSerializerOptions);
            }
            if (player.BuilderHallLevelOption.IsSet)
                writer.WriteNumber("builderHallLevel", player.BuilderHallLevelOption.Value!.Value);

            if (player.ClanOption.IsSet)
            {
                writer.WritePropertyName("clan");
                JsonSerializer.Serialize(writer, player.Clan, jsonSerializerOptions);
            }
            if (player.ClanCapitalContributionsOption.IsSet)
                writer.WriteNumber("clanCapitalContributions", player.ClanCapitalContributionsOption.Value!.Value);

            if (player.HeroEquipmentOption.IsSet)
            {
                writer.WritePropertyName("heroEquipment");
                JsonSerializer.Serialize(writer, player.HeroEquipment, jsonSerializerOptions);
            }
            if (player.LeagueOption.IsSet)
            {
                writer.WritePropertyName("league");
                JsonSerializer.Serialize(writer, player.League, jsonSerializerOptions);
            }
            if (player.LegendStatisticsOption.IsSet)
            {
                writer.WritePropertyName("legendStatistics");
                JsonSerializer.Serialize(writer, player.LegendStatistics, jsonSerializerOptions);
            }
            if (player.PlayerHouseOption.IsSet)
            {
                writer.WritePropertyName("playerHouse");
                JsonSerializer.Serialize(writer, player.PlayerHouse, jsonSerializerOptions);
            }
            if (player.RoleOption.IsSet)
            {
                var roleRawValue = RoleValueConverter.ToJsonValue(player.Role!.Value);
                writer.WriteString("role", roleRawValue);
            }
            if (player.TownHallWeaponLevelOption.IsSet)
                writer.WriteNumber("townHallWeaponLevel", player.TownHallWeaponLevelOption.Value!.Value);

            if (player.WarPreferenceOption.IsSet)
            {
                var warPreferenceRawValue = WarPreferenceValueConverter.ToJsonValue(player.WarPreference!.Value);
                writer.WriteString("warPreference", warPreferenceRawValue);
            }
        }
    }
}
