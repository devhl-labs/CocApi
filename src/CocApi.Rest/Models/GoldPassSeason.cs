// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using CocApi.Rest.Client;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// GoldPassSeason
    /// </summary>
    public partial class GoldPassSeason : IEquatable<GoldPassSeason?>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GoldPassSeason" /> class.
        /// </summary>
        /// <param name="endTime">endTime</param>
        /// <param name="startTime">startTime</param>
        [JsonConstructor]
        internal GoldPassSeason(string endTime, string startTime)
        {
            EndTime = endTime;
            StartTime = startTime;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [JsonPropertyName("endTime")]
        public string EndTime { get; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [JsonPropertyName("startTime")]
        public string StartTime { get; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GoldPassSeason {\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as GoldPassSeason);
        }

        /// <summary>
        /// Returns true if GoldPassSeason instances are equal
        /// </summary>
        /// <param name="input">Instance of GoldPassSeason to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoldPassSeason? input)
        {
            if (input == null)
                return false;

            return 
                (
                    EndTime == input.EndTime ||
                    (EndTime != null &&
                    EndTime.Equals(input.EndTime))
                ) && 
                (
                    StartTime == input.StartTime ||
                    (StartTime != null &&
                    StartTime.Equals(input.StartTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + EndTime.GetHashCode();
                hashCode = (hashCode * 59) + StartTime.GetHashCode();

                return hashCode;
            }
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="GoldPassSeason" />
    /// </summary>
    public class GoldPassSeasonJsonConverter : JsonConverter<GoldPassSeason>
    {
        /// <summary>
        /// Deserializes json to <see cref="GoldPassSeason" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override GoldPassSeason Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> endTime = default;
            Option<string?> startTime = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "endTime":
                            endTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "startTime":
                            startTime = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!endTime.IsSet)
                throw new ArgumentException("Property is required for class GoldPassSeason.", nameof(endTime));

            if (!startTime.IsSet)
                throw new ArgumentException("Property is required for class GoldPassSeason.", nameof(startTime));

            if (endTime.IsSet && endTime.Value == null)
                throw new ArgumentNullException(nameof(endTime), "Property is not nullable for class GoldPassSeason.");

            if (startTime.IsSet && startTime.Value == null)
                throw new ArgumentNullException(nameof(startTime), "Property is not nullable for class GoldPassSeason.");

            return new GoldPassSeason(endTime.Value!, startTime.Value!);
        }

        /// <summary>
        /// Serializes a <see cref="GoldPassSeason" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="goldPassSeason"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, GoldPassSeason goldPassSeason, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, goldPassSeason, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="GoldPassSeason" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="goldPassSeason"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, GoldPassSeason goldPassSeason, JsonSerializerOptions jsonSerializerOptions)
        {
            if (goldPassSeason.EndTime == null)
                throw new ArgumentNullException(nameof(goldPassSeason.EndTime), "Property is required for class GoldPassSeason.");

            if (goldPassSeason.StartTime == null)
                throw new ArgumentNullException(nameof(goldPassSeason.StartTime), "Property is required for class GoldPassSeason.");

            writer.WriteString("endTime", goldPassSeason.EndTime);

            writer.WriteString("startTime", goldPassSeason.StartTime);
        }
    }
}
