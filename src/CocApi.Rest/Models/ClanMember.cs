// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using CocApi.Rest.Client;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// ClanMember
    /// </summary>
    public partial class ClanMember : IEquatable<ClanMember?>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClanMember" /> class.
        /// </summary>
        /// <param name="builderBaseTrophies">builderBaseTrophies</param>
        /// <param name="clanRank">clanRank</param>
        /// <param name="donations">donations</param>
        /// <param name="donationsReceived">donationsReceived</param>
        /// <param name="expLevel">expLevel</param>
        /// <param name="league">league</param>
        /// <param name="name">name</param>
        /// <param name="previousClanRank">previousClanRank</param>
        /// <param name="tag">tag</param>
        /// <param name="trophies">trophies</param>
        /// <param name="builderBaseLeague">builderBaseLeague</param>
        /// <param name="playerHouse">playerHouse</param>
        /// <param name="role">role</param>
        /// <param name="townHallLevel">townHallLevel</param>
        [JsonConstructor]
        internal ClanMember(int builderBaseTrophies, int clanRank, int donations, int donationsReceived, int expLevel, League league, string name, int previousClanRank, string tag, int trophies, Option<BuilderBaseLeague?> builderBaseLeague = default, Option<PlayerHouse?> playerHouse = default, Option<Role?> role = default, Option<int?> townHallLevel = default)
        {
            BuilderBaseTrophies = builderBaseTrophies;
            ClanRank = clanRank;
            Donations = donations;
            DonationsReceived = donationsReceived;
            ExpLevel = expLevel;
            League = league;
            Name = name;
            PreviousClanRank = previousClanRank;
            Tag = tag;
            Trophies = trophies;
            BuilderBaseLeagueOption = builderBaseLeague;
            PlayerHouseOption = playerHouse;
            RoleOption = role;
            TownHallLevelOption = townHallLevel;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Role
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Role?> RoleOption { get; }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [JsonPropertyName("role")]
        public Role? Role { get { return this.RoleOption; } }

        /// <summary>
        /// Gets or Sets BuilderBaseTrophies
        /// </summary>
        [JsonPropertyName("builderBaseTrophies")]
        public int BuilderBaseTrophies { get; }

        /// <summary>
        /// Gets or Sets ClanRank
        /// </summary>
        [JsonPropertyName("clanRank")]
        public int ClanRank { get; }

        /// <summary>
        /// Gets or Sets Donations
        /// </summary>
        [JsonPropertyName("donations")]
        public int Donations { get; }

        /// <summary>
        /// Gets or Sets DonationsReceived
        /// </summary>
        [JsonPropertyName("donationsReceived")]
        public int DonationsReceived { get; }

        /// <summary>
        /// Gets or Sets ExpLevel
        /// </summary>
        [JsonPropertyName("expLevel")]
        public int ExpLevel { get; }

        /// <summary>
        /// Gets or Sets League
        /// </summary>
        [JsonPropertyName("league")]
        public League League { get; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; }

        /// <summary>
        /// Gets or Sets PreviousClanRank
        /// </summary>
        [JsonPropertyName("previousClanRank")]
        public int PreviousClanRank { get; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [JsonPropertyName("tag")]
        public string Tag { get; }

        /// <summary>
        /// Gets or Sets Trophies
        /// </summary>
        [JsonPropertyName("trophies")]
        public int Trophies { get; }

        /// <summary>
        /// Used to track the state of BuilderBaseLeague
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<BuilderBaseLeague?> BuilderBaseLeagueOption { get; }

        /// <summary>
        /// Gets or Sets BuilderBaseLeague
        /// </summary>
        [JsonPropertyName("builderBaseLeague")]
        public BuilderBaseLeague? BuilderBaseLeague { get { return this.BuilderBaseLeagueOption; } }

        /// <summary>
        /// Used to track the state of PlayerHouse
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<PlayerHouse?> PlayerHouseOption { get; }

        /// <summary>
        /// Gets or Sets PlayerHouse
        /// </summary>
        [JsonPropertyName("playerHouse")]
        public PlayerHouse? PlayerHouse { get { return this.PlayerHouseOption; } }

        /// <summary>
        /// Used to track the state of TownHallLevel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> TownHallLevelOption { get; }

        /// <summary>
        /// Gets or Sets TownHallLevel
        /// </summary>
        [JsonPropertyName("townHallLevel")]
        public int? TownHallLevel { get { return this.TownHallLevelOption; } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClanMember {\n");
            sb.Append("  BuilderBaseTrophies: ").Append(BuilderBaseTrophies).Append("\n");
            sb.Append("  ClanRank: ").Append(ClanRank).Append("\n");
            sb.Append("  Donations: ").Append(Donations).Append("\n");
            sb.Append("  DonationsReceived: ").Append(DonationsReceived).Append("\n");
            sb.Append("  ExpLevel: ").Append(ExpLevel).Append("\n");
            sb.Append("  League: ").Append(League).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PreviousClanRank: ").Append(PreviousClanRank).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Trophies: ").Append(Trophies).Append("\n");
            sb.Append("  BuilderBaseLeague: ").Append(BuilderBaseLeague).Append("\n");
            sb.Append("  PlayerHouse: ").Append(PlayerHouse).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  TownHallLevel: ").Append(TownHallLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as ClanMember);
        }

        /// <summary>
        /// Returns true if ClanMember instances are equal
        /// </summary>
        /// <param name="input">Instance of ClanMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClanMember? input)
        {
            if (input == null)
                return false;

            return 
                (
                    BuilderBaseTrophies == input.BuilderBaseTrophies ||
                    BuilderBaseTrophies.Equals(input.BuilderBaseTrophies)
                ) && 
                (
                    ClanRank == input.ClanRank ||
                    ClanRank.Equals(input.ClanRank)
                ) && 
                (
                    Donations == input.Donations ||
                    Donations.Equals(input.Donations)
                ) && 
                (
                    DonationsReceived == input.DonationsReceived ||
                    DonationsReceived.Equals(input.DonationsReceived)
                ) && 
                (
                    ExpLevel == input.ExpLevel ||
                    ExpLevel.Equals(input.ExpLevel)
                ) && 
                (
                    League == input.League ||
                    (League != null &&
                    League.Equals(input.League))
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    PreviousClanRank == input.PreviousClanRank ||
                    PreviousClanRank.Equals(input.PreviousClanRank)
                ) && 
                (
                    Tag == input.Tag ||
                    (Tag != null &&
                    Tag.Equals(input.Tag))
                ) && 
                (
                    Trophies == input.Trophies ||
                    Trophies.Equals(input.Trophies)
                ) && 
                (
                    BuilderBaseLeague == input.BuilderBaseLeague ||
                    (BuilderBaseLeague != null &&
                    BuilderBaseLeague.Equals(input.BuilderBaseLeague))
                ) && 
                (
                    PlayerHouse == input.PlayerHouse ||
                    (PlayerHouse != null &&
                    PlayerHouse.Equals(input.PlayerHouse))
                ) && 
                (
                    Role == input.Role ||
                    Role.Equals(input.Role)
                ) && 
                (
                    TownHallLevel == input.TownHallLevel ||
                    TownHallLevel.Equals(input.TownHallLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + BuilderBaseTrophies.GetHashCode();
                hashCode = (hashCode * 59) + ClanRank.GetHashCode();
                hashCode = (hashCode * 59) + Donations.GetHashCode();
                hashCode = (hashCode * 59) + DonationsReceived.GetHashCode();
                hashCode = (hashCode * 59) + ExpLevel.GetHashCode();
                hashCode = (hashCode * 59) + League.GetHashCode();
                hashCode = (hashCode * 59) + Name.GetHashCode();
                hashCode = (hashCode * 59) + PreviousClanRank.GetHashCode();
                hashCode = (hashCode * 59) + Tag.GetHashCode();
                hashCode = (hashCode * 59) + Trophies.GetHashCode();
                if (BuilderBaseLeague != null)
                    hashCode = (hashCode * 59) + BuilderBaseLeague.GetHashCode();

                if (PlayerHouse != null)
                    hashCode = (hashCode * 59) + PlayerHouse.GetHashCode();

                if (Role != null)
                    hashCode = (hashCode * 59) + Role.GetHashCode();

                if (TownHallLevel != null)
                    hashCode = (hashCode * 59) + TownHallLevel.GetHashCode();


                return hashCode;
            }
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClanMember" />
    /// </summary>
    public class ClanMemberJsonConverter : JsonConverter<ClanMember>
    {
        /// <summary>
        /// Deserializes json to <see cref="ClanMember" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClanMember Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> builderBaseTrophies = default;
            Option<int?> clanRank = default;
            Option<int?> donations = default;
            Option<int?> donationsReceived = default;
            Option<int?> expLevel = default;
            Option<League?> league = default;
            Option<string?> name = default;
            Option<int?> previousClanRank = default;
            Option<string?> tag = default;
            Option<int?> trophies = default;
            Option<BuilderBaseLeague?> builderBaseLeague = default;
            Option<PlayerHouse?> playerHouse = default;
            Option<Role?> role = default;
            Option<int?> townHallLevel = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "builderBaseTrophies":
                            builderBaseTrophies = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "clanRank":
                            clanRank = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "donations":
                            donations = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "donationsReceived":
                            donationsReceived = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "expLevel":
                            expLevel = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "league":
                            league = new Option<League?>(JsonSerializer.Deserialize<League>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "previousClanRank":
                            previousClanRank = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "tag":
                            tag = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "trophies":
                            trophies = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "builderBaseLeague":
                            builderBaseLeague = new Option<BuilderBaseLeague?>(JsonSerializer.Deserialize<BuilderBaseLeague>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "playerHouse":
                            playerHouse = new Option<PlayerHouse?>(JsonSerializer.Deserialize<PlayerHouse>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "role":
                            string? roleRawValue = utf8JsonReader.GetString();
                            if (roleRawValue != null)
                                role = new Option<Role?>(RoleValueConverter.FromStringOrDefault(roleRawValue));
                            break;
                        case "townHallLevel":
                            townHallLevel = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!builderBaseTrophies.IsSet)
                throw new ArgumentException("Property is required for class ClanMember.", nameof(builderBaseTrophies));

            if (!clanRank.IsSet)
                throw new ArgumentException("Property is required for class ClanMember.", nameof(clanRank));

            if (!donations.IsSet)
                throw new ArgumentException("Property is required for class ClanMember.", nameof(donations));

            if (!donationsReceived.IsSet)
                throw new ArgumentException("Property is required for class ClanMember.", nameof(donationsReceived));

            if (!expLevel.IsSet)
                throw new ArgumentException("Property is required for class ClanMember.", nameof(expLevel));

            if (!league.IsSet)
                throw new ArgumentException("Property is required for class ClanMember.", nameof(league));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class ClanMember.", nameof(name));

            if (!previousClanRank.IsSet)
                throw new ArgumentException("Property is required for class ClanMember.", nameof(previousClanRank));

            if (!tag.IsSet)
                throw new ArgumentException("Property is required for class ClanMember.", nameof(tag));

            if (!trophies.IsSet)
                throw new ArgumentException("Property is required for class ClanMember.", nameof(trophies));

            if (builderBaseTrophies.IsSet && builderBaseTrophies.Value == null)
                throw new ArgumentNullException(nameof(builderBaseTrophies), "Property is not nullable for class ClanMember.");

            if (clanRank.IsSet && clanRank.Value == null)
                throw new ArgumentNullException(nameof(clanRank), "Property is not nullable for class ClanMember.");

            if (donations.IsSet && donations.Value == null)
                throw new ArgumentNullException(nameof(donations), "Property is not nullable for class ClanMember.");

            if (donationsReceived.IsSet && donationsReceived.Value == null)
                throw new ArgumentNullException(nameof(donationsReceived), "Property is not nullable for class ClanMember.");

            if (expLevel.IsSet && expLevel.Value == null)
                throw new ArgumentNullException(nameof(expLevel), "Property is not nullable for class ClanMember.");

            if (league.IsSet && league.Value == null)
                throw new ArgumentNullException(nameof(league), "Property is not nullable for class ClanMember.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ClanMember.");

            if (previousClanRank.IsSet && previousClanRank.Value == null)
                throw new ArgumentNullException(nameof(previousClanRank), "Property is not nullable for class ClanMember.");

            if (tag.IsSet && tag.Value == null)
                throw new ArgumentNullException(nameof(tag), "Property is not nullable for class ClanMember.");

            if (trophies.IsSet && trophies.Value == null)
                throw new ArgumentNullException(nameof(trophies), "Property is not nullable for class ClanMember.");

            if (builderBaseLeague.IsSet && builderBaseLeague.Value == null)
                throw new ArgumentNullException(nameof(builderBaseLeague), "Property is not nullable for class ClanMember.");

            if (playerHouse.IsSet && playerHouse.Value == null)
                throw new ArgumentNullException(nameof(playerHouse), "Property is not nullable for class ClanMember.");

            if (role.IsSet && role.Value == null)
                throw new ArgumentNullException(nameof(role), "Property is not nullable for class ClanMember.");

            if (townHallLevel.IsSet && townHallLevel.Value == null)
                throw new ArgumentNullException(nameof(townHallLevel), "Property is not nullable for class ClanMember.");

            return new ClanMember(builderBaseTrophies.Value!.Value!, clanRank.Value!.Value!, donations.Value!.Value!, donationsReceived.Value!.Value!, expLevel.Value!.Value!, league.Value!, name.Value!, previousClanRank.Value!.Value!, tag.Value!, trophies.Value!.Value!, builderBaseLeague, playerHouse, role, townHallLevel);
        }

        /// <summary>
        /// Serializes a <see cref="ClanMember" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clanMember"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClanMember clanMember, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, clanMember, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ClanMember" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clanMember"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ClanMember clanMember, JsonSerializerOptions jsonSerializerOptions)
        {
            if (clanMember.League == null)
                throw new ArgumentNullException(nameof(clanMember.League), "Property is required for class ClanMember.");

            if (clanMember.Name == null)
                throw new ArgumentNullException(nameof(clanMember.Name), "Property is required for class ClanMember.");

            if (clanMember.Tag == null)
                throw new ArgumentNullException(nameof(clanMember.Tag), "Property is required for class ClanMember.");

            if (clanMember.BuilderBaseLeagueOption.IsSet && clanMember.BuilderBaseLeague == null)
                throw new ArgumentNullException(nameof(clanMember.BuilderBaseLeague), "Property is required for class ClanMember.");

            if (clanMember.PlayerHouseOption.IsSet && clanMember.PlayerHouse == null)
                throw new ArgumentNullException(nameof(clanMember.PlayerHouse), "Property is required for class ClanMember.");

            writer.WriteNumber("builderBaseTrophies", clanMember.BuilderBaseTrophies);

            writer.WriteNumber("clanRank", clanMember.ClanRank);

            writer.WriteNumber("donations", clanMember.Donations);

            writer.WriteNumber("donationsReceived", clanMember.DonationsReceived);

            writer.WriteNumber("expLevel", clanMember.ExpLevel);

            writer.WritePropertyName("league");
            JsonSerializer.Serialize(writer, clanMember.League, jsonSerializerOptions);
            writer.WriteString("name", clanMember.Name);

            writer.WriteNumber("previousClanRank", clanMember.PreviousClanRank);

            writer.WriteString("tag", clanMember.Tag);

            writer.WriteNumber("trophies", clanMember.Trophies);

            if (clanMember.BuilderBaseLeagueOption.IsSet)
            {
                writer.WritePropertyName("builderBaseLeague");
                JsonSerializer.Serialize(writer, clanMember.BuilderBaseLeague, jsonSerializerOptions);
            }
            if (clanMember.PlayerHouseOption.IsSet)
            {
                writer.WritePropertyName("playerHouse");
                JsonSerializer.Serialize(writer, clanMember.PlayerHouse, jsonSerializerOptions);
            }
            if (clanMember.RoleOption.IsSet)
            {
                var roleRawValue = RoleValueConverter.ToJsonValue(clanMember.Role!.Value);
                writer.WriteString("role", roleRawValue);
            }
            if (clanMember.TownHallLevelOption.IsSet)
                writer.WriteNumber("townHallLevel", clanMember.TownHallLevelOption.Value!.Value);
        }
    }
}
