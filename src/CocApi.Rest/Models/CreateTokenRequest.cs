// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// CreateTokenRequest
    /// </summary>
    public partial class CreateTokenRequest
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateTokenRequest" /> class.
        /// </summary>
        /// <param name="cidrRanges">cidrRanges</param>
        /// <param name="description">description</param>
        /// <param name="name">name</param>
        [JsonConstructor]
        public CreateTokenRequest(List<string> cidrRanges, string description, string name)
        {
            CidrRanges = cidrRanges;
            Description = description;
            Name = name;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CidrRanges
        /// </summary>
        [JsonPropertyName("cidrRanges")]
        public List<string> CidrRanges { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CreateTokenRequest {\n");
            sb.Append("  CidrRanges: ").Append(CidrRanges).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="CreateTokenRequest" />
    /// </summary>
    public class CreateTokenRequestJsonConverter : JsonConverter<CreateTokenRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="CreateTokenRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override CreateTokenRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            List<string>? cidrRanges = default;
            string? description = default;
            string? name = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cidrRanges":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cidrRanges = JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "description":
                            description = utf8JsonReader.GetString();
                            break;
                        case "name":
                            name = utf8JsonReader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            if (cidrRanges == null)
                throw new ArgumentNullException(nameof(cidrRanges), "Property is required for class CreateTokenRequest.");

            if (description == null)
                throw new ArgumentNullException(nameof(description), "Property is required for class CreateTokenRequest.");

            if (name == null)
                throw new ArgumentNullException(nameof(name), "Property is required for class CreateTokenRequest.");

            return new CreateTokenRequest(cidrRanges, description, name);
        }

        /// <summary>
        /// Serializes a <see cref="CreateTokenRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTokenRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, CreateTokenRequest createTokenRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, createTokenRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="CreateTokenRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="createTokenRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, CreateTokenRequest createTokenRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WritePropertyName("cidrRanges");
            JsonSerializer.Serialize(writer, createTokenRequest.CidrRanges, jsonSerializerOptions);
            writer.WriteString("description", createTokenRequest.Description);
            writer.WriteString("name", createTokenRequest.Name);
        }
    }
}
