// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using CocApi.Rest.Client;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// Key
    /// </summary>
    public partial class Key
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Key" /> class.
        /// </summary>
        /// <param name="cidrRanges">cidrRanges</param>
        /// <param name="description">description</param>
        /// <param name="developerId">developerId</param>
        /// <param name="id">id</param>
        /// <param name="varKey">varKey</param>
        /// <param name="name">name</param>
        /// <param name="scopes">scopes</param>
        /// <param name="tier">tier</param>
        /// <param name="origins">origins</param>
        /// <param name="validUntil">validUntil</param>
        [JsonConstructor]
        public Key(List<string> cidrRanges, string description, string developerId, string id, string varKey, string name, List<string> scopes, string tier, Option<string?> origins = default, Option<DateTime?> validUntil = default)
        {
            CidrRanges = cidrRanges;
            Description = description;
            DeveloperId = developerId;
            Id = id;
            VarKey = varKey;
            Name = name;
            Scopes = scopes;
            Tier = tier;
            OriginsOption = origins;
            ValidUntilOption = validUntil;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Gets or Sets CidrRanges
        /// </summary>
        [JsonPropertyName("cidrRanges")]
        public List<string> CidrRanges { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [JsonPropertyName("description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets DeveloperId
        /// </summary>
        [JsonPropertyName("developerId")]
        public string DeveloperId { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets VarKey
        /// </summary>
        [JsonPropertyName("key")]
        public string VarKey { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Scopes
        /// </summary>
        [JsonPropertyName("scopes")]
        public List<string> Scopes { get; set; }

        /// <summary>
        /// Gets or Sets Tier
        /// </summary>
        [JsonPropertyName("tier")]
        public string Tier { get; set; }

        /// <summary>
        /// Used to track the state of Origins
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OriginsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Origins
        /// </summary>
        [JsonPropertyName("origins")]
        public string? Origins { get { return this. OriginsOption; } set { this.OriginsOption = new(value); } }

        /// <summary>
        /// Used to track the state of ValidUntil
        /// </summary>
        [JsonIgnore]
        [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]
        public Option<DateTime?> ValidUntilOption { get; private set; }

        /// <summary>
        /// Gets or Sets ValidUntil
        /// </summary>
        [JsonPropertyName("validUntil")]
        public DateTime? ValidUntil { get { return this. ValidUntilOption; } set { this.ValidUntilOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Key {\n");
            sb.Append("  CidrRanges: ").Append(CidrRanges).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DeveloperId: ").Append(DeveloperId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VarKey: ").Append(VarKey).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Scopes: ").Append(Scopes).Append("\n");
            sb.Append("  Tier: ").Append(Tier).Append("\n");
            sb.Append("  Origins: ").Append(Origins).Append("\n");
            sb.Append("  ValidUntil: ").Append(ValidUntil).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="Key" />
    /// </summary>
    public class KeyJsonConverter : JsonConverter<Key>
    {
        /// <summary>
        /// The format to use to serialize ValidUntil
        /// </summary>
        public static string ValidUntilFormat { get; set; } = "yyyyMMdd'T'HHmmss.fff'Z'";

        /// <summary>
        /// Deserializes json to <see cref="Key" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override Key Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<List<string>?> cidrRanges = default;
            Option<string?> description = default;
            Option<string?> developerId = default;
            Option<string?> id = default;
            Option<string?> varKey = default;
            Option<string?> name = default;
            Option<List<string>?> scopes = default;
            Option<string?> tier = default;
            Option<string?> origins = default;
            Option<DateTime?> validUntil = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "cidrRanges":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                cidrRanges = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "description":
                            description = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "developerId":
                            developerId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "id":
                            id = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "key":
                            varKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "scopes":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                scopes = new Option<List<string>?>(JsonSerializer.Deserialize<List<string>>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "tier":
                            tier = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "origins":
                            origins = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "validUntil":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                validUntil = new Option<DateTime?>(JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!cidrRanges.IsSet)
                throw new ArgumentException("Property is required for class Key.", nameof(cidrRanges));

            if (!description.IsSet)
                throw new ArgumentException("Property is required for class Key.", nameof(description));

            if (!developerId.IsSet)
                throw new ArgumentException("Property is required for class Key.", nameof(developerId));

            if (!id.IsSet)
                throw new ArgumentException("Property is required for class Key.", nameof(id));

            if (!varKey.IsSet)
                throw new ArgumentException("Property is required for class Key.", nameof(varKey));

            if (!name.IsSet)
                throw new ArgumentException("Property is required for class Key.", nameof(name));

            if (!scopes.IsSet)
                throw new ArgumentException("Property is required for class Key.", nameof(scopes));

            if (!tier.IsSet)
                throw new ArgumentException("Property is required for class Key.", nameof(tier));

            if (cidrRanges.IsSet && cidrRanges.Value == null)
                throw new ArgumentNullException(nameof(cidrRanges), "Property is not nullable for class Key.");

            if (description.IsSet && description.Value == null)
                throw new ArgumentNullException(nameof(description), "Property is not nullable for class Key.");

            if (developerId.IsSet && developerId.Value == null)
                throw new ArgumentNullException(nameof(developerId), "Property is not nullable for class Key.");

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class Key.");

            if (varKey.IsSet && varKey.Value == null)
                throw new ArgumentNullException(nameof(varKey), "Property is not nullable for class Key.");

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class Key.");

            if (scopes.IsSet && scopes.Value == null)
                throw new ArgumentNullException(nameof(scopes), "Property is not nullable for class Key.");

            if (tier.IsSet && tier.Value == null)
                throw new ArgumentNullException(nameof(tier), "Property is not nullable for class Key.");

            if (validUntil.IsSet && validUntil.Value == null)
                throw new ArgumentNullException(nameof(validUntil), "Property is not nullable for class Key.");

            return new Key(cidrRanges.Value!, description.Value!, developerId.Value!, id.Value!, varKey.Value!, name.Value!, scopes.Value!, tier.Value!, origins, validUntil);
        }

        /// <summary>
        /// Serializes a <see cref="Key" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="key"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, Key key, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(ref writer, key, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="Key" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="key"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(ref Utf8JsonWriter writer, Key key, JsonSerializerOptions jsonSerializerOptions)
        {
            if (key.CidrRanges == null)
                throw new ArgumentNullException(nameof(key.CidrRanges), "Property is required for class Key.");

            if (key.Description == null)
                throw new ArgumentNullException(nameof(key.Description), "Property is required for class Key.");

            if (key.DeveloperId == null)
                throw new ArgumentNullException(nameof(key.DeveloperId), "Property is required for class Key.");

            if (key.Id == null)
                throw new ArgumentNullException(nameof(key.Id), "Property is required for class Key.");

            if (key.VarKey == null)
                throw new ArgumentNullException(nameof(key.VarKey), "Property is required for class Key.");

            if (key.Name == null)
                throw new ArgumentNullException(nameof(key.Name), "Property is required for class Key.");

            if (key.Scopes == null)
                throw new ArgumentNullException(nameof(key.Scopes), "Property is required for class Key.");

            if (key.Tier == null)
                throw new ArgumentNullException(nameof(key.Tier), "Property is required for class Key.");

            writer.WritePropertyName("cidrRanges");
            JsonSerializer.Serialize(writer, key.CidrRanges, jsonSerializerOptions);
            writer.WriteString("description", key.Description);

            writer.WriteString("developerId", key.DeveloperId);

            writer.WriteString("id", key.Id);

            writer.WriteString("key", key.VarKey);

            writer.WriteString("name", key.Name);

            writer.WritePropertyName("scopes");
            JsonSerializer.Serialize(writer, key.Scopes, jsonSerializerOptions);
            writer.WriteString("tier", key.Tier);

            if (key.OriginsOption.IsSet)
                if (key.OriginsOption.Value != null)
                    writer.WriteString("origins", key.Origins);
                else
                    writer.WriteNull("origins");

            if (key.ValidUntilOption.IsSet)
                writer.WriteString("validUntil", key.ValidUntilOption.Value!.Value.ToString(ValidUntilFormat));
        }
    }
}
