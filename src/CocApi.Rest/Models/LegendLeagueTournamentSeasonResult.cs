// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// LegendLeagueTournamentSeasonResult
    /// </summary>
    public partial class LegendLeagueTournamentSeasonResult : IEquatable<LegendLeagueTournamentSeasonResult?>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LegendLeagueTournamentSeasonResult" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="rank">rank</param>
        /// <param name="trophies">trophies</param>
        [JsonConstructor]
        internal LegendLeagueTournamentSeasonResult(DateTime id, int rank, int trophies)
        {
#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (trophies == null)
                throw new ArgumentNullException("trophies is a required property for LegendLeagueTournamentSeasonResult and cannot be null.");

            if (id == null)
                throw new ArgumentNullException("id is a required property for LegendLeagueTournamentSeasonResult and cannot be null.");

            if (rank == null)
                throw new ArgumentNullException("rank is a required property for LegendLeagueTournamentSeasonResult and cannot be null.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            Id = id;
            Rank = rank;
            Trophies = trophies;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public DateTime Id { get; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        [JsonPropertyName("rank")]
        public int Rank { get; }

        /// <summary>
        /// Gets or Sets Trophies
        /// </summary>
        [JsonPropertyName("trophies")]
        public int Trophies { get; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LegendLeagueTournamentSeasonResult {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Trophies: ").Append(Trophies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as LegendLeagueTournamentSeasonResult);
        }

        /// <summary>
        /// Returns true if LegendLeagueTournamentSeasonResult instances are equal
        /// </summary>
        /// <param name="input">Instance of LegendLeagueTournamentSeasonResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LegendLeagueTournamentSeasonResult? input)
        {
            if (input == null)
                return false;

            return 
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) && 
                (
                    Rank == input.Rank ||
                    (Rank != null &&
                    Rank.Equals(input.Rank))
                ) && 
                (
                    Trophies == input.Trophies ||
                    (Trophies != null &&
                    Trophies.Equals(input.Trophies))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + Id.GetHashCode();
                hashCode = (hashCode * 59) + Rank.GetHashCode();
                hashCode = (hashCode * 59) + Trophies.GetHashCode();

                return hashCode;
            }
        }
    }

    /// <summary>
    /// A Json converter for type LegendLeagueTournamentSeasonResult
    /// </summary>
    public class LegendLeagueTournamentSeasonResultJsonConverter : JsonConverter<LegendLeagueTournamentSeasonResult>
    {
        /// <summary>
        /// The format to use to serialize Id
        /// </summary>
        public static string IdFormat { get; set; } = "yyyy'-'MM";

        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override LegendLeagueTournamentSeasonResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            DateTime id = default;
            int rank = default;
            int trophies = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = JsonSerializer.Deserialize<DateTime>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        case "rank":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                rank = utf8JsonReader.GetInt32();
                            break;
                        case "trophies":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                trophies = utf8JsonReader.GetInt32();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new LegendLeagueTournamentSeasonResult(id, rank, trophies);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="legendLeagueTournamentSeasonResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, LegendLeagueTournamentSeasonResult legendLeagueTournamentSeasonResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteString("id", legendLeagueTournamentSeasonResult.Id.ToString(IdFormat));
            writer.WriteNumber("rank", legendLeagueTournamentSeasonResult.Rank);
            writer.WriteNumber("trophies", legendLeagueTournamentSeasonResult.Trophies);

            writer.WriteEndObject();
        }
    }
}
