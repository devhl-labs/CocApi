// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// IconUrls
    /// </summary>
    public partial class IconUrls : IEquatable<IconUrls?>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IconUrls" /> class.
        /// </summary>
        /// <param name="medium">medium</param>
        /// <param name="small">small</param>
        /// <param name="tiny">tiny</param>
        [JsonConstructor]
        internal IconUrls(string? medium = default, string? small = default, string? tiny = default)
        {
            Medium = medium;
            Small = small;
            Tiny = tiny;
        }

        /// <summary>
        /// Gets or Sets Medium
        /// </summary>
        [JsonPropertyName("medium")]
        public string? Medium { get; }

        /// <summary>
        /// Gets or Sets Small
        /// </summary>
        [JsonPropertyName("small")]
        public string? Small { get; }

        /// <summary>
        /// Gets or Sets Tiny
        /// </summary>
        [JsonPropertyName("tiny")]
        public string? Tiny { get; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IconUrls {\n");
            sb.Append("  Medium: ").Append(Medium).Append("\n");
            sb.Append("  Small: ").Append(Small).Append("\n");
            sb.Append("  Tiny: ").Append(Tiny).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as IconUrls);
        }

        /// <summary>
        /// Returns true if IconUrls instances are equal
        /// </summary>
        /// <param name="input">Instance of IconUrls to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IconUrls? input)
        {
            if (input == null)
                return false;

            return 
                (
                    Medium == input.Medium ||
                    (Medium != null &&
                    Medium.Equals(input.Medium))
                ) && 
                (
                    Small == input.Small ||
                    (Small != null &&
                    Small.Equals(input.Small))
                ) && 
                (
                    Tiny == input.Tiny ||
                    (Tiny != null &&
                    Tiny.Equals(input.Tiny))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;

                if (Medium != null)
                    hashCode = (hashCode * 59) + Medium.GetHashCode();

                if (Small != null)
                    hashCode = (hashCode * 59) + Small.GetHashCode();

                if (Tiny != null)
                    hashCode = (hashCode * 59) + Tiny.GetHashCode();

                return hashCode;
            }
        }
    }

    /// <summary>
    /// A Json converter for type IconUrls
    /// </summary>
    public class IconUrlsJsonConverter : JsonConverter<IconUrls>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="options"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IconUrls Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
        {
            int currentDepth = reader.CurrentDepth;

            if (reader.TokenType != JsonTokenType.StartObject && reader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = reader.TokenType;

            string medium = default;
            string small = default;
            string tiny = default;

            while (reader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && reader.TokenType == JsonTokenType.EndObject && currentDepth == reader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && reader.TokenType == JsonTokenType.EndArray && currentDepth == reader.CurrentDepth)
                    break;

                if (reader.TokenType == JsonTokenType.PropertyName && currentDepth == reader.CurrentDepth - 1)
                {
                    string? propertyName = reader.GetString();
                    reader.Read();

                    switch (propertyName)
                    {
                        case "medium":
                            medium = reader.GetString();
                            break;
                        case "small":
                            small = reader.GetString();
                            break;
                        case "tiny":
                            tiny = reader.GetString();
                            break;
                        default:
                            break;
                    }
                }
            }

            return new IconUrls(medium, small, tiny);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="iconUrls"></param>
        /// <param name="options"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IconUrls iconUrls, JsonSerializerOptions options)
        {
            writer.WriteStartObject();

            writer.WriteString("medium", iconUrls.Medium);
            writer.WriteString("small", iconUrls.Small);
            writer.WriteString("tiny", iconUrls.Tiny);

            writer.WriteEndObject();
        }
    }
}
