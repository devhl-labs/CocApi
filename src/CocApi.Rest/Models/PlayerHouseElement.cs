// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// PlayerHouseElement
    /// </summary>
    public partial class PlayerHouseElement : IEquatable<PlayerHouseElement?>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerHouseElement" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="type">type</param>
        [JsonConstructor]
        internal PlayerHouseElement(int id, TypeEnum type)
        {
            Id = id;
            Type = type;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Defines Type
        /// </summary>
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Unknown for value: unknown
            /// </summary>
            Unknown,

            /// <summary>
            /// Enum Ground for value: ground
            /// </summary>
            Ground,

            /// <summary>
            /// Enum Roof for value: roof
            /// </summary>
            Roof,

            /// <summary>
            /// Enum Foot for value: foot
            /// </summary>
            Foot,

            /// <summary>
            /// Enum Decoration for value: decoration
            /// </summary>
            Decoration,

            /// <summary>
            /// Enum Walls for value: walls
            /// </summary>
            Walls

        }

        /// <summary>
        /// Returns a TypeEnum
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static TypeEnum TypeEnumFromString(string value)
        {
            if (value == "unknown")
                return TypeEnum.Unknown;

            if (value == "ground")
                return TypeEnum.Ground;

            if (value == "roof")
                return TypeEnum.Roof;

            if (value == "foot")
                return TypeEnum.Foot;

            if (value == "decoration")
                return TypeEnum.Decoration;

            if (value == "walls")
                return TypeEnum.Walls;

            throw new NotImplementedException($"Could not convert value to type TypeEnum: '{value}'");
        }

        /// <summary>
        /// Returns equivalent json value
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        /// <exception cref="NotImplementedException"></exception>
        public static string TypeEnumToJsonValue(TypeEnum value)
        {
            if (value == TypeEnum.Unknown)
                return "unknown";

            if (value == TypeEnum.Ground)
                return "ground";

            if (value == TypeEnum.Roof)
                return "roof";

            if (value == TypeEnum.Foot)
                return "foot";

            if (value == TypeEnum.Decoration)
                return "decoration";

            if (value == TypeEnum.Walls)
                return "walls";

            throw new NotImplementedException($"Value could not be handled: '{value}'");
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonPropertyName("type")]
        public TypeEnum Type { get; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int Id { get; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PlayerHouseElement {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as PlayerHouseElement);
        }

        /// <summary>
        /// Returns true if PlayerHouseElement instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayerHouseElement to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerHouseElement? input)
        {
            if (input == null)
                return false;

            return 
                (
                    Id == input.Id ||
                    (Id != null &&
                    Id.Equals(input.Id))
                ) && 
                (
                    Type == input.Type ||
                    (Type != null &&
                    Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + Id.GetHashCode();
                hashCode = (hashCode * 59) + Type.GetHashCode();

                return hashCode;
            }
        }
    }

    /// <summary>
    /// A Json converter for type PlayerHouseElement
    /// </summary>
    public class PlayerHouseElementJsonConverter : JsonConverter<PlayerHouseElement>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override PlayerHouseElement Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            int id = default;
            PlayerHouseElement.TypeEnum type = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "id":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                id = utf8JsonReader.GetInt32();
                            break;
                        case "type":
                            string typeRawValue = utf8JsonReader.GetString();
                            type = PlayerHouseElement.TypeEnumFromString(typeRawValue);
                            break;
                        default:
                            break;
                    }
                }
            }

#pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (id == null)
                throw new ArgumentNullException(nameof(id), "Property is required for class PlayerHouseElement.");

            if (type == null)
                throw new ArgumentNullException(nameof(type), "Property is required for class PlayerHouseElement.");

#pragma warning restore CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
#pragma warning restore CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return new PlayerHouseElement(id, type);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="playerHouseElement"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, PlayerHouseElement playerHouseElement, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            writer.WriteNumber("id", playerHouseElement.Id);
            var typeRawValue = PlayerHouseElement.TypeEnumToJsonValue(playerHouseElement.Type);
            if (typeRawValue != null)
                writer.WriteString("type", typeRawValue);
            else
                writer.WriteNull("type");

            writer.WriteEndObject();
        }
    }
}
