// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace CocApi.Rest.Models
{
    /// <summary>
    /// ClanCapital
    /// </summary>
    public partial class ClanCapital : IEquatable<ClanCapital?>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClanCapital" /> class.
        /// </summary>
        /// <param name="capitalHallLevel">capitalHallLevel</param>
        /// <param name="districts">districts</param>
        [JsonConstructor]
        internal ClanCapital(int? capitalHallLevel = default, List<ClanDistrictData>? districts = default)
        {
            CapitalHallLevel = capitalHallLevel;
            Districts = districts;
        }

        /// <summary>
        /// Gets or Sets CapitalHallLevel
        /// </summary>
        [JsonPropertyName("capitalHallLevel")]
        public int? CapitalHallLevel { get; }

        /// <summary>
        /// Gets or Sets Districts
        /// </summary>
        [JsonPropertyName("districts")]
        public List<ClanDistrictData>? Districts { get; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClanCapital {\n");
            sb.Append("  CapitalHallLevel: ").Append(CapitalHallLevel).Append("\n");
            sb.Append("  Districts: ").Append(Districts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return this.Equals(input as ClanCapital);
        }

        /// <summary>
        /// Returns true if ClanCapital instances are equal
        /// </summary>
        /// <param name="input">Instance of ClanCapital to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClanCapital? input)
        {
            if (input == null)
                return false;

            return 
                (
                    CapitalHallLevel == input.CapitalHallLevel ||
                    (CapitalHallLevel != null &&
                    CapitalHallLevel.Equals(input.CapitalHallLevel))
                ) && 
                (
                    Districts == input.Districts ||
                    Districts != null &&
                    input.Districts != null &&
                    Districts.SequenceEqual(input.Districts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;

                if (CapitalHallLevel != null)
                    hashCode = (hashCode * 59) + CapitalHallLevel.GetHashCode();

                if (Districts != null)
                    hashCode = (hashCode * 59) + Districts.GetHashCode();

                return hashCode;
            }
        }
    }

    /// <summary>
    /// A Json converter for type ClanCapital
    /// </summary>
    public class ClanCapitalJsonConverter : JsonConverter<ClanCapital>
    {
        /// <summary>
        /// A Json reader.
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClanCapital Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            int? capitalHallLevel = default;
            List<ClanDistrictData> districts = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? propertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (propertyName)
                    {
                        case "capitalHallLevel":
                            if (utf8JsonReader.TokenType != JsonTokenType.Null)
                                capitalHallLevel = utf8JsonReader.GetInt32();
                            break;
                        case "districts":
                            districts = JsonSerializer.Deserialize<List<ClanDistrictData>>(ref utf8JsonReader, jsonSerializerOptions);
                            break;
                        default:
                            break;
                    }
                }
            }

            return new ClanCapital(capitalHallLevel, districts);
        }

        /// <summary>
        /// A Json writer
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="clanCapital"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClanCapital clanCapital, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            if (clanCapital.CapitalHallLevel != null)
                writer.WriteNumber("capitalHallLevel", clanCapital.CapitalHallLevel.Value);
            else
                writer.WriteNull("capitalHallLevel");
            writer.WritePropertyName("districts");
            JsonSerializer.Serialize(writer, clanCapital.Districts, jsonSerializerOptions);

            writer.WriteEndObject();
        }
    }
}
