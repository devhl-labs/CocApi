// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CocApi.Rest.Client;
using CocApi.Rest.Models;

namespace CocApi.Rest.IBaseApis
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IDeveloperApi : IApi
    {
        /// <summary>
        /// Create an api token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTokenRequest">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;KeyInstance?&gt;&gt;</returns>
        Task<ApiResponse<KeyInstance?>> CreateResponseAsync(CreateTokenRequest createTokenRequest, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Create an api token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTokenRequest">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;KeyInstance&gt;</returns>
        Task<KeyInstance> CreateAsync(CreateTokenRequest createTokenRequest, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Create an api token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="createTokenRequest">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;KeyInstance?&gt;</returns>
        Task<KeyInstance?> CreateOrDefaultAsync(CreateTokenRequest createTokenRequest, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// List all tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;KeyList?&gt;&gt;</returns>
        Task<ApiResponse<KeyList?>> KeysResponseAsync(System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// List all tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;KeyList&gt;</returns>
        Task<KeyList> KeysAsync(System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// List all tokens.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;KeyList?&gt;</returns>
        Task<KeyList?> KeysOrDefaultAsync(System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Login to the developer portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCredentials">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;LoginResponse?&gt;&gt;</returns>
        Task<ApiResponse<LoginResponse?>> LoginResponseAsync(LoginCredentials loginCredentials, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Login to the developer portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCredentials">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;LoginResponse&gt;</returns>
        Task<LoginResponse> LoginAsync(LoginCredentials loginCredentials, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Login to the developer portal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="loginCredentials">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;LoginResponse?&gt;</returns>
        Task<LoginResponse?> LoginOrDefaultAsync(LoginCredentials loginCredentials, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Revoke an api token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;KeyInstance?&gt;&gt;</returns>
        Task<ApiResponse<KeyInstance?>> RevokeResponseAsync(Key key, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Revoke an api token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;KeyInstance&gt;</returns>
        Task<KeyInstance> RevokeAsync(Key key, System.Threading.CancellationToken? cancellationToken = null);

        /// <summary>
        /// Revoke an api token.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="key">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse&lt;KeyInstance?&gt;</returns>
        Task<KeyInstance?> RevokeOrDefaultAsync(Key key, System.Threading.CancellationToken? cancellationToken = null);
    }
}

namespace CocApi.Rest.BaseApis
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DeveloperApi : IBaseApis.IDeveloperApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<DeveloperApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="DeveloperApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DeveloperApi(ILogger<DeveloperApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, 
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            Logger = logger;
            HttpClient = httpClient;
            ApiKeyProvider = apiKeyProvider;
        }

        /// <summary>
        /// Logs the api response
        /// </summary>
        /// <param name="args"></param>
        protected virtual void OnApiResponded(ApiResponseEventArgs args)
        {
            Logger.LogInformation("{0,-9} | {1} | {3}", (args.ReceivedAt - args.RequestedAt).TotalSeconds, args.HttpStatus, args.Path);
        }

        /// <summary>
        /// Create an api token. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTokenRequest">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="KeyInstance"/>&gt;</returns>
        public async Task<KeyInstance> CreateAsync(CreateTokenRequest createTokenRequest, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<KeyInstance?> result = await CreateResponseAsync(createTokenRequest, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Create an api token. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTokenRequest">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="KeyInstance"/>&gt;</returns>
        public async Task<KeyInstance?> CreateOrDefaultAsync(CreateTokenRequest createTokenRequest, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<KeyInstance?>? result = null;
            try 
            {
                result = await CreateResponseAsync(createTokenRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="createTokenRequest"></param>
        /// <returns></returns>
        protected virtual CreateTokenRequest OnCreate(CreateTokenRequest createTokenRequest)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (createTokenRequest == null)
                throw new ArgumentNullException(nameof(createTokenRequest));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return createTokenRequest;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="createTokenRequest"></param>
        protected virtual void AfterCreate(ApiResponse<KeyInstance?> apiResponse, CreateTokenRequest createTokenRequest)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="createTokenRequest"></param>
        protected virtual void OnErrorCreate(Exception exception, string pathFormat, string path, CreateTokenRequest createTokenRequest)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Create an api token. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="createTokenRequest">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="KeyInstance"/></returns>
        public async Task<ApiResponse<KeyInstance?>> CreateResponseAsync(CreateTokenRequest createTokenRequest, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                createTokenRequest = OnCreate(createTokenRequest);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    var url = request.RequestUri = new Uri("https://developer.clashofclans.com/api/apikey/create");
                    uriBuilder.Host = url.Authority;
                    uriBuilder.Scheme = url.Scheme;
                    uriBuilder.Path = url.AbsolutePath;

                    request.Content = (createTokenRequest as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(createTokenRequest, _jsonSerializerOptions));

                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = HttpMethod.Post;

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/apikey/create", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        ApiResponse<KeyInstance?> apiResponse = new ApiResponse<KeyInstance?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<KeyInstance>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterCreate(apiResponse, createTokenRequest);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorCreate(e, "/apikey/create", uriBuilder.Path, createTokenRequest);
                throw;
            }
        }

        /// <summary>
        /// List all tokens. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="KeyList"/>&gt;</returns>
        public async Task<KeyList> KeysAsync(System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<KeyList?> result = await KeysResponseAsync(cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// List all tokens. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="KeyList"/>&gt;</returns>
        public async Task<KeyList?> KeysOrDefaultAsync(System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<KeyList?>? result = null;
            try 
            {
                result = await KeysResponseAsync(cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <returns></returns>
        protected virtual void OnKeys()
        {
            return;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        protected virtual void AfterKeys(ApiResponse<KeyList?> apiResponse)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        protected virtual void OnErrorKeys(Exception exception, string pathFormat, string path)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// List all tokens. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="KeyList"/></returns>
        public async Task<ApiResponse<KeyList?>> KeysResponseAsync(System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                OnKeys();

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    var url = request.RequestUri = new Uri("https://developer.clashofclans.com/api/apikey/list");
                    uriBuilder.Host = url.Authority;
                    uriBuilder.Scheme = url.Scheme;
                    uriBuilder.Path = url.AbsolutePath;

                    request.RequestUri = uriBuilder.Uri;

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = HttpMethod.Post;

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/apikey/list", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        ApiResponse<KeyList?> apiResponse = new ApiResponse<KeyList?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<KeyList>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterKeys(apiResponse);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorKeys(e, "/apikey/list", uriBuilder.Path);
                throw;
            }
        }

        /// <summary>
        /// Login to the developer portal. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCredentials">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="LoginResponse"/>&gt;</returns>
        public async Task<LoginResponse> LoginAsync(LoginCredentials loginCredentials, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<LoginResponse?> result = await LoginResponseAsync(loginCredentials, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Login to the developer portal. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCredentials">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="LoginResponse"/>&gt;</returns>
        public async Task<LoginResponse?> LoginOrDefaultAsync(LoginCredentials loginCredentials, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<LoginResponse?>? result = null;
            try 
            {
                result = await LoginResponseAsync(loginCredentials, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="loginCredentials"></param>
        /// <returns></returns>
        protected virtual LoginCredentials OnLogin(LoginCredentials loginCredentials)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (loginCredentials == null)
                throw new ArgumentNullException(nameof(loginCredentials));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return loginCredentials;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="loginCredentials"></param>
        protected virtual void AfterLogin(ApiResponse<LoginResponse?> apiResponse, LoginCredentials loginCredentials)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="loginCredentials"></param>
        protected virtual void OnErrorLogin(Exception exception, string pathFormat, string path, LoginCredentials loginCredentials)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Login to the developer portal. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="loginCredentials">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="LoginResponse"/></returns>
        public async Task<ApiResponse<LoginResponse?>> LoginResponseAsync(LoginCredentials loginCredentials, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                loginCredentials = OnLogin(loginCredentials);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    var url = request.RequestUri = new Uri("https://developer.clashofclans.com/api/login");
                    uriBuilder.Host = url.Authority;
                    uriBuilder.Scheme = url.Scheme;
                    uriBuilder.Path = url.AbsolutePath;

                    request.Content = (loginCredentials as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(loginCredentials, _jsonSerializerOptions));



                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = HttpMethod.Post;

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/api/login", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        ApiResponse<LoginResponse?> apiResponse = new ApiResponse<LoginResponse?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<LoginResponse>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterLogin(apiResponse, loginCredentials);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorLogin(e, "/api/login", uriBuilder.Path, loginCredentials);
                throw;
            }
        }

        /// <summary>
        /// Revoke an api token. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="KeyInstance"/>&gt;</returns>
        public async Task<KeyInstance> RevokeAsync(Key key, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<KeyInstance?> result = await RevokeResponseAsync(key, cancellationToken).ConfigureAwait(false);

            if (result.Content == null)
                throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);

            return result.Content;
        }

        /// <summary>
        /// Revoke an api token. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="KeyInstance"/>&gt;</returns>
        public async Task<KeyInstance?> RevokeOrDefaultAsync(Key key, System.Threading.CancellationToken? cancellationToken = null)
        {
            ApiResponse<KeyInstance?>? result = null;
            try 
            {
                result = await RevokeResponseAsync(key, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
            }

            return result != null && result.IsSuccessStatusCode
                ? result.Content
                : null;
        }

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="key"></param>
        /// <returns></returns>
        protected virtual Key OnRevoke(Key key)
        {
            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            if (key == null)
                throw new ArgumentNullException(nameof(key));

            #pragma warning disable CS0472 // The result of the expression is always the same since a value of this type is never equal to 'null'
            #pragma warning disable CS8073 // The result of the expression is always the same since a value of this type is never equal to 'null'

            return key;
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponse"></param>
        /// <param name="key"></param>
        protected virtual void AfterRevoke(ApiResponse<KeyInstance?> apiResponse, Key key)
        {
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="key"></param>
        protected virtual void OnErrorRevoke(Exception exception, string pathFormat, string path, Key key)
        {
            Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// Revoke an api token. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="key">Request body</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="KeyInstance"/></returns>
        public async Task<ApiResponse<KeyInstance?>> RevokeResponseAsync(Key key, System.Threading.CancellationToken? cancellationToken = null)
        {
            UriBuilder uriBuilder = new UriBuilder();

            try
            {
                key = OnRevoke(key);

                using (HttpRequestMessage request = new HttpRequestMessage())
                {
                    var url = request.RequestUri = new Uri("https://developer.clashofclans.com/api/apikey/revoke");
                    uriBuilder.Host = url.Authority;
                    uriBuilder.Scheme = url.Scheme;
                    uriBuilder.Path = url.AbsolutePath;

                    request.Content = (key as object) is System.IO.Stream stream
                        ? request.Content = new StreamContent(stream)
                        : request.Content = new StringContent(JsonSerializer.Serialize(key, _jsonSerializerOptions));

                    request.RequestUri = uriBuilder.Uri;

                    string[] contentTypes = new string[] {
                        "application/json" 
                    };

                    string? contentType = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentType != null)
                        request.Content.Headers.ContentType = new MediaTypeHeaderValue(contentType);

                    string[] accepts = new string[] { 
                        "application/json" 
                    };

                    string? accept = ClientUtils.SelectHeaderAccept(accepts);

                    if (accept != null)
                        request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(accept));

                    request.Method = HttpMethod.Post;

                    DateTime requestedAt = DateTime.UtcNow;

                    using (HttpResponseMessage responseMessage = await HttpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false))
                    {
                        OnApiResponded(new ApiResponseEventArgs(requestedAt, DateTime.UtcNow, responseMessage.StatusCode, "/apikey/revoke", uriBuilder.Path));

                        string responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                        ApiResponse<KeyInstance?> apiResponse = new ApiResponse<KeyInstance?>(responseMessage, responseContent);

                        if (apiResponse.IsSuccessStatusCode)
                        {
                            apiResponse.Content = JsonSerializer.Deserialize<KeyInstance>(apiResponse.RawContent, _jsonSerializerOptions);
                            AfterRevoke(apiResponse, key);
                        }

                        return apiResponse;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorRevoke(e, "/apikey/revoke", uriBuilder.Path, key);
                throw;
            }
        }
    }
}
