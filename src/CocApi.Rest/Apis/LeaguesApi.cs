// <auto-generated>
/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using CocApi.Rest.Client;
using CocApi.Rest.Apis;
using CocApi.Rest.Models;

namespace CocApi.Rest.Apis
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface ILeaguesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        LeaguesApiEvents Events { get; }

        /// <summary>
        /// Get Builder Base league information
        /// </summary>
        /// <remarks>
        /// Get Builder Base league information
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;BuilderBaseLeague&gt;&gt;</returns>
        Task<ApiResponse<BuilderBaseLeague>> FetchBuilderBaseLeagueAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get Builder Base league information
        /// </summary>
        /// <remarks>
        /// Get Builder Base league information
        /// </remarks>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;BuilderBaseLeague&gt;?&gt;</returns>
        Task<ApiResponse<BuilderBaseLeague>?> FetchBuilderBaseLeagueOrDefaultAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Builder Base leagues
        /// </summary>
        /// <remarks>
        /// List Builder Base leagues
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;BuilderBaseLeagueList&gt;&gt;</returns>
        Task<ApiResponse<BuilderBaseLeagueList>> FetchBuilderBaseLeaguesAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List Builder Base leagues
        /// </summary>
        /// <remarks>
        /// List Builder Base leagues
        /// </remarks>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;BuilderBaseLeagueList&gt;?&gt;</returns>
        Task<ApiResponse<BuilderBaseLeagueList>?> FetchBuilderBaseLeaguesOrDefaultAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get capital league information
        /// </summary>
        /// <remarks>
        /// Get capital league information
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CapitalLeague&gt;&gt;</returns>
        Task<ApiResponse<CapitalLeague>> FetchCapitalLeagueAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get capital league information
        /// </summary>
        /// <remarks>
        /// Get capital league information
        /// </remarks>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;CapitalLeague&gt;?&gt;</returns>
        Task<ApiResponse<CapitalLeague>?> FetchCapitalLeagueOrDefaultAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List capital leagues
        /// </summary>
        /// <remarks>
        /// List capital leagues
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;CapitalLeagueObject&gt;&gt;</returns>
        Task<ApiResponse<CapitalLeagueObject>> FetchCapitalLeaguesAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List capital leagues
        /// </summary>
        /// <remarks>
        /// List capital leagues
        /// </remarks>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;CapitalLeagueObject&gt;?&gt;</returns>
        Task<ApiResponse<CapitalLeagueObject>?> FetchCapitalLeaguesOrDefaultAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get league information
        /// </summary>
        /// <remarks>
        /// Get league information
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;League&gt;&gt;</returns>
        Task<ApiResponse<League>> FetchLeagueAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get league information
        /// </summary>
        /// <remarks>
        /// Get league information
        /// </remarks>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;League&gt;?&gt;</returns>
        Task<ApiResponse<League>?> FetchLeagueOrDefaultAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get league season rankings
        /// </summary>
        /// <remarks>
        /// Get league season rankings. Note that league season information is available only for Legend League. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="seasonId">Identifier of the season.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;PlayerRankingList&gt;&gt;</returns>
        Task<ApiResponse<PlayerRankingList>> FetchLeagueSeasonRankingsAsync(string leagueId, string seasonId, Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get league season rankings
        /// </summary>
        /// <remarks>
        /// Get league season rankings. Note that league season information is available only for Legend League. 
        /// </remarks>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="seasonId">Identifier of the season.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;PlayerRankingList&gt;?&gt;</returns>
        Task<ApiResponse<PlayerRankingList>?> FetchLeagueSeasonRankingsOrDefaultAsync(string leagueId, string seasonId, Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get league seasons
        /// </summary>
        /// <remarks>
        /// Get league seasons. Note that league season information is available only for Legend League. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;LeagueSeasonList&gt;&gt;</returns>
        Task<ApiResponse<LeagueSeasonList>> FetchLeagueSeasonsAsync(string leagueId, Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get league seasons
        /// </summary>
        /// <remarks>
        /// Get league seasons. Note that league season information is available only for Legend League. 
        /// </remarks>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;LeagueSeasonList&gt;?&gt;</returns>
        Task<ApiResponse<LeagueSeasonList>?> FetchLeagueSeasonsOrDefaultAsync(string leagueId, Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List leagues
        /// </summary>
        /// <remarks>
        /// List leagues
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;LeagueList&gt;&gt;</returns>
        Task<ApiResponse<LeagueList>> FetchLeaguesAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List leagues
        /// </summary>
        /// <remarks>
        /// List leagues
        /// </remarks>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;LeagueList&gt;?&gt;</returns>
        Task<ApiResponse<LeagueList>?> FetchLeaguesOrDefaultAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get war league information
        /// </summary>
        /// <remarks>
        /// Get war league information
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;WarLeague&gt;&gt;</returns>
        Task<ApiResponse<WarLeague>> FetchWarLeagueAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Get war league information
        /// </summary>
        /// <remarks>
        /// Get war league information
        /// </remarks>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;WarLeague&gt;?&gt;</returns>
        Task<ApiResponse<WarLeague>?> FetchWarLeagueOrDefaultAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List war leagues
        /// </summary>
        /// <remarks>
        /// List war leagues
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&lt;WarLeagueList&gt;&gt;</returns>
        Task<ApiResponse<WarLeagueList>> FetchWarLeaguesAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// List war leagues
        /// </summary>
        /// <remarks>
        /// List war leagues
        /// </remarks>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task&lt;ApiResponse&gt;WarLeagueList&gt;?&gt;</returns>
        Task<ApiResponse<WarLeagueList>?> FetchWarLeaguesOrDefaultAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public class LeaguesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<BuilderBaseLeague>>? OnFetchBuilderBaseLeague;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFetchBuilderBaseLeague;

        internal void ExecuteOnGetBuilderBaseLeague(ApiResponse<BuilderBaseLeague> apiResponse)
        {
            OnFetchBuilderBaseLeague?.Invoke(this, new ApiResponseEventArgs<BuilderBaseLeague>(apiResponse));
        }

        internal void ExecuteOnErrorGetBuilderBaseLeague(Exception exception)
        {
            OnErrorFetchBuilderBaseLeague?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<BuilderBaseLeagueList>>? OnFetchBuilderBaseLeagues;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFetchBuilderBaseLeagues;

        internal void ExecuteOnGetBuilderBaseLeagues(ApiResponse<BuilderBaseLeagueList> apiResponse)
        {
            OnFetchBuilderBaseLeagues?.Invoke(this, new ApiResponseEventArgs<BuilderBaseLeagueList>(apiResponse));
        }

        internal void ExecuteOnErrorGetBuilderBaseLeagues(Exception exception)
        {
            OnErrorFetchBuilderBaseLeagues?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<CapitalLeague>>? OnFetchCapitalLeague;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFetchCapitalLeague;

        internal void ExecuteOnGetCapitalLeague(ApiResponse<CapitalLeague> apiResponse)
        {
            OnFetchCapitalLeague?.Invoke(this, new ApiResponseEventArgs<CapitalLeague>(apiResponse));
        }

        internal void ExecuteOnErrorGetCapitalLeague(Exception exception)
        {
            OnErrorFetchCapitalLeague?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<CapitalLeagueObject>>? OnFetchCapitalLeagues;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFetchCapitalLeagues;

        internal void ExecuteOnGetCapitalLeagues(ApiResponse<CapitalLeagueObject> apiResponse)
        {
            OnFetchCapitalLeagues?.Invoke(this, new ApiResponseEventArgs<CapitalLeagueObject>(apiResponse));
        }

        internal void ExecuteOnErrorGetCapitalLeagues(Exception exception)
        {
            OnErrorFetchCapitalLeagues?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<League>>? OnFetchLeague;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFetchLeague;

        internal void ExecuteOnGetLeague(ApiResponse<League> apiResponse)
        {
            OnFetchLeague?.Invoke(this, new ApiResponseEventArgs<League>(apiResponse));
        }

        internal void ExecuteOnErrorGetLeague(Exception exception)
        {
            OnErrorFetchLeague?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<PlayerRankingList>>? OnFetchLeagueSeasonRankings;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFetchLeagueSeasonRankings;

        internal void ExecuteOnGetLeagueSeasonRankings(ApiResponse<PlayerRankingList> apiResponse)
        {
            OnFetchLeagueSeasonRankings?.Invoke(this, new ApiResponseEventArgs<PlayerRankingList>(apiResponse));
        }

        internal void ExecuteOnErrorGetLeagueSeasonRankings(Exception exception)
        {
            OnErrorFetchLeagueSeasonRankings?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<LeagueSeasonList>>? OnFetchLeagueSeasons;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFetchLeagueSeasons;

        internal void ExecuteOnGetLeagueSeasons(ApiResponse<LeagueSeasonList> apiResponse)
        {
            OnFetchLeagueSeasons?.Invoke(this, new ApiResponseEventArgs<LeagueSeasonList>(apiResponse));
        }

        internal void ExecuteOnErrorGetLeagueSeasons(Exception exception)
        {
            OnErrorFetchLeagueSeasons?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<LeagueList>>? OnFetchLeagues;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFetchLeagues;

        internal void ExecuteOnGetLeagues(ApiResponse<LeagueList> apiResponse)
        {
            OnFetchLeagues?.Invoke(this, new ApiResponseEventArgs<LeagueList>(apiResponse));
        }

        internal void ExecuteOnErrorGetLeagues(Exception exception)
        {
            OnErrorFetchLeagues?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<WarLeague>>? OnFetchWarLeague;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFetchWarLeague;

        internal void ExecuteOnGetWarLeague(ApiResponse<WarLeague> apiResponse)
        {
            OnFetchWarLeague?.Invoke(this, new ApiResponseEventArgs<WarLeague>(apiResponse));
        }

        internal void ExecuteOnErrorGetWarLeague(Exception exception)
        {
            OnErrorFetchWarLeague?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs<WarLeagueList>>? OnFetchWarLeagues;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorFetchWarLeagues;

        internal void ExecuteOnGetWarLeagues(ApiResponse<WarLeagueList> apiResponse)
        {
            OnFetchWarLeagues?.Invoke(this, new ApiResponseEventArgs<WarLeagueList>(apiResponse));
        }

        internal void ExecuteOnErrorGetWarLeagues(Exception exception)
        {
            OnErrorFetchWarLeagues?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class LeaguesApi : ILeaguesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<LeaguesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public LeaguesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="ApiKeyProvider"/>
        /// </summary>
        public TokenProvider<ApiKeyToken> ApiKeyProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaguesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LeaguesApi(ILogger<LeaguesApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, LeaguesApiEvents leaguesApiEvents,
            TokenProvider<ApiKeyToken> apiKeyProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            Logger = logger;
            HttpClient = httpClient;
            Events = leaguesApiEvents;
            ApiKeyProvider = apiKeyProvider;
        }

        partial void FormatGetBuilderBaseLeague(ref string leagueId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="leagueId"></param>
        /// <returns></returns>
        private void ValidateGetBuilderBaseLeague(string leagueId)
        {
            if (leagueId == null)
                throw new ArgumentNullException(nameof(leagueId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="leagueId"></param>
        private void AfterFetchBuilderBaseLeagueDefaultImplementation(ApiResponse<BuilderBaseLeague> apiResponseLocalVar, string leagueId)
        {
            bool suppressDefaultLog = false;
            AfterFetchBuilderBaseLeague(ref suppressDefaultLog, apiResponseLocalVar, leagueId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="leagueId"></param>
        partial void AfterFetchBuilderBaseLeague(ref bool suppressDefaultLog, ApiResponse<BuilderBaseLeague> apiResponseLocalVar, string leagueId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="leagueId"></param>
        private void OnErrorFetchBuilderBaseLeagueDefaultImplementation(Exception exception, string pathFormat, string path, string leagueId)
        {
            bool suppressDefaultLog = false;
            OnErrorFetchBuilderBaseLeague(ref suppressDefaultLog, exception, pathFormat, path, leagueId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="leagueId"></param>
        partial void OnErrorFetchBuilderBaseLeague(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string leagueId);

        /// <summary>
        /// Get Builder Base league information Get Builder Base league information
        /// </summary>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="BuilderBaseLeague"/></returns>
        public async Task<ApiResponse<BuilderBaseLeague>?> FetchBuilderBaseLeagueOrDefaultAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FetchBuilderBaseLeagueAsync(leagueId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get Builder Base league information Get Builder Base league information
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="BuilderBaseLeague"/></returns>
        public async Task<ApiResponse<BuilderBaseLeague>> FetchBuilderBaseLeagueAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetBuilderBaseLeague(leagueId);

                FormatGetBuilderBaseLeague(ref leagueId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/builderbaseleagues/{leagueId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BleagueId%7D", Uri.EscapeDataString(leagueId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    ApiKeyToken apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);

                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "authorization");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<BuilderBaseLeague> apiResponseLocalVar = new ApiResponse<BuilderBaseLeague>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/builderbaseleagues/{leagueId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFetchBuilderBaseLeagueDefaultImplementation(apiResponseLocalVar, leagueId);

                        Events.ExecuteOnGetBuilderBaseLeague(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFetchBuilderBaseLeagueDefaultImplementation(e, "/builderbaseleagues/{leagueId}", uriBuilderLocalVar.Path, leagueId);
                Events.ExecuteOnErrorGetBuilderBaseLeague(e);
                throw;
            }
        }

        partial void FormatGetBuilderBaseLeagues(ref Option<int> limit, ref Option<string> after, ref Option<string> before);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns></returns>
        private void ValidateGetBuilderBaseLeagues(Option<string> after, Option<string> before)
        {
            if (after.IsSet && after.Value == null)
                throw new ArgumentNullException(nameof(after));

            if (before.IsSet && before.Value == null)
                throw new ArgumentNullException(nameof(before));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        private void AfterFetchBuilderBaseLeaguesDefaultImplementation(ApiResponse<BuilderBaseLeagueList> apiResponseLocalVar, Option<int> limit, Option<string> after, Option<string> before)
        {
            bool suppressDefaultLog = false;
            AfterFetchBuilderBaseLeagues(ref suppressDefaultLog, apiResponseLocalVar, limit, after, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        partial void AfterFetchBuilderBaseLeagues(ref bool suppressDefaultLog, ApiResponse<BuilderBaseLeagueList> apiResponseLocalVar, Option<int> limit, Option<string> after, Option<string> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        private void OnErrorFetchBuilderBaseLeaguesDefaultImplementation(Exception exception, string pathFormat, string path, Option<int> limit, Option<string> after, Option<string> before)
        {
            bool suppressDefaultLog = false;
            OnErrorFetchBuilderBaseLeagues(ref suppressDefaultLog, exception, pathFormat, path, limit, after, before);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        partial void OnErrorFetchBuilderBaseLeagues(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<int> limit, Option<string> after, Option<string> before);

        /// <summary>
        /// List Builder Base leagues List Builder Base leagues
        /// </summary>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="BuilderBaseLeagueList"/></returns>
        public async Task<ApiResponse<BuilderBaseLeagueList>?> FetchBuilderBaseLeaguesOrDefaultAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FetchBuilderBaseLeaguesAsync(limit, after, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List Builder Base leagues List Builder Base leagues
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="BuilderBaseLeagueList"/></returns>
        public async Task<ApiResponse<BuilderBaseLeagueList>> FetchBuilderBaseLeaguesAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetBuilderBaseLeagues(after, before);

                FormatGetBuilderBaseLeagues(ref limit, ref after, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/builderbaseleagues";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = limit.Value.ToString();

                    if (after.IsSet)
                        parseQueryStringLocalVar["after"] = after.Value.ToString();

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = before.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    ApiKeyToken apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);

                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "authorization");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<BuilderBaseLeagueList> apiResponseLocalVar = new ApiResponse<BuilderBaseLeagueList>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/builderbaseleagues", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFetchBuilderBaseLeaguesDefaultImplementation(apiResponseLocalVar, limit, after, before);

                        Events.ExecuteOnGetBuilderBaseLeagues(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFetchBuilderBaseLeaguesDefaultImplementation(e, "/builderbaseleagues", uriBuilderLocalVar.Path, limit, after, before);
                Events.ExecuteOnErrorGetBuilderBaseLeagues(e);
                throw;
            }
        }

        partial void FormatGetCapitalLeague(ref string leagueId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="leagueId"></param>
        /// <returns></returns>
        private void ValidateGetCapitalLeague(string leagueId)
        {
            if (leagueId == null)
                throw new ArgumentNullException(nameof(leagueId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="leagueId"></param>
        private void AfterFetchCapitalLeagueDefaultImplementation(ApiResponse<CapitalLeague> apiResponseLocalVar, string leagueId)
        {
            bool suppressDefaultLog = false;
            AfterFetchCapitalLeague(ref suppressDefaultLog, apiResponseLocalVar, leagueId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="leagueId"></param>
        partial void AfterFetchCapitalLeague(ref bool suppressDefaultLog, ApiResponse<CapitalLeague> apiResponseLocalVar, string leagueId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="leagueId"></param>
        private void OnErrorFetchCapitalLeagueDefaultImplementation(Exception exception, string pathFormat, string path, string leagueId)
        {
            bool suppressDefaultLog = false;
            OnErrorFetchCapitalLeague(ref suppressDefaultLog, exception, pathFormat, path, leagueId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="leagueId"></param>
        partial void OnErrorFetchCapitalLeague(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string leagueId);

        /// <summary>
        /// Get capital league information Get capital league information
        /// </summary>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CapitalLeague"/></returns>
        public async Task<ApiResponse<CapitalLeague>?> FetchCapitalLeagueOrDefaultAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FetchCapitalLeagueAsync(leagueId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get capital league information Get capital league information
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CapitalLeague"/></returns>
        public async Task<ApiResponse<CapitalLeague>> FetchCapitalLeagueAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCapitalLeague(leagueId);

                FormatGetCapitalLeague(ref leagueId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/capitalleagues/{leagueId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BleagueId%7D", Uri.EscapeDataString(leagueId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    ApiKeyToken apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);

                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "authorization");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<CapitalLeague> apiResponseLocalVar = new ApiResponse<CapitalLeague>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/capitalleagues/{leagueId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFetchCapitalLeagueDefaultImplementation(apiResponseLocalVar, leagueId);

                        Events.ExecuteOnGetCapitalLeague(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFetchCapitalLeagueDefaultImplementation(e, "/capitalleagues/{leagueId}", uriBuilderLocalVar.Path, leagueId);
                Events.ExecuteOnErrorGetCapitalLeague(e);
                throw;
            }
        }

        partial void FormatGetCapitalLeagues(ref Option<int> limit, ref Option<string> after, ref Option<string> before);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns></returns>
        private void ValidateGetCapitalLeagues(Option<string> after, Option<string> before)
        {
            if (after.IsSet && after.Value == null)
                throw new ArgumentNullException(nameof(after));

            if (before.IsSet && before.Value == null)
                throw new ArgumentNullException(nameof(before));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        private void AfterFetchCapitalLeaguesDefaultImplementation(ApiResponse<CapitalLeagueObject> apiResponseLocalVar, Option<int> limit, Option<string> after, Option<string> before)
        {
            bool suppressDefaultLog = false;
            AfterFetchCapitalLeagues(ref suppressDefaultLog, apiResponseLocalVar, limit, after, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        partial void AfterFetchCapitalLeagues(ref bool suppressDefaultLog, ApiResponse<CapitalLeagueObject> apiResponseLocalVar, Option<int> limit, Option<string> after, Option<string> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        private void OnErrorFetchCapitalLeaguesDefaultImplementation(Exception exception, string pathFormat, string path, Option<int> limit, Option<string> after, Option<string> before)
        {
            bool suppressDefaultLog = false;
            OnErrorFetchCapitalLeagues(ref suppressDefaultLog, exception, pathFormat, path, limit, after, before);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        partial void OnErrorFetchCapitalLeagues(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<int> limit, Option<string> after, Option<string> before);

        /// <summary>
        /// List capital leagues List capital leagues
        /// </summary>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CapitalLeagueObject"/></returns>
        public async Task<ApiResponse<CapitalLeagueObject>?> FetchCapitalLeaguesOrDefaultAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FetchCapitalLeaguesAsync(limit, after, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List capital leagues List capital leagues
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="CapitalLeagueObject"/></returns>
        public async Task<ApiResponse<CapitalLeagueObject>> FetchCapitalLeaguesAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetCapitalLeagues(after, before);

                FormatGetCapitalLeagues(ref limit, ref after, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/capitalleagues";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = limit.Value.ToString();

                    if (after.IsSet)
                        parseQueryStringLocalVar["after"] = after.Value.ToString();

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = before.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    ApiKeyToken apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);

                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "authorization");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<CapitalLeagueObject> apiResponseLocalVar = new ApiResponse<CapitalLeagueObject>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/capitalleagues", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFetchCapitalLeaguesDefaultImplementation(apiResponseLocalVar, limit, after, before);

                        Events.ExecuteOnGetCapitalLeagues(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFetchCapitalLeaguesDefaultImplementation(e, "/capitalleagues", uriBuilderLocalVar.Path, limit, after, before);
                Events.ExecuteOnErrorGetCapitalLeagues(e);
                throw;
            }
        }

        partial void FormatGetLeague(ref string leagueId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="leagueId"></param>
        /// <returns></returns>
        private void ValidateGetLeague(string leagueId)
        {
            if (leagueId == null)
                throw new ArgumentNullException(nameof(leagueId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="leagueId"></param>
        private void AfterFetchLeagueDefaultImplementation(ApiResponse<League> apiResponseLocalVar, string leagueId)
        {
            bool suppressDefaultLog = false;
            AfterFetchLeague(ref suppressDefaultLog, apiResponseLocalVar, leagueId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="leagueId"></param>
        partial void AfterFetchLeague(ref bool suppressDefaultLog, ApiResponse<League> apiResponseLocalVar, string leagueId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="leagueId"></param>
        private void OnErrorFetchLeagueDefaultImplementation(Exception exception, string pathFormat, string path, string leagueId)
        {
            bool suppressDefaultLog = false;
            OnErrorFetchLeague(ref suppressDefaultLog, exception, pathFormat, path, leagueId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="leagueId"></param>
        partial void OnErrorFetchLeague(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string leagueId);

        /// <summary>
        /// Get league information Get league information
        /// </summary>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="League"/></returns>
        public async Task<ApiResponse<League>?> FetchLeagueOrDefaultAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FetchLeagueAsync(leagueId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get league information Get league information
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="League"/></returns>
        public async Task<ApiResponse<League>> FetchLeagueAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetLeague(leagueId);

                FormatGetLeague(ref leagueId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/leagues/{leagueId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BleagueId%7D", Uri.EscapeDataString(leagueId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    ApiKeyToken apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);

                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "authorization");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<League> apiResponseLocalVar = new ApiResponse<League>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/leagues/{leagueId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFetchLeagueDefaultImplementation(apiResponseLocalVar, leagueId);

                        Events.ExecuteOnGetLeague(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFetchLeagueDefaultImplementation(e, "/leagues/{leagueId}", uriBuilderLocalVar.Path, leagueId);
                Events.ExecuteOnErrorGetLeague(e);
                throw;
            }
        }

        partial void FormatGetLeagueSeasonRankings(ref string leagueId, ref string seasonId, ref Option<int> limit, ref Option<string> after, ref Option<string> before);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="leagueId"></param>
        /// <param name="seasonId"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns></returns>
        private void ValidateGetLeagueSeasonRankings(string leagueId, string seasonId, Option<string> after, Option<string> before)
        {
            if (leagueId == null)
                throw new ArgumentNullException(nameof(leagueId));

            if (seasonId == null)
                throw new ArgumentNullException(nameof(seasonId));

            if (after.IsSet && after.Value == null)
                throw new ArgumentNullException(nameof(after));

            if (before.IsSet && before.Value == null)
                throw new ArgumentNullException(nameof(before));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="leagueId"></param>
        /// <param name="seasonId"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        private void AfterFetchLeagueSeasonRankingsDefaultImplementation(ApiResponse<PlayerRankingList> apiResponseLocalVar, string leagueId, string seasonId, Option<int> limit, Option<string> after, Option<string> before)
        {
            bool suppressDefaultLog = false;
            AfterFetchLeagueSeasonRankings(ref suppressDefaultLog, apiResponseLocalVar, leagueId, seasonId, limit, after, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="leagueId"></param>
        /// <param name="seasonId"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        partial void AfterFetchLeagueSeasonRankings(ref bool suppressDefaultLog, ApiResponse<PlayerRankingList> apiResponseLocalVar, string leagueId, string seasonId, Option<int> limit, Option<string> after, Option<string> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="leagueId"></param>
        /// <param name="seasonId"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        private void OnErrorFetchLeagueSeasonRankingsDefaultImplementation(Exception exception, string pathFormat, string path, string leagueId, string seasonId, Option<int> limit, Option<string> after, Option<string> before)
        {
            bool suppressDefaultLog = false;
            OnErrorFetchLeagueSeasonRankings(ref suppressDefaultLog, exception, pathFormat, path, leagueId, seasonId, limit, after, before);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="leagueId"></param>
        /// <param name="seasonId"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        partial void OnErrorFetchLeagueSeasonRankings(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string leagueId, string seasonId, Option<int> limit, Option<string> after, Option<string> before);

        /// <summary>
        /// Get league season rankings Get league season rankings. Note that league season information is available only for Legend League. 
        /// </summary>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="seasonId">Identifier of the season.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="PlayerRankingList"/></returns>
        public async Task<ApiResponse<PlayerRankingList>?> FetchLeagueSeasonRankingsOrDefaultAsync(string leagueId, string seasonId, Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FetchLeagueSeasonRankingsAsync(leagueId, seasonId, limit, after, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get league season rankings Get league season rankings. Note that league season information is available only for Legend League. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="seasonId">Identifier of the season.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="PlayerRankingList"/></returns>
        public async Task<ApiResponse<PlayerRankingList>> FetchLeagueSeasonRankingsAsync(string leagueId, string seasonId, Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetLeagueSeasonRankings(leagueId, seasonId, after, before);

                FormatGetLeagueSeasonRankings(ref leagueId, ref seasonId, ref limit, ref after, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/leagues/{leagueId}/seasons/{seasonId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BleagueId%7D", Uri.EscapeDataString(leagueId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BseasonId%7D", Uri.EscapeDataString(seasonId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = limit.Value.ToString();

                    if (after.IsSet)
                        parseQueryStringLocalVar["after"] = after.Value.ToString();

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = before.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    ApiKeyToken apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);

                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "authorization");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<PlayerRankingList> apiResponseLocalVar = new ApiResponse<PlayerRankingList>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/leagues/{leagueId}/seasons/{seasonId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFetchLeagueSeasonRankingsDefaultImplementation(apiResponseLocalVar, leagueId, seasonId, limit, after, before);

                        Events.ExecuteOnGetLeagueSeasonRankings(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFetchLeagueSeasonRankingsDefaultImplementation(e, "/leagues/{leagueId}/seasons/{seasonId}", uriBuilderLocalVar.Path, leagueId, seasonId, limit, after, before);
                Events.ExecuteOnErrorGetLeagueSeasonRankings(e);
                throw;
            }
        }

        partial void FormatGetLeagueSeasons(ref string leagueId, ref Option<int> limit, ref Option<string> after, ref Option<string> before);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="leagueId"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns></returns>
        private void ValidateGetLeagueSeasons(string leagueId, Option<string> after, Option<string> before)
        {
            if (leagueId == null)
                throw new ArgumentNullException(nameof(leagueId));

            if (after.IsSet && after.Value == null)
                throw new ArgumentNullException(nameof(after));

            if (before.IsSet && before.Value == null)
                throw new ArgumentNullException(nameof(before));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="leagueId"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        private void AfterFetchLeagueSeasonsDefaultImplementation(ApiResponse<LeagueSeasonList> apiResponseLocalVar, string leagueId, Option<int> limit, Option<string> after, Option<string> before)
        {
            bool suppressDefaultLog = false;
            AfterFetchLeagueSeasons(ref suppressDefaultLog, apiResponseLocalVar, leagueId, limit, after, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="leagueId"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        partial void AfterFetchLeagueSeasons(ref bool suppressDefaultLog, ApiResponse<LeagueSeasonList> apiResponseLocalVar, string leagueId, Option<int> limit, Option<string> after, Option<string> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="leagueId"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        private void OnErrorFetchLeagueSeasonsDefaultImplementation(Exception exception, string pathFormat, string path, string leagueId, Option<int> limit, Option<string> after, Option<string> before)
        {
            bool suppressDefaultLog = false;
            OnErrorFetchLeagueSeasons(ref suppressDefaultLog, exception, pathFormat, path, leagueId, limit, after, before);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="leagueId"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        partial void OnErrorFetchLeagueSeasons(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string leagueId, Option<int> limit, Option<string> after, Option<string> before);

        /// <summary>
        /// Get league seasons Get league seasons. Note that league season information is available only for Legend League. 
        /// </summary>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="LeagueSeasonList"/></returns>
        public async Task<ApiResponse<LeagueSeasonList>?> FetchLeagueSeasonsOrDefaultAsync(string leagueId, Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FetchLeagueSeasonsAsync(leagueId, limit, after, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get league seasons Get league seasons. Note that league season information is available only for Legend League. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="LeagueSeasonList"/></returns>
        public async Task<ApiResponse<LeagueSeasonList>> FetchLeagueSeasonsAsync(string leagueId, Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetLeagueSeasons(leagueId, after, before);

                FormatGetLeagueSeasons(ref leagueId, ref limit, ref after, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/leagues/{leagueId}/seasons";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BleagueId%7D", Uri.EscapeDataString(leagueId.ToString()));

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = limit.Value.ToString();

                    if (after.IsSet)
                        parseQueryStringLocalVar["after"] = after.Value.ToString();

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = before.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    ApiKeyToken apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);

                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "authorization");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<LeagueSeasonList> apiResponseLocalVar = new ApiResponse<LeagueSeasonList>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/leagues/{leagueId}/seasons", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFetchLeagueSeasonsDefaultImplementation(apiResponseLocalVar, leagueId, limit, after, before);

                        Events.ExecuteOnGetLeagueSeasons(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFetchLeagueSeasonsDefaultImplementation(e, "/leagues/{leagueId}/seasons", uriBuilderLocalVar.Path, leagueId, limit, after, before);
                Events.ExecuteOnErrorGetLeagueSeasons(e);
                throw;
            }
        }

        partial void FormatGetLeagues(ref Option<int> limit, ref Option<string> after, ref Option<string> before);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns></returns>
        private void ValidateGetLeagues(Option<string> after, Option<string> before)
        {
            if (after.IsSet && after.Value == null)
                throw new ArgumentNullException(nameof(after));

            if (before.IsSet && before.Value == null)
                throw new ArgumentNullException(nameof(before));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        private void AfterFetchLeaguesDefaultImplementation(ApiResponse<LeagueList> apiResponseLocalVar, Option<int> limit, Option<string> after, Option<string> before)
        {
            bool suppressDefaultLog = false;
            AfterFetchLeagues(ref suppressDefaultLog, apiResponseLocalVar, limit, after, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        partial void AfterFetchLeagues(ref bool suppressDefaultLog, ApiResponse<LeagueList> apiResponseLocalVar, Option<int> limit, Option<string> after, Option<string> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        private void OnErrorFetchLeaguesDefaultImplementation(Exception exception, string pathFormat, string path, Option<int> limit, Option<string> after, Option<string> before)
        {
            bool suppressDefaultLog = false;
            OnErrorFetchLeagues(ref suppressDefaultLog, exception, pathFormat, path, limit, after, before);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        partial void OnErrorFetchLeagues(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<int> limit, Option<string> after, Option<string> before);

        /// <summary>
        /// List leagues List leagues
        /// </summary>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="LeagueList"/></returns>
        public async Task<ApiResponse<LeagueList>?> FetchLeaguesOrDefaultAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FetchLeaguesAsync(limit, after, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List leagues List leagues
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="LeagueList"/></returns>
        public async Task<ApiResponse<LeagueList>> FetchLeaguesAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetLeagues(after, before);

                FormatGetLeagues(ref limit, ref after, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/leagues";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = limit.Value.ToString();

                    if (after.IsSet)
                        parseQueryStringLocalVar["after"] = after.Value.ToString();

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = before.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    ApiKeyToken apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);

                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "authorization");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<LeagueList> apiResponseLocalVar = new ApiResponse<LeagueList>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/leagues", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFetchLeaguesDefaultImplementation(apiResponseLocalVar, limit, after, before);

                        Events.ExecuteOnGetLeagues(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFetchLeaguesDefaultImplementation(e, "/leagues", uriBuilderLocalVar.Path, limit, after, before);
                Events.ExecuteOnErrorGetLeagues(e);
                throw;
            }
        }

        partial void FormatGetWarLeague(ref string leagueId);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="leagueId"></param>
        /// <returns></returns>
        private void ValidateGetWarLeague(string leagueId)
        {
            if (leagueId == null)
                throw new ArgumentNullException(nameof(leagueId));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="leagueId"></param>
        private void AfterFetchWarLeagueDefaultImplementation(ApiResponse<WarLeague> apiResponseLocalVar, string leagueId)
        {
            bool suppressDefaultLog = false;
            AfterFetchWarLeague(ref suppressDefaultLog, apiResponseLocalVar, leagueId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="leagueId"></param>
        partial void AfterFetchWarLeague(ref bool suppressDefaultLog, ApiResponse<WarLeague> apiResponseLocalVar, string leagueId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="leagueId"></param>
        private void OnErrorFetchWarLeagueDefaultImplementation(Exception exception, string pathFormat, string path, string leagueId)
        {
            bool suppressDefaultLog = false;
            OnErrorFetchWarLeague(ref suppressDefaultLog, exception, pathFormat, path, leagueId);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="leagueId"></param>
        partial void OnErrorFetchWarLeague(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, string leagueId);

        /// <summary>
        /// Get war league information Get war league information
        /// </summary>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="WarLeague"/></returns>
        public async Task<ApiResponse<WarLeague>?> FetchWarLeagueOrDefaultAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FetchWarLeagueAsync(leagueId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Get war league information Get war league information
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="WarLeague"/></returns>
        public async Task<ApiResponse<WarLeague>> FetchWarLeagueAsync(string leagueId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetWarLeague(leagueId);

                FormatGetWarLeague(ref leagueId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/warleagues/{leagueId}";
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BleagueId%7D", Uri.EscapeDataString(leagueId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    ApiKeyToken apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);

                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "authorization");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<WarLeague> apiResponseLocalVar = new ApiResponse<WarLeague>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/warleagues/{leagueId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFetchWarLeagueDefaultImplementation(apiResponseLocalVar, leagueId);

                        Events.ExecuteOnGetWarLeague(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFetchWarLeagueDefaultImplementation(e, "/warleagues/{leagueId}", uriBuilderLocalVar.Path, leagueId);
                Events.ExecuteOnErrorGetWarLeague(e);
                throw;
            }
        }

        partial void FormatGetWarLeagues(ref Option<int> limit, ref Option<string> after, ref Option<string> before);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="after"></param>
        /// <param name="before"></param>
        /// <returns></returns>
        private void ValidateGetWarLeagues(Option<string> after, Option<string> before)
        {
            if (after.IsSet && after.Value == null)
                throw new ArgumentNullException(nameof(after));

            if (before.IsSet && before.Value == null)
                throw new ArgumentNullException(nameof(before));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        private void AfterFetchWarLeaguesDefaultImplementation(ApiResponse<WarLeagueList> apiResponseLocalVar, Option<int> limit, Option<string> after, Option<string> before)
        {
            bool suppressDefaultLog = false;
            AfterFetchWarLeagues(ref suppressDefaultLog, apiResponseLocalVar, limit, after, before);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        partial void AfterFetchWarLeagues(ref bool suppressDefaultLog, ApiResponse<WarLeagueList> apiResponseLocalVar, Option<int> limit, Option<string> after, Option<string> before);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        private void OnErrorFetchWarLeaguesDefaultImplementation(Exception exception, string pathFormat, string path, Option<int> limit, Option<string> after, Option<string> before)
        {
            bool suppressDefaultLog = false;
            OnErrorFetchWarLeagues(ref suppressDefaultLog, exception, pathFormat, path, limit, after, before);
            if (!suppressDefaultLog)
                Logger.LogError(exception, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="exception"></param>
        /// <param name="pathFormat"></param>
        /// <param name="path"></param>
        /// <param name="limit"></param>
        /// <param name="after"></param>
        /// <param name="before"></param>
        partial void OnErrorFetchWarLeagues(ref bool suppressDefaultLog, Exception exception, string pathFormat, string path, Option<int> limit, Option<string> after, Option<string> before);

        /// <summary>
        /// List war leagues List war leagues
        /// </summary>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="WarLeagueList"/></returns>
        public async Task<ApiResponse<WarLeagueList>?> FetchWarLeaguesOrDefaultAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await FetchWarLeaguesAsync(limit, after, before, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// List war leagues List war leagues
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="ApiResponse{T}"/>&gt; where T : <see cref="WarLeagueList"/></returns>
        public async Task<ApiResponse<WarLeagueList>> FetchWarLeaguesAsync(Option<int> limit = default, Option<string> after = default, Option<string> before = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateGetWarLeagues(after, before);

                FormatGetWarLeagues(ref limit, ref after, ref before);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = ClientUtils.CONTEXT_PATH + "/warleagues";

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = limit.Value.ToString();

                    if (after.IsSet)
                        parseQueryStringLocalVar["after"] = after.Value.ToString();

                    if (before.IsSet)
                        parseQueryStringLocalVar["before"] = before.Value.ToString();

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();

                    ApiKeyToken apiKeyTokenLocalVar = (ApiKeyToken) await ApiKeyProvider.GetAsync(cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(apiKeyTokenLocalVar);

                    apiKeyTokenLocalVar.UseInHeader(httpRequestMessageLocalVar, "authorization");

                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ApiResponse<WarLeagueList> apiResponseLocalVar = new ApiResponse<WarLeagueList>(httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/warleagues", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterFetchWarLeaguesDefaultImplementation(apiResponseLocalVar, limit, after, before);

                        Events.ExecuteOnGetWarLeagues(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorFetchWarLeaguesDefaultImplementation(e, "/warleagues", uriBuilderLocalVar.Path, limit, after, before);
                Events.ExecuteOnErrorGetWarLeagues(e);
                throw;
            }
        }
    }
}
