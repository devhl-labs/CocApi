// this file was initially auto generated
// it will not be overwritten

/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using CocApi.Rest.Client;
using CocApi.Rest.Models;

namespace CocApi.Rest.Apis
{
    /// <summary>
    /// Validate requests and process server responses
    /// </summary>
    public class ClansApi : BaseApis.ClansApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClansApi(ILogger<ClansApi> logger, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider,
            TokenProvider<ApiKeyToken> apiKeyProvider
        )
        : base(logger, httpClient, jsonSerializerOptionsProvider,
            apiKeyProvider)
        {
        }

        protected override string OnFetchClan(string clanTag)
        {
            clanTag = Clash.FormatTag(clanTag);
            return base.OnFetchClan(clanTag);
        }

        protected override (string, int?, string?, string?) OnFetchClanMembers(string clanTag, int? limit = null, string? after = null, string? before = null)
        {
            clanTag = Clash.FormatTag(clanTag);
            return base.OnFetchClanMembers(clanTag, limit, after, before);
        }

        protected override (string, bool?) OnFetchClanWarLeagueGroup(string clanTag, bool? realtime)
        {
            clanTag = Clash.FormatTag(clanTag);
            return base.OnFetchClanWarLeagueGroup(clanTag, realtime);
        }

        protected override (string, bool?) OnFetchClanWarLeagueWar(string warTag, bool? realtime)
        {
            warTag = Clash.FormatTag(warTag);
            return base.OnFetchClanWarLeagueWar(warTag, realtime);
        }

        protected override (string, int?, string?, string?) OnFetchClanWarLog(string clanTag, int? limit = null, string? after = null, string? before = null)
        {
            clanTag = Clash.FormatTag(clanTag);
            return base.OnFetchClanWarLog(clanTag, limit, after, before);
        }

        protected override (string, bool?) OnFetchCurrentWar(string clanTag, bool? realtime)
        {
            clanTag = Clash.FormatTag(clanTag);
            return base.OnFetchCurrentWar(clanTag, realtime);
        }

        protected override void AfterFetchCurrentWar(ApiResponse<ClanWar?> apiResponse, string clanTag, bool? realtime)
        {
            if (apiResponse.Content != null)
            {
                apiResponse.Content.ServerExpiration = apiResponse.ServerExpiration;
                apiResponse.Content.WarTag = null;
            }
            base.AfterFetchCurrentWar(apiResponse, clanTag, realtime);
        }

        protected override void AfterFetchClanWarLeagueWar(ApiResponse<ClanWar?> apiResponse, string warTag, bool? realtime)
        {
            if (apiResponse.Content != null)
            {
                apiResponse.Content.ServerExpiration = apiResponse.ServerExpiration;
                apiResponse.Content.WarTag = warTag;
            }
            base.AfterFetchClanWarLeagueWar(apiResponse, warTag, realtime);
        }

        protected override void OnErrorFetchClan(Exception exception, string clanTag, string pathFormat, string path)
        {
            Logger.LogError(exception, "There was an error fetching the clan for clanTag: {clanTag}", clanTag);
        }

        protected override void OnErrorFetchClanMembers(Exception exception, string pathFormat, string path, string clanTag, int? limit, string? after, string? before)
        {
            Logger.LogError(exception, "There was an error fetching the clan members for clanTag: {clanTag}", clanTag);
        }

        protected override void OnErrorFetchClanWarLeagueGroup(Exception exception, string pathFormat, string path, string clanTag, bool? realtime)
        {
            Logger.LogError(exception, "There was an error fetching the clan war league group for clanTag: {clanTag}", clanTag);
        }

        protected override void OnErrorFetchClanWarLeagueWar(Exception exception, string pathFormat, string path, string warTag, bool? realtime)
        {
            Logger.LogError(exception, "There was an error fetching the clan war league war for warTag: {warTag}", warTag);
        }

        protected override void OnErrorFetchClanWarLog(Exception exception, string pathFormat, string path, string clanTag, int? limit, string? after, string? before)
        {
            Logger.LogError(exception, "There was an error fetching the clan war log for clanTag: {clanTag}", clanTag);
        }

        protected override void OnErrorFetchCurrentWar(Exception exception, string pathFormat, string path, string clanTag, bool? realtime)
        {
            Logger.LogError(exception, "There was an error fetching the current war for clanTag: {clanTag}", clanTag);
        }
    }
}


