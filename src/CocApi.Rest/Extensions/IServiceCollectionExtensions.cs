/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Linq;
using Microsoft.Extensions.DependencyInjection;
using CocApi.Rest.Client;

namespace CocApi.Rest.Extensions
{
    /// <summary>
    /// Extension methods for IServiceCollection
    /// </summary>
    public static class IServiceCollectionExtensions
    {
        /// <summary>
        /// Add the api to your host builder.
        /// </summary>
        /// <param name="services"></param>
        /// <param name="options"></param>
        public static void AddCocApi<TClansApi, TDeveloperApi, TGoldpassApi, TLabelsApi, TLeaguesApi, TLocationsApi, TPlayersApi>(this IServiceCollection services, Action<HostConfiguration<TClansApi, TDeveloperApi, TGoldpassApi, TLabelsApi, TLeaguesApi, TLocationsApi, TPlayersApi>> options)
            where TClansApi : class, IApis.IClansApi
            where TDeveloperApi : class, IApis.IDeveloperApi
            where TGoldpassApi : class, IApis.IGoldpassApi
            where TLabelsApi : class, IApis.ILabelsApi
            where TLeaguesApi : class, IApis.ILeaguesApi
            where TLocationsApi : class, IApis.ILocationsApi
            where TPlayersApi : class, IApis.IPlayersApi
        {
            HostConfiguration<TClansApi, TDeveloperApi, TGoldpassApi, TLabelsApi, TLeaguesApi, TLocationsApi, TPlayersApi> config = new HostConfiguration<TClansApi, TDeveloperApi, TGoldpassApi, TLabelsApi, TLeaguesApi, TLocationsApi, TPlayersApi>(services);
            options(config);
            AddCocApi(services, config);
        }

        /// <summary>
        /// Add the api to your host builder.
        /// </summary>
        /// <param name="services"></param>
        /// <param name="options"></param>
        public static void AddCocApi(this IServiceCollection services, Action<HostConfiguration<Apis.ClansApi, Apis.DeveloperApi, Apis.GoldpassApi, Apis.LabelsApi, Apis.LeaguesApi, Apis.LocationsApi, Apis.PlayersApi>> options)
        {
            HostConfiguration<Apis.ClansApi, Apis.DeveloperApi, Apis.GoldpassApi, Apis.LabelsApi, Apis.LeaguesApi, Apis.LocationsApi, Apis.PlayersApi> config = new HostConfiguration<Apis.ClansApi, Apis.DeveloperApi, Apis.GoldpassApi, Apis.LabelsApi, Apis.LeaguesApi, Apis.LocationsApi, Apis.PlayersApi>(services);
            options(config);
            AddCocApi(services, config);
        }

        internal static void AddCocApi<TClansApi, TDeveloperApi, TGoldpassApi, TLabelsApi, TLeaguesApi, TLocationsApi, TPlayersApi>(IServiceCollection services, HostConfiguration<TClansApi, TDeveloperApi, TGoldpassApi, TLabelsApi, TLeaguesApi, TLocationsApi, TPlayersApi> host)
            where TClansApi : class, IApis.IClansApi
            where TDeveloperApi : class, IApis.IDeveloperApi
            where TGoldpassApi : class, IApis.IGoldpassApi
            where TLabelsApi : class, IApis.ILabelsApi
            where TLeaguesApi : class, IApis.ILeaguesApi
            where TLocationsApi : class, IApis.ILocationsApi
            where TPlayersApi : class, IApis.IPlayersApi
        {
            if (!host.HttpClientsAdded)
                host.AddCocApiHttpClients();

            services.AddSingleton<CookieContainer>();

            // ensure that a token provider was provided for this token type
            // if not, default to RateLimitProvider
            var containerServices = services.Where(s => s.ServiceType.IsGenericType &&
                s.ServiceType.GetGenericTypeDefinition().IsAssignableFrom(typeof(TokenContainer<>))).ToArray();

            foreach(var containerService in containerServices)
            {
                var tokenType = containerService.ServiceType.GenericTypeArguments[0];

                var provider = services.FirstOrDefault(s => s.ServiceType.IsAssignableFrom(typeof(TokenProvider<>).MakeGenericType(tokenType)));

                if (provider == null)
                {
                    services.AddSingleton(typeof(RateLimitProvider<>).MakeGenericType(tokenType));
                    services.AddSingleton(typeof(TokenProvider<>).MakeGenericType(tokenType), 
                        s => s.GetRequiredService(typeof(RateLimitProvider<>).MakeGenericType(tokenType)));
                }
            }
        }
    }
}
