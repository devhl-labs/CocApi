/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Threading.Tasks;
using CocApi.Client;
using CocApi.Model;
using Microsoft.Extensions.Logging;

namespace CocApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILocationsApi
    {
        /// <summary>
        /// Get clan rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get clan rankings for a specific location
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClanRankingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClanRankingList>> FetchClanRankingResponseAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get clan rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get clan rankings for a specific location
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClanRankingList)</returns>
        System.Threading.Tasks.Task<ClanRankingList> FetchClanRankingAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get clan rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get clan rankings for a specific location
        /// </remarks>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClanRankingList?)</returns>
        System.Threading.Tasks.Task<ClanRankingList?> FetchClanRankingOrDefaultAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// Get clan versus rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get clan versus rankings for a specific location
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClanVersusRankingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClanVersusRankingList>> FetchClanVersusRankingResponseAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get clan versus rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get clan versus rankings for a specific location
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClanVersusRankingList)</returns>
        System.Threading.Tasks.Task<ClanVersusRankingList> FetchClanVersusRankingAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get clan versus rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get clan versus rankings for a specific location
        /// </remarks>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClanVersusRankingList?)</returns>
        System.Threading.Tasks.Task<ClanVersusRankingList?> FetchClanVersusRankingOrDefaultAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// Get location information
        /// </summary>
        /// <remarks>
        /// Get information about specific location
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<ApiResponse<Location>> FetchLocationResponseAsync(string locationId, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get location information
        /// </summary>
        /// <remarks>
        /// Get information about specific location
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        System.Threading.Tasks.Task<Location> FetchLocationAsync(string locationId, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get location information
        /// </summary>
        /// <remarks>
        /// Get information about specific location
        /// </remarks>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location?)</returns>
        System.Threading.Tasks.Task<Location?> FetchLocationOrDefaultAsync(string locationId, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// List locations
        /// </summary>
        /// <remarks>
        /// List locations
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationList)</returns>
        System.Threading.Tasks.Task<ApiResponse<LocationList>> FetchLocationsResponseAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// List locations
        /// </summary>
        /// <remarks>
        /// List locations
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationList)</returns>
        System.Threading.Tasks.Task<LocationList> FetchLocationsAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// List locations
        /// </summary>
        /// <remarks>
        /// List locations
        /// </remarks>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationList?)</returns>
        System.Threading.Tasks.Task<LocationList?> FetchLocationsOrDefaultAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// Get player rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get player rankings for a specific location
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerRankingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerRankingList>> FetchPlayerRankingResponseAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get player rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get player rankings for a specific location
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerRankingList)</returns>
        System.Threading.Tasks.Task<PlayerRankingList> FetchPlayerRankingAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get player rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get player rankings for a specific location
        /// </remarks>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerRankingList?)</returns>
        System.Threading.Tasks.Task<PlayerRankingList?> FetchPlayerRankingOrDefaultAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// Get player versus rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get player versus rankings for a specific location
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerVersusRankingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerVersusRankingList>> FetchPlayerVersusRankingResponseAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get player versus rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get player versus rankings for a specific location
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerVersusRankingList)</returns>
        System.Threading.Tasks.Task<PlayerVersusRankingList> FetchPlayerVersusRankingAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get player versus rankings for a specific location
        /// </summary>
        /// <remarks>
        /// Get player versus rankings for a specific location
        /// </remarks>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerVersusRankingList?)</returns>
        System.Threading.Tasks.Task<PlayerVersusRankingList?> FetchPlayerVersusRankingOrDefaultAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LocationsApi : ILocationsApi
    {
        private readonly ILogger<LocationsApi> _logger;
        private readonly System.Net.Http.HttpClient _httpClient;

        private async Task OnHttpRequestResult(HttpRequestResultEventArgs log) => await CocApi.Library.OnHttpRequestResult(this, log).ConfigureAwait(false);

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LocationsApi(ILogger<LocationsApi> logger, System.Net.Http.HttpClient httpClient, TokenProvider tokenProvider)
        {
            _logger = logger;
            _httpClient = httpClient;
            GetTokenAsync = tokenProvider.GetAsync;
        }

        /// <summary>
        /// Returns the token to be used in the api query
        /// </summary>
        public Func<System.Threading.CancellationToken?, System.Threading.Tasks.ValueTask<string>>? GetTokenAsync { get; set; }  


        /// <summary>
        /// Get clan rankings for a specific location Get clan rankings for a specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClanRankingList</returns>
        public async System.Threading.Tasks.Task<ClanRankingList> FetchClanRankingAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<ClanRankingList> result = await FetchClanRankingResponseAsync(locationId, limit, after, before, cancellationToken).ConfigureAwait(false);
            return result.Content ?? throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);
        }

        /// <summary>
        /// Get clan rankings for a specific location Get clan rankings for a specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClanRankingList</returns>
        public async System.Threading.Tasks.Task<ClanRankingList?> FetchClanRankingOrDefaultAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                CocApi.Client.ApiResponse<ClanRankingList> result = await FetchClanRankingResponseAsync(locationId, limit, after, before, cancellationToken).ConfigureAwait(false);
                
                return result.IsSuccessStatusCode
                    ? result.Content
                    : null;
            }
            catch(Exception)
            {
                cancellationToken?.ThrowIfCancellationRequested();

                return null;
            }
        } 

        /// <summary>
        /// Get clan rankings for a specific location Get clan rankings for a specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClanRankingList)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanRankingList>> FetchClanRankingResponseAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (locationId == null)
                throw new ArgumentNullException(nameof(locationId));
            
            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/locations/{locationId}/rankings/clans";
            path = path.Replace("{locationId}", Uri.EscapeDataString(locationId));



            path = $"{path}?";
            
            if (limit != null)
                path = $"{path}limit={Uri.EscapeDataString(limit.ToString()!)}&";  

            if (after != null)
                path = $"{path}after={Uri.EscapeDataString(after.ToString()!)}&";  

            if (before != null)
                path = $"{path}before={Uri.EscapeDataString(before.ToString()!)}&";  


            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");




            // authentication (JWT) required
            //isKeyInHeader
            string? token = GetTokenAsync != null
                ? await GetTokenAsync(cancellationToken).ConfigureAwait(false)
                : null;

            if (token != null)
                request.Headers.Add("authorization", $"Bearer {token}");            


            request.Method = new System.Net.Http.HttpMethod("GET");

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            DateTime start = DateTime.UtcNow;

            DateTime end;

            HttpStatusCode httpStatusCode = HttpStatusCode.OK;

            string? reasonPhrase;

            string responseContent = string.Empty;

            ApiResponse<ClanRankingList> apiResponse;

            try
            {
                using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                httpStatusCode = responseMessage.StatusCode;

                reasonPhrase = responseMessage.ReasonPhrase;

                responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                end = DateTime.UtcNow;

                apiResponse = new(responseMessage, responseContent);
            }
            catch (Exception e)
            {
                cancellationToken?.ThrowIfCancellationRequested();

                end = DateTime.UtcNow;

                HttpRequestException httpRequestException = new("/locations/{locationId}/rankings/clans", path, end - start, e);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestException)).ConfigureAwait(false);

                Library.LogRequestException(_logger, e, start, end, path);

                throw httpRequestException;
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<ClanRankingList>(apiResponse.RawContent, CocApi.Clash.JsonSerializerSettings);

                HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/locations/{locationId}/rankings/clans", path, end - start, httpStatusCode);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess)).ConfigureAwait(false);

                Library.LogRequestSuccess(_logger, httpStatusCode, start, end, path);
            }
            else
            {
                HttpRequestNonSuccess httpRequestNonSuccess = new("/locations/{locationId}/rankings/clans", path, end - start, httpStatusCode, reasonPhrase);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestNonSuccess)).ConfigureAwait(false);

                Library.LogRequestFailure(_logger, httpStatusCode, start, end, path, reasonPhrase);
            }

            return apiResponse;
        }

        /// <summary>
        /// Get clan versus rankings for a specific location Get clan versus rankings for a specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClanVersusRankingList</returns>
        public async System.Threading.Tasks.Task<ClanVersusRankingList> FetchClanVersusRankingAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<ClanVersusRankingList> result = await FetchClanVersusRankingResponseAsync(locationId, limit, after, before, cancellationToken).ConfigureAwait(false);
            return result.Content ?? throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);
        }

        /// <summary>
        /// Get clan versus rankings for a specific location Get clan versus rankings for a specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClanVersusRankingList</returns>
        public async System.Threading.Tasks.Task<ClanVersusRankingList?> FetchClanVersusRankingOrDefaultAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                CocApi.Client.ApiResponse<ClanVersusRankingList> result = await FetchClanVersusRankingResponseAsync(locationId, limit, after, before, cancellationToken).ConfigureAwait(false);
                
                return result.IsSuccessStatusCode
                    ? result.Content
                    : null;
            }
            catch(Exception)
            {
                cancellationToken?.ThrowIfCancellationRequested();

                return null;
            }
        } 

        /// <summary>
        /// Get clan versus rankings for a specific location Get clan versus rankings for a specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClanVersusRankingList)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanVersusRankingList>> FetchClanVersusRankingResponseAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (locationId == null)
                throw new ArgumentNullException(nameof(locationId));
            
            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/locations/{locationId}/rankings/clans-versus";
            path = path.Replace("{locationId}", Uri.EscapeDataString(locationId));



            path = $"{path}?";
            
            if (limit != null)
                path = $"{path}limit={Uri.EscapeDataString(limit.ToString()!)}&";  

            if (after != null)
                path = $"{path}after={Uri.EscapeDataString(after.ToString()!)}&";  

            if (before != null)
                path = $"{path}before={Uri.EscapeDataString(before.ToString()!)}&";  


            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");




            // authentication (JWT) required
            //isKeyInHeader
            string? token = GetTokenAsync != null
                ? await GetTokenAsync(cancellationToken).ConfigureAwait(false)
                : null;

            if (token != null)
                request.Headers.Add("authorization", $"Bearer {token}");            


            request.Method = new System.Net.Http.HttpMethod("GET");

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            DateTime start = DateTime.UtcNow;

            DateTime end;

            HttpStatusCode httpStatusCode = HttpStatusCode.OK;

            string? reasonPhrase;

            string responseContent = string.Empty;

            ApiResponse<ClanVersusRankingList> apiResponse;

            try
            {
                using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                httpStatusCode = responseMessage.StatusCode;

                reasonPhrase = responseMessage.ReasonPhrase;

                responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                end = DateTime.UtcNow;

                apiResponse = new(responseMessage, responseContent);
            }
            catch (Exception e)
            {
                cancellationToken?.ThrowIfCancellationRequested();

                end = DateTime.UtcNow;

                HttpRequestException httpRequestException = new("/locations/{locationId}/rankings/clans-versus", path, end - start, e);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestException)).ConfigureAwait(false);

                Library.LogRequestException(_logger, e, start, end, path);

                throw httpRequestException;
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<ClanVersusRankingList>(apiResponse.RawContent, CocApi.Clash.JsonSerializerSettings);

                HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/locations/{locationId}/rankings/clans-versus", path, end - start, httpStatusCode);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess)).ConfigureAwait(false);

                Library.LogRequestSuccess(_logger, httpStatusCode, start, end, path);
            }
            else
            {
                HttpRequestNonSuccess httpRequestNonSuccess = new("/locations/{locationId}/rankings/clans-versus", path, end - start, httpStatusCode, reasonPhrase);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestNonSuccess)).ConfigureAwait(false);

                Library.LogRequestFailure(_logger, httpStatusCode, start, end, path, reasonPhrase);
            }

            return apiResponse;
        }

        /// <summary>
        /// Get location information Get information about specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location> FetchLocationAsync(string locationId, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<Location> result = await FetchLocationResponseAsync(locationId, cancellationToken).ConfigureAwait(false);
            return result.Content ?? throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);
        }

        /// <summary>
        /// Get location information Get information about specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of Location</returns>
        public async System.Threading.Tasks.Task<Location?> FetchLocationOrDefaultAsync(string locationId, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                CocApi.Client.ApiResponse<Location> result = await FetchLocationResponseAsync(locationId, cancellationToken).ConfigureAwait(false);
                
                return result.IsSuccessStatusCode
                    ? result.Content
                    : null;
            }
            catch(Exception)
            {
                cancellationToken?.ThrowIfCancellationRequested();

                return null;
            }
        } 

        /// <summary>
        /// Get location information Get information about specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (Location)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<Location>> FetchLocationResponseAsync(string locationId, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (locationId == null)
                throw new ArgumentNullException(nameof(locationId));
            
            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/locations/{locationId}";
            path = path.Replace("{locationId}", Uri.EscapeDataString(locationId));



            path = $"{path}?";
            

            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");




            // authentication (JWT) required
            //isKeyInHeader
            string? token = GetTokenAsync != null
                ? await GetTokenAsync(cancellationToken).ConfigureAwait(false)
                : null;

            if (token != null)
                request.Headers.Add("authorization", $"Bearer {token}");            


            request.Method = new System.Net.Http.HttpMethod("GET");

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            DateTime start = DateTime.UtcNow;

            DateTime end;

            HttpStatusCode httpStatusCode = HttpStatusCode.OK;

            string? reasonPhrase;

            string responseContent = string.Empty;

            ApiResponse<Location> apiResponse;

            try
            {
                using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                httpStatusCode = responseMessage.StatusCode;

                reasonPhrase = responseMessage.ReasonPhrase;

                responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                end = DateTime.UtcNow;

                apiResponse = new(responseMessage, responseContent);
            }
            catch (Exception e)
            {
                cancellationToken?.ThrowIfCancellationRequested();

                end = DateTime.UtcNow;

                HttpRequestException httpRequestException = new("/locations/{locationId}", path, end - start, e);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestException)).ConfigureAwait(false);

                Library.LogRequestException(_logger, e, start, end, path);

                throw httpRequestException;
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<Location>(apiResponse.RawContent, CocApi.Clash.JsonSerializerSettings);

                HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/locations/{locationId}", path, end - start, httpStatusCode);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess)).ConfigureAwait(false);

                Library.LogRequestSuccess(_logger, httpStatusCode, start, end, path);
            }
            else
            {
                HttpRequestNonSuccess httpRequestNonSuccess = new("/locations/{locationId}", path, end - start, httpStatusCode, reasonPhrase);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestNonSuccess)).ConfigureAwait(false);

                Library.LogRequestFailure(_logger, httpStatusCode, start, end, path, reasonPhrase);
            }

            return apiResponse;
        }

        /// <summary>
        /// List locations List locations
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationList</returns>
        public async System.Threading.Tasks.Task<LocationList> FetchLocationsAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<LocationList> result = await FetchLocationsResponseAsync(limit, after, before, cancellationToken).ConfigureAwait(false);
            return result.Content ?? throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);
        }

        /// <summary>
        /// List locations List locations
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LocationList</returns>
        public async System.Threading.Tasks.Task<LocationList?> FetchLocationsOrDefaultAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                CocApi.Client.ApiResponse<LocationList> result = await FetchLocationsResponseAsync(limit, after, before, cancellationToken).ConfigureAwait(false);
                
                return result.IsSuccessStatusCode
                    ? result.Content
                    : null;
            }
            catch(Exception)
            {
                cancellationToken?.ThrowIfCancellationRequested();

                return null;
            }
        } 

        /// <summary>
        /// List locations List locations
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LocationList)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<LocationList>> FetchLocationsResponseAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            
            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/locations";


            path = $"{path}?";
            
            if (limit != null)
                path = $"{path}limit={Uri.EscapeDataString(limit.ToString()!)}&";  

            if (after != null)
                path = $"{path}after={Uri.EscapeDataString(after.ToString()!)}&";  

            if (before != null)
                path = $"{path}before={Uri.EscapeDataString(before.ToString()!)}&";  


            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");




            // authentication (JWT) required
            //isKeyInHeader
            string? token = GetTokenAsync != null
                ? await GetTokenAsync(cancellationToken).ConfigureAwait(false)
                : null;

            if (token != null)
                request.Headers.Add("authorization", $"Bearer {token}");            


            request.Method = new System.Net.Http.HttpMethod("GET");

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            DateTime start = DateTime.UtcNow;

            DateTime end;

            HttpStatusCode httpStatusCode = HttpStatusCode.OK;

            string? reasonPhrase;

            string responseContent = string.Empty;

            ApiResponse<LocationList> apiResponse;

            try
            {
                using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                httpStatusCode = responseMessage.StatusCode;

                reasonPhrase = responseMessage.ReasonPhrase;

                responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                end = DateTime.UtcNow;

                apiResponse = new(responseMessage, responseContent);
            }
            catch (Exception e)
            {
                cancellationToken?.ThrowIfCancellationRequested();

                end = DateTime.UtcNow;

                HttpRequestException httpRequestException = new("/locations", path, end - start, e);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestException)).ConfigureAwait(false);

                Library.LogRequestException(_logger, e, start, end, path);

                throw httpRequestException;
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<LocationList>(apiResponse.RawContent, CocApi.Clash.JsonSerializerSettings);

                HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/locations", path, end - start, httpStatusCode);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess)).ConfigureAwait(false);

                Library.LogRequestSuccess(_logger, httpStatusCode, start, end, path);
            }
            else
            {
                HttpRequestNonSuccess httpRequestNonSuccess = new("/locations", path, end - start, httpStatusCode, reasonPhrase);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestNonSuccess)).ConfigureAwait(false);

                Library.LogRequestFailure(_logger, httpStatusCode, start, end, path, reasonPhrase);
            }

            return apiResponse;
        }

        /// <summary>
        /// Get player rankings for a specific location Get player rankings for a specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerRankingList</returns>
        public async System.Threading.Tasks.Task<PlayerRankingList> FetchPlayerRankingAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<PlayerRankingList> result = await FetchPlayerRankingResponseAsync(locationId, limit, after, before, cancellationToken).ConfigureAwait(false);
            return result.Content ?? throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);
        }

        /// <summary>
        /// Get player rankings for a specific location Get player rankings for a specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerRankingList</returns>
        public async System.Threading.Tasks.Task<PlayerRankingList?> FetchPlayerRankingOrDefaultAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                CocApi.Client.ApiResponse<PlayerRankingList> result = await FetchPlayerRankingResponseAsync(locationId, limit, after, before, cancellationToken).ConfigureAwait(false);
                
                return result.IsSuccessStatusCode
                    ? result.Content
                    : null;
            }
            catch(Exception)
            {
                cancellationToken?.ThrowIfCancellationRequested();

                return null;
            }
        } 

        /// <summary>
        /// Get player rankings for a specific location Get player rankings for a specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerRankingList)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<PlayerRankingList>> FetchPlayerRankingResponseAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (locationId == null)
                throw new ArgumentNullException(nameof(locationId));
            
            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/locations/{locationId}/rankings/players";
            path = path.Replace("{locationId}", Uri.EscapeDataString(locationId));



            path = $"{path}?";
            
            if (limit != null)
                path = $"{path}limit={Uri.EscapeDataString(limit.ToString()!)}&";  

            if (after != null)
                path = $"{path}after={Uri.EscapeDataString(after.ToString()!)}&";  

            if (before != null)
                path = $"{path}before={Uri.EscapeDataString(before.ToString()!)}&";  


            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");




            // authentication (JWT) required
            //isKeyInHeader
            string? token = GetTokenAsync != null
                ? await GetTokenAsync(cancellationToken).ConfigureAwait(false)
                : null;

            if (token != null)
                request.Headers.Add("authorization", $"Bearer {token}");            


            request.Method = new System.Net.Http.HttpMethod("GET");

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            DateTime start = DateTime.UtcNow;

            DateTime end;

            HttpStatusCode httpStatusCode = HttpStatusCode.OK;

            string? reasonPhrase;

            string responseContent = string.Empty;

            ApiResponse<PlayerRankingList> apiResponse;

            try
            {
                using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                httpStatusCode = responseMessage.StatusCode;

                reasonPhrase = responseMessage.ReasonPhrase;

                responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                end = DateTime.UtcNow;

                apiResponse = new(responseMessage, responseContent);
            }
            catch (Exception e)
            {
                cancellationToken?.ThrowIfCancellationRequested();

                end = DateTime.UtcNow;

                HttpRequestException httpRequestException = new("/locations/{locationId}/rankings/players", path, end - start, e);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestException)).ConfigureAwait(false);

                Library.LogRequestException(_logger, e, start, end, path);

                throw httpRequestException;
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<PlayerRankingList>(apiResponse.RawContent, CocApi.Clash.JsonSerializerSettings);

                HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/locations/{locationId}/rankings/players", path, end - start, httpStatusCode);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess)).ConfigureAwait(false);

                Library.LogRequestSuccess(_logger, httpStatusCode, start, end, path);
            }
            else
            {
                HttpRequestNonSuccess httpRequestNonSuccess = new("/locations/{locationId}/rankings/players", path, end - start, httpStatusCode, reasonPhrase);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestNonSuccess)).ConfigureAwait(false);

                Library.LogRequestFailure(_logger, httpStatusCode, start, end, path, reasonPhrase);
            }

            return apiResponse;
        }

        /// <summary>
        /// Get player versus rankings for a specific location Get player versus rankings for a specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerVersusRankingList</returns>
        public async System.Threading.Tasks.Task<PlayerVersusRankingList> FetchPlayerVersusRankingAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<PlayerVersusRankingList> result = await FetchPlayerVersusRankingResponseAsync(locationId, limit, after, before, cancellationToken).ConfigureAwait(false);
            return result.Content ?? throw new ApiException(result.ReasonPhrase, result.StatusCode, result.RawContent);
        }

        /// <summary>
        /// Get player versus rankings for a specific location Get player versus rankings for a specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerVersusRankingList</returns>
        public async System.Threading.Tasks.Task<PlayerVersusRankingList?> FetchPlayerVersusRankingOrDefaultAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            try
            {
                CocApi.Client.ApiResponse<PlayerVersusRankingList> result = await FetchPlayerVersusRankingResponseAsync(locationId, limit, after, before, cancellationToken).ConfigureAwait(false);
                
                return result.IsSuccessStatusCode
                    ? result.Content
                    : null;
            }
            catch(Exception)
            {
                cancellationToken?.ThrowIfCancellationRequested();

                return null;
            }
        } 

        /// <summary>
        /// Get player versus rankings for a specific location Get player versus rankings for a specific location
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="locationId">Identifier of the location to retrieve.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerVersusRankingList)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<PlayerVersusRankingList>> FetchPlayerVersusRankingResponseAsync(string locationId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (locationId == null)
                throw new ArgumentNullException(nameof(locationId));
            
            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/locations/{locationId}/rankings/players-versus";
            path = path.Replace("{locationId}", Uri.EscapeDataString(locationId));



            path = $"{path}?";
            
            if (limit != null)
                path = $"{path}limit={Uri.EscapeDataString(limit.ToString()!)}&";  

            if (after != null)
                path = $"{path}after={Uri.EscapeDataString(after.ToString()!)}&";  

            if (before != null)
                path = $"{path}before={Uri.EscapeDataString(before.ToString()!)}&";  


            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");




            // authentication (JWT) required
            //isKeyInHeader
            string? token = GetTokenAsync != null
                ? await GetTokenAsync(cancellationToken).ConfigureAwait(false)
                : null;

            if (token != null)
                request.Headers.Add("authorization", $"Bearer {token}");            


            request.Method = new System.Net.Http.HttpMethod("GET");

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            DateTime start = DateTime.UtcNow;

            DateTime end;

            HttpStatusCode httpStatusCode = HttpStatusCode.OK;

            string? reasonPhrase;

            string responseContent = string.Empty;

            ApiResponse<PlayerVersusRankingList> apiResponse;

            try
            {
                using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                httpStatusCode = responseMessage.StatusCode;

                reasonPhrase = responseMessage.ReasonPhrase;

                responseContent = await responseMessage.Content.ReadAsStringAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                end = DateTime.UtcNow;

                apiResponse = new(responseMessage, responseContent);
            }
            catch (Exception e)
            {
                cancellationToken?.ThrowIfCancellationRequested();

                end = DateTime.UtcNow;

                HttpRequestException httpRequestException = new("/locations/{locationId}/rankings/players-versus", path, end - start, e);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestException)).ConfigureAwait(false);

                Library.LogRequestException(_logger, e, start, end, path);

                throw httpRequestException;
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<PlayerVersusRankingList>(apiResponse.RawContent, CocApi.Clash.JsonSerializerSettings);

                HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/locations/{locationId}/rankings/players-versus", path, end - start, httpStatusCode);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess)).ConfigureAwait(false);

                Library.LogRequestSuccess(_logger, httpStatusCode, start, end, path);
            }
            else
            {
                HttpRequestNonSuccess httpRequestNonSuccess = new("/locations/{locationId}/rankings/players-versus", path, end - start, httpStatusCode, reasonPhrase);

                await OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestNonSuccess)).ConfigureAwait(false);

                Library.LogRequestFailure(_logger, httpStatusCode, start, end, path, reasonPhrase);
            }

            return apiResponse;
        }
    }
}

