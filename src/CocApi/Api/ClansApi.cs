/* 
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CocApi.Client;
using CocApi.Model;

namespace CocApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClansApi
    {
        private CocApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        public delegate System.Threading.Tasks.Task QueryResultEventHandler(object sender, QueryResultEventArgs log);
        public event QueryResultEventHandler QueryResult;
        public static System.Collections.Concurrent.ConcurrentBag<IQueryResult> QueryResults = new System.Collections.Concurrent.ConcurrentBag<IQueryResult>();
        internal void OnQueryResult(QueryResultEventArgs log) => QueryResult?.Invoke(this, log);

        /// <summary>
        /// Initializes a new instance of the <see cref="ClansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClansApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClansApi(String basePath)
        {
            this.Configuration = CocApi.Client.Configuration.MergeConfigurations(
                CocApi.Client.GlobalConfiguration.Instance,
                new CocApi.Client.Configuration { BasePath = basePath }
            );
            this.Client = new CocApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CocApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CocApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClansApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClansApi(CocApi.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = CocApi.Client.Configuration.MergeConfigurations(
                CocApi.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new CocApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CocApi.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = CocApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClansApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ClansApi(CocApi.Client.ISynchronousClient client,CocApi.Client.IAsynchronousClient asyncClient, CocApi.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = CocApi.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CocApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CocApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CocApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CocApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }



        /// <summary>
        /// Get clan information Get information about a single clan by clan tag. Clan tags can be found using clan search operation. Note that clan tags start with hash character &#39;#&#39; and that needs to be URL-encoded properly to work in URL, so for example clan tag &#39;#2ABC&#39; would become &#39;%232ABC&#39; in the URL. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of Clan</returns>
        public async System.Threading.Tasks.Task<Clan> GetClanAsync (string clanTag)
        {
             CocApi.Client.ApiResponse<Clan> localVarResponse = await GetClanWithHttpInfoAsync(clanTag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get clan information Get information about a single clan by clan tag. Clan tags can be found using clan search operation. Note that clan tags start with hash character &#39;#&#39; and that needs to be URL-encoded properly to work in URL, so for example clan tag &#39;#2ABC&#39; would become &#39;%232ABC&#39; in the URL. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ApiResponse (Clan)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<Clan>> GetClanWithHttpInfoAsync (string clanTag)
        {
            // verify the required parameter 'clanTag' is set
            if (clanTag == null)
                throw new CocApi.Client.ApiException(400, "Missing required parameter 'clanTag' when calling ClansApi->GetClan");


            if (Clash.TryGetValidTag(clanTag, out string formattedTag) == false)
                throw new CocApi.InvalidTagException(clanTag);

            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            localVarRequestOptions.PathParameters.Add("clanTag", CocApi.Client.ClientUtils.ParameterToString(formattedTag)); // path parameter  //.ParameterToString(clanTag));

            // authentication (JWT) required
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await this.Configuration.GetTokenAsync());
            

            // make the HTTP request
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();
            var localVarResponse = await this.AsynchronousClient.GetAsync<Clan>("/clans/{clanTag}", localVarRequestOptions, this.Configuration);
            stopwatch.Stop();

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClan", localVarResponse);
                if (_exception != null) 
                {
                    QueryException queryException = new QueryException("/clans/{clanTag}", localVarRequestOptions, stopwatch, _exception);

                    QueryResults.Add(queryException);

                    OnQueryResult(new QueryResultEventArgs(queryException));

                    throw _exception;
                }
            }

            QuerySuccess querySuccess = new QuerySuccess("/clans/{clanTag}", localVarRequestOptions, stopwatch, localVarResponse.StatusCode);

            QueryResults.Add(querySuccess);

            OnQueryResult(new QueryResultEventArgs(querySuccess));

            return localVarResponse;
        }

        /// <summary>
        /// Get clan information Get information about a single clan by clan tag. Clan tags can be found using clan search operation. Note that clan tags start with hash character &#39;#&#39; and that needs to be URL-encoded properly to work in URL, so for example clan tag &#39;#2ABC&#39; would become &#39;%232ABC&#39; in the URL. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ApiResponse (Clan)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<Clan>> GetClanWithHttpInfoOrDefaultAsync (string clanTag)
        {
            try
            {
                return await GetClanWithHttpInfoAsync (clanTag);
            }
            catch(ApiException)
            {
                return null;
            }
        }

        /// <summary>
        /// Get clan information Get information about a single clan by clan tag. Clan tags can be found using clan search operation. Note that clan tags start with hash character &#39;#&#39; and that needs to be URL-encoded properly to work in URL, so for example clan tag &#39;#2ABC&#39; would become &#39;%232ABC&#39; in the URL. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of Clan</returns>
        public async System.Threading.Tasks.Task<Clan> GetClanOrDefaultAsync (string clanTag)
        {
             CocApi.Client.ApiResponse<Clan> localVarResponse = await GetClanWithHttpInfoOrDefaultAsync(clanTag);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }



        /// <summary>
        /// List clan members List clan members.
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of List&lt;ClanMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClanMember>> GetClanMembersAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string))
        {
             CocApi.Client.ApiResponse<List<ClanMember>> localVarResponse = await GetClanMembersWithHttpInfoAsync(clanTag, limit, after, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List clan members List clan members.
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ClanMember&gt;)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<List<ClanMember>>> GetClanMembersWithHttpInfoAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string))
        {
            // verify the required parameter 'clanTag' is set
            if (clanTag == null)
                throw new CocApi.Client.ApiException(400, "Missing required parameter 'clanTag' when calling ClansApi->GetClanMembers");


            if (Clash.TryGetValidTag(clanTag, out string formattedTag) == false)
                throw new CocApi.InvalidTagException(clanTag);

            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            localVarRequestOptions.PathParameters.Add("clanTag", CocApi.Client.ClientUtils.ParameterToString(formattedTag)); // path parameter  //.ParameterToString(clanTag));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            // authentication (JWT) required
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await this.Configuration.GetTokenAsync());
            

            // make the HTTP request
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ClanMember>>("/clans/{clanTag}/members", localVarRequestOptions, this.Configuration);
            stopwatch.Stop();

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClanMembers", localVarResponse);
                if (_exception != null) 
                {
                    QueryException queryException = new QueryException("/clans/{clanTag}/members", localVarRequestOptions, stopwatch, _exception);

                    QueryResults.Add(queryException);

                    OnQueryResult(new QueryResultEventArgs(queryException));

                    throw _exception;
                }
            }

            QuerySuccess querySuccess = new QuerySuccess("/clans/{clanTag}/members", localVarRequestOptions, stopwatch, localVarResponse.StatusCode);

            QueryResults.Add(querySuccess);

            OnQueryResult(new QueryResultEventArgs(querySuccess));

            return localVarResponse;
        }

        /// <summary>
        /// List clan members List clan members.
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ClanMember&gt;)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<List<ClanMember>>> GetClanMembersWithHttpInfoOrDefaultAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string))
        {
            try
            {
                return await GetClanMembersWithHttpInfoAsync (clanTag, limit, after, before);
            }
            catch(ApiException)
            {
                return null;
            }
        }

        /// <summary>
        /// List clan members List clan members.
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of List&lt;ClanMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClanMember>> GetClanMembersOrDefaultAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string))
        {
             CocApi.Client.ApiResponse<List<ClanMember>> localVarResponse = await GetClanMembersWithHttpInfoOrDefaultAsync(clanTag, limit, after, before);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }



        /// <summary>
        /// Retrieve information about clan&#39;s current clan war league group Retrieve information about clan&#39;s current clan war league group
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ClanWarLeagueGroup</returns>
        public async System.Threading.Tasks.Task<ClanWarLeagueGroup> GetClanWarLeagueGroupAsync (string clanTag)
        {
             CocApi.Client.ApiResponse<ClanWarLeagueGroup> localVarResponse = await GetClanWarLeagueGroupWithHttpInfoAsync(clanTag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information about clan&#39;s current clan war league group Retrieve information about clan&#39;s current clan war league group
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ApiResponse (ClanWarLeagueGroup)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWarLeagueGroup>> GetClanWarLeagueGroupWithHttpInfoAsync (string clanTag)
        {
            // verify the required parameter 'clanTag' is set
            if (clanTag == null)
                throw new CocApi.Client.ApiException(400, "Missing required parameter 'clanTag' when calling ClansApi->GetClanWarLeagueGroup");


            if (Clash.TryGetValidTag(clanTag, out string formattedTag) == false)
                throw new CocApi.InvalidTagException(clanTag);

            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            localVarRequestOptions.PathParameters.Add("clanTag", CocApi.Client.ClientUtils.ParameterToString(formattedTag)); // path parameter  //.ParameterToString(clanTag));

            // authentication (JWT) required
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await this.Configuration.GetTokenAsync());
            

            // make the HTTP request
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClanWarLeagueGroup>("/clans/{clanTag}/currentwar/leaguegroup", localVarRequestOptions, this.Configuration);
            stopwatch.Stop();

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClanWarLeagueGroup", localVarResponse);
                if (_exception != null) 
                {
                    QueryException queryException = new QueryException("/clans/{clanTag}/currentwar/leaguegroup", localVarRequestOptions, stopwatch, _exception);

                    QueryResults.Add(queryException);

                    OnQueryResult(new QueryResultEventArgs(queryException));

                    throw _exception;
                }
            }

            QuerySuccess querySuccess = new QuerySuccess("/clans/{clanTag}/currentwar/leaguegroup", localVarRequestOptions, stopwatch, localVarResponse.StatusCode);

            QueryResults.Add(querySuccess);

            OnQueryResult(new QueryResultEventArgs(querySuccess));

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information about clan&#39;s current clan war league group Retrieve information about clan&#39;s current clan war league group
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ApiResponse (ClanWarLeagueGroup)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWarLeagueGroup>> GetClanWarLeagueGroupWithHttpInfoOrDefaultAsync (string clanTag)
        {
            try
            {
                return await GetClanWarLeagueGroupWithHttpInfoAsync (clanTag);
            }
            catch(ApiException)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve information about clan&#39;s current clan war league group Retrieve information about clan&#39;s current clan war league group
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ClanWarLeagueGroup</returns>
        public async System.Threading.Tasks.Task<ClanWarLeagueGroup> GetClanWarLeagueGroupOrDefaultAsync (string clanTag)
        {
             CocApi.Client.ApiResponse<ClanWarLeagueGroup> localVarResponse = await GetClanWarLeagueGroupWithHttpInfoOrDefaultAsync(clanTag);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }



        /// <summary>
        /// Retrieve information about individual clan war league war Retrieve information about individual clan war league war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warTag">Tag of the war.</param>
        /// <returns>Task of ClanWar</returns>
        public async System.Threading.Tasks.Task<ClanWar> GetClanWarLeagueWarAsync (string warTag)
        {
             CocApi.Client.ApiResponse<ClanWar> localVarResponse = await GetClanWarLeagueWarWithHttpInfoAsync(warTag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information about individual clan war league war Retrieve information about individual clan war league war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warTag">Tag of the war.</param>
        /// <returns>Task of ApiResponse (ClanWar)</returns>
        private async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWar>> getClanWarLeagueWarWithHttpInfoAsync (string warTag)
        {
            // verify the required parameter 'warTag' is set
            if (warTag == null)
                throw new CocApi.Client.ApiException(400, "Missing required parameter 'warTag' when calling ClansApi->GetClanWarLeagueWar");


            if (Clash.TryGetValidTag(warTag, out string formattedTag) == false)
                throw new CocApi.InvalidTagException(warTag);

            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            localVarRequestOptions.PathParameters.Add("warTag", CocApi.Client.ClientUtils.ParameterToString(formattedTag)); // path parameter  //.ParameterToString(warTag));

            // authentication (JWT) required
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await this.Configuration.GetTokenAsync());
            

            // make the HTTP request
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClanWar>("/clanwarleagues/wars/{warTag}", localVarRequestOptions, this.Configuration);
            stopwatch.Stop();

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClanWarLeagueWar", localVarResponse);
                if (_exception != null) 
                {
                    QueryException queryException = new QueryException("/clanwarleagues/wars/{warTag}", localVarRequestOptions, stopwatch, _exception);

                    QueryResults.Add(queryException);

                    OnQueryResult(new QueryResultEventArgs(queryException));

                    throw _exception;
                }
            }

            QuerySuccess querySuccess = new QuerySuccess("/clanwarleagues/wars/{warTag}", localVarRequestOptions, stopwatch, localVarResponse.StatusCode);

            QueryResults.Add(querySuccess);

            OnQueryResult(new QueryResultEventArgs(querySuccess));

            localVarResponse.Data.WarTag = warTag;

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information about individual clan war league war Retrieve information about individual clan war league war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warTag">Tag of the war.</param>
        /// <returns>Task of ApiResponse (ClanWar)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWar>> GetClanWarLeagueWarWithHttpInfoOrDefaultAsync (string warTag)
        {
            try
            {
                return await GetClanWarLeagueWarWithHttpInfoAsync (warTag);
            }
            catch(ApiException)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve information about individual clan war league war Retrieve information about individual clan war league war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warTag">Tag of the war.</param>
        /// <returns>Task of ClanWar</returns>
        public async System.Threading.Tasks.Task<ClanWar> GetClanWarLeagueWarOrDefaultAsync (string warTag)
        {
             CocApi.Client.ApiResponse<ClanWar> localVarResponse = await GetClanWarLeagueWarWithHttpInfoOrDefaultAsync(warTag);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }



        /// <summary>
        /// Retrieve clan&#39;s clan war log Retrieve clan&#39;s clan war log
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of ClanWarLog</returns>
        public async System.Threading.Tasks.Task<ClanWarLog> GetClanWarLogAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string))
        {
             CocApi.Client.ApiResponse<ClanWarLog> localVarResponse = await GetClanWarLogWithHttpInfoAsync(clanTag, limit, after, before);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve clan&#39;s clan war log Retrieve clan&#39;s clan war log
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of ApiResponse (ClanWarLog)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWarLog>> GetClanWarLogWithHttpInfoAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string))
        {
            // verify the required parameter 'clanTag' is set
            if (clanTag == null)
                throw new CocApi.Client.ApiException(400, "Missing required parameter 'clanTag' when calling ClansApi->GetClanWarLog");


            if (Clash.TryGetValidTag(clanTag, out string formattedTag) == false)
                throw new CocApi.InvalidTagException(clanTag);

            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            localVarRequestOptions.PathParameters.Add("clanTag", CocApi.Client.ClientUtils.ParameterToString(formattedTag)); // path parameter  //.ParameterToString(clanTag));
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            // authentication (JWT) required
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await this.Configuration.GetTokenAsync());
            

            // make the HTTP request
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClanWarLog>("/clans/{clanTag}/warlog", localVarRequestOptions, this.Configuration);
            stopwatch.Stop();

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClanWarLog", localVarResponse);
                if (_exception != null) 
                {
                    QueryException queryException = new QueryException("/clans/{clanTag}/warlog", localVarRequestOptions, stopwatch, _exception);

                    QueryResults.Add(queryException);

                    OnQueryResult(new QueryResultEventArgs(queryException));

                    throw _exception;
                }
            }

            QuerySuccess querySuccess = new QuerySuccess("/clans/{clanTag}/warlog", localVarRequestOptions, stopwatch, localVarResponse.StatusCode);

            QueryResults.Add(querySuccess);

            OnQueryResult(new QueryResultEventArgs(querySuccess));

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve clan&#39;s clan war log Retrieve clan&#39;s clan war log
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of ApiResponse (ClanWarLog)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWarLog>> GetClanWarLogWithHttpInfoOrDefaultAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string))
        {
            try
            {
                return await GetClanWarLogWithHttpInfoAsync (clanTag, limit, after, before);
            }
            catch(ApiException e)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve clan&#39;s clan war log Retrieve clan&#39;s clan war log
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of ClanWarLog</returns>
        public async System.Threading.Tasks.Task<ClanWarLog> GetClanWarLogOrDefaultAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string))
        {
             CocApi.Client.ApiResponse<ClanWarLog> localVarResponse = await GetClanWarLogWithHttpInfoOrDefaultAsync(clanTag, limit, after, before);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }



        /// <summary>
        /// Retrieve information about clan&#39;s current clan war Retrieve information about clan&#39;s current clan war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ClanWar</returns>
        public async System.Threading.Tasks.Task<ClanWar> GetCurrentWarAsync (string clanTag)
        {
             CocApi.Client.ApiResponse<ClanWar> localVarResponse = await GetCurrentWarWithHttpInfoAsync(clanTag);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information about clan&#39;s current clan war Retrieve information about clan&#39;s current clan war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ApiResponse (ClanWar)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWar>> GetCurrentWarWithHttpInfoAsync (string clanTag)
        {
            // verify the required parameter 'clanTag' is set
            if (clanTag == null)
                throw new CocApi.Client.ApiException(400, "Missing required parameter 'clanTag' when calling ClansApi->GetCurrentWar");


            if (Clash.TryGetValidTag(clanTag, out string formattedTag) == false)
                throw new CocApi.InvalidTagException(clanTag);

            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            localVarRequestOptions.PathParameters.Add("clanTag", CocApi.Client.ClientUtils.ParameterToString(formattedTag)); // path parameter  //.ParameterToString(clanTag));

            // authentication (JWT) required
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await this.Configuration.GetTokenAsync());
            

            // make the HTTP request
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClanWar>("/clans/{clanTag}/currentwar", localVarRequestOptions, this.Configuration);
            stopwatch.Stop();

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentWar", localVarResponse);
                if (_exception != null) 
                {
                    QueryException queryException = new QueryException("/clans/{clanTag}/currentwar", localVarRequestOptions, stopwatch, _exception);

                    QueryResults.Add(queryException);

                    OnQueryResult(new QueryResultEventArgs(queryException));

                    throw _exception;
                }
            }

            QuerySuccess querySuccess = new QuerySuccess("/clans/{clanTag}/currentwar", localVarRequestOptions, stopwatch, localVarResponse.StatusCode);

            QueryResults.Add(querySuccess);

            OnQueryResult(new QueryResultEventArgs(querySuccess));

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information about clan&#39;s current clan war Retrieve information about clan&#39;s current clan war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ApiResponse (ClanWar)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWar>> GetCurrentWarWithHttpInfoOrDefaultAsync (string clanTag)
        {
            try
            {
                return await GetCurrentWarWithHttpInfoAsync (clanTag);
            }
            catch(ApiException)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve information about clan&#39;s current clan war Retrieve information about clan&#39;s current clan war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ClanWar</returns>
        public async System.Threading.Tasks.Task<ClanWar> GetCurrentWarOrDefaultAsync (string clanTag)
        {
             CocApi.Client.ApiResponse<ClanWar> localVarResponse = await GetCurrentWarWithHttpInfoOrDefaultAsync(clanTag);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }



        /// <summary>
        /// Search clans Search all clans by name and/or filtering the results using various criteria. At least one filtering criteria must be defined and if name is used as part of search, it is required to be at least three characters long. It is not possible to specify ordering for results so clients should not rely on any specific ordering as that may change in the future releases of the API. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Search clans by name. If name is used as part of search query, it needs to be at least three characters long. Name search parameter is interpreted as wild card search, so it may appear anywhere in the clan name.  (optional)</param>
        /// <param name="warFrequency">Filter by clan war frequency (optional)</param>
        /// <param name="locationId">Filter by clan location identifier. For list of available locations, refer to getLocations operation.  (optional)</param>
        /// <param name="minMembers">Filter by minimum number of clan members (optional)</param>
        /// <param name="maxMembers">Filter by maximum number of clan members (optional)</param>
        /// <param name="minClanPoints">Filter by minimum amount of clan points. (optional)</param>
        /// <param name="minClanLevel">Filter by minimum clan level. (optional)</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="labelIds">Comma separatered list of label IDs to use for filtering results. (optional)</param>
        /// <returns>Task of List&lt;Clan&gt;</returns>
        public async System.Threading.Tasks.Task<List<Clan>> SearchClansAsync (string name = default(string), string warFrequency = default(string), int? locationId = default(int?), int? minMembers = default(int?), int? maxMembers = default(int?), int? minClanPoints = default(int?), int? minClanLevel = default(int?), int? limit = default(int?), string after = default(string), string before = default(string), string labelIds = default(string))
        {
             CocApi.Client.ApiResponse<List<Clan>> localVarResponse = await SearchClansWithHttpInfoAsync(name, warFrequency, locationId, minMembers, maxMembers, minClanPoints, minClanLevel, limit, after, before, labelIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search clans Search all clans by name and/or filtering the results using various criteria. At least one filtering criteria must be defined and if name is used as part of search, it is required to be at least three characters long. It is not possible to specify ordering for results so clients should not rely on any specific ordering as that may change in the future releases of the API. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Search clans by name. If name is used as part of search query, it needs to be at least three characters long. Name search parameter is interpreted as wild card search, so it may appear anywhere in the clan name.  (optional)</param>
        /// <param name="warFrequency">Filter by clan war frequency (optional)</param>
        /// <param name="locationId">Filter by clan location identifier. For list of available locations, refer to getLocations operation.  (optional)</param>
        /// <param name="minMembers">Filter by minimum number of clan members (optional)</param>
        /// <param name="maxMembers">Filter by maximum number of clan members (optional)</param>
        /// <param name="minClanPoints">Filter by minimum amount of clan points. (optional)</param>
        /// <param name="minClanLevel">Filter by minimum clan level. (optional)</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="labelIds">Comma separatered list of label IDs to use for filtering results. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Clan&gt;)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<List<Clan>>> SearchClansWithHttpInfoAsync (string name = default(string), string warFrequency = default(string), int? locationId = default(int?), int? minMembers = default(int?), int? maxMembers = default(int?), int? minClanPoints = default(int?), int? minClanLevel = default(int?), int? limit = default(int?), string after = default(string), string before = default(string), string labelIds = default(string))
        {
            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (warFrequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "warFrequency", warFrequency));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (minMembers != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "minMembers", minMembers));
            }
            if (maxMembers != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "maxMembers", maxMembers));
            }
            if (minClanPoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "minClanPoints", minClanPoints));
            }
            if (minClanLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "minClanLevel", minClanLevel));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (labelIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "labelIds", labelIds));
            }

            // authentication (JWT) required
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await this.Configuration.GetTokenAsync());
            

            // make the HTTP request
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            stopwatch.Start();
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<Clan>>("/clans", localVarRequestOptions, this.Configuration);
            stopwatch.Stop();

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchClans", localVarResponse);
                if (_exception != null) 
                {
                    QueryException queryException = new QueryException("/clans", localVarRequestOptions, stopwatch, _exception);

                    QueryResults.Add(queryException);

                    OnQueryResult(new QueryResultEventArgs(queryException));

                    throw _exception;
                }
            }

            QuerySuccess querySuccess = new QuerySuccess("/clans", localVarRequestOptions, stopwatch, localVarResponse.StatusCode);

            QueryResults.Add(querySuccess);

            OnQueryResult(new QueryResultEventArgs(querySuccess));

            return localVarResponse;
        }

        /// <summary>
        /// Search clans Search all clans by name and/or filtering the results using various criteria. At least one filtering criteria must be defined and if name is used as part of search, it is required to be at least three characters long. It is not possible to specify ordering for results so clients should not rely on any specific ordering as that may change in the future releases of the API. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Search clans by name. If name is used as part of search query, it needs to be at least three characters long. Name search parameter is interpreted as wild card search, so it may appear anywhere in the clan name.  (optional)</param>
        /// <param name="warFrequency">Filter by clan war frequency (optional)</param>
        /// <param name="locationId">Filter by clan location identifier. For list of available locations, refer to getLocations operation.  (optional)</param>
        /// <param name="minMembers">Filter by minimum number of clan members (optional)</param>
        /// <param name="maxMembers">Filter by maximum number of clan members (optional)</param>
        /// <param name="minClanPoints">Filter by minimum amount of clan points. (optional)</param>
        /// <param name="minClanLevel">Filter by minimum clan level. (optional)</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="labelIds">Comma separatered list of label IDs to use for filtering results. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Clan&gt;)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<List<Clan>>> SearchClansWithHttpInfoOrDefaultAsync (string name = default(string), string warFrequency = default(string), int? locationId = default(int?), int? minMembers = default(int?), int? maxMembers = default(int?), int? minClanPoints = default(int?), int? minClanLevel = default(int?), int? limit = default(int?), string after = default(string), string before = default(string), string labelIds = default(string))
        {
            try
            {
                return await SearchClansWithHttpInfoOrDefaultAsync (name, warFrequency, locationId, minMembers, maxMembers, minClanPoints, minClanLevel, limit, after, before, labelIds);
            }
            catch(ApiException)
            {
                return null;
            }
        }

        /// <summary>
        /// Search clans Search all clans by name and/or filtering the results using various criteria. At least one filtering criteria must be defined and if name is used as part of search, it is required to be at least three characters long. It is not possible to specify ordering for results so clients should not rely on any specific ordering as that may change in the future releases of the API. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Search clans by name. If name is used as part of search query, it needs to be at least three characters long. Name search parameter is interpreted as wild card search, so it may appear anywhere in the clan name.  (optional)</param>
        /// <param name="warFrequency">Filter by clan war frequency (optional)</param>
        /// <param name="locationId">Filter by clan location identifier. For list of available locations, refer to getLocations operation.  (optional)</param>
        /// <param name="minMembers">Filter by minimum number of clan members (optional)</param>
        /// <param name="maxMembers">Filter by maximum number of clan members (optional)</param>
        /// <param name="minClanPoints">Filter by minimum amount of clan points. (optional)</param>
        /// <param name="minClanLevel">Filter by minimum clan level. (optional)</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="labelIds">Comma separatered list of label IDs to use for filtering results. (optional)</param>
        /// <returns>Task of List&lt;Clan&gt;</returns>
        public async System.Threading.Tasks.Task<List<Clan>> SearchClansOrDefaultAsync (string name = default(string), string warFrequency = default(string), int? locationId = default(int?), int? minMembers = default(int?), int? maxMembers = default(int?), int? minClanPoints = default(int?), int? minClanLevel = default(int?), int? limit = default(int?), string after = default(string), string before = default(string), string labelIds = default(string))
        {
             CocApi.Client.ApiResponse<List<Clan>> localVarResponse = await SearchClansWithHttpInfoOrDefaultAsync(name, warFrequency, locationId, minMembers, maxMembers, minClanPoints, minClanLevel, limit, after, before, labelIds);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }

    }
}