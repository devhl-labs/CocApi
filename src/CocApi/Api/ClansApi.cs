/* 
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Collections.Immutable;
using CocApi.Client;
using CocApi.Model;

namespace CocApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ClansApi
    {
        private readonly CocApi.TokenProvider _tokenProvider;
        private CocApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        public delegate System.Threading.Tasks.Task HttpRequestResultEventHandler(object sender, HttpRequestResultEventArgs log);        
        public event HttpRequestResultEventHandler HttpRequestResult;
        private readonly System.Collections.Concurrent.ConcurrentBag<IHttpRequestResult> _httpRequestResults = new System.Collections.Concurrent.ConcurrentBag<IHttpRequestResult>();
        internal void OnHttpRequestResult(HttpRequestResultEventArgs log) => HttpRequestResult?.Invoke(this, log);
        public ImmutableArray<IHttpRequestResult> HttpRequestResults => _httpRequestResults.ToImmutableArray();

        /// <summary>
        /// Initializes a new instance of the <see cref="ClansApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClansApi(CocApi.TokenProvider tokenProvider, TimeSpan? httpRequestTimeOut = null, string basePath = "https://api.clashofclans.com/v1")
        {
            this.Configuration = CocApi.Client.Configuration.MergeConfigurations(
                CocApi.Client.GlobalConfiguration.Instance,
                new CocApi.Client.Configuration { BasePath = basePath, Timeout = ((int?)httpRequestTimeOut?.TotalMilliseconds) ?? 100000  }
            );
            this.Client = new CocApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CocApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CocApi.Client.Configuration.DefaultExceptionFactory;
            this._tokenProvider = tokenProvider;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CocApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CocApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CocApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CocApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }



        /// <summary>
        /// Get clan information Get information about a single clan by clan tag. Clan tags can be found using clan search operation. Note that clan tags start with hash character &#39;#&#39; and that needs to be URL-encoded properly to work in URL, so for example clan tag &#39;#2ABC&#39; would become &#39;%232ABC&#39; in the URL. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of Clan</returns>
        public async System.Threading.Tasks.Task<Clan> GetClanAsync (string clanTag, System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<Clan> localVarResponse = await GetClanResponseAsync(clanTag,  cancellationToken.GetValueOrDefault());
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get clan information Get information about a single clan by clan tag. Clan tags can be found using clan search operation. Note that clan tags start with hash character &#39;#&#39; and that needs to be URL-encoded properly to work in URL, so for example clan tag &#39;#2ABC&#39; would become &#39;%232ABC&#39; in the URL. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ApiResponse (Clan)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<Clan>> GetClanResponseAsync (string clanTag, System.Threading.CancellationToken? cancellationToken = default)
        {
            // verify the required parameter 'clanTag' is set
            if (clanTag == null)
                throw new CocApi.Client.ApiException(400, "Missing required parameter 'clanTag' when calling ClansApi->GetClan");
            string formattedTag = Clash.FormatTag(clanTag);

            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            localVarRequestOptions.PathParameters.Add("clanTag", CocApi.Client.ClientUtils.ParameterToString(formattedTag)); // path parameter  //clanTag

            // authentication (JWT) required
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await _tokenProvider.GetTokenAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false));
            

            // make the HTTP request
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();

            stopwatch.Start();

            ApiResponse<Clan>? localVarResponse = null;

            try
            {
                localVarResponse = await this.AsynchronousClient.GetAsync<Clan>("/clans/{clanTag}", localVarRequestOptions, this.Configuration, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                stopwatch.Stop();

                HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}", localVarRequestOptions, stopwatch.Elapsed, e);

                _httpRequestResults.Add(requestException);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                throw;
            }

            stopwatch.Stop();

            if (localVarResponse.ErrorText == "The request timed-out." || localVarResponse.ErrorText == "The operation has timed out.")
            {
                TimeoutException timeoutException = new TimeoutException(localVarResponse.ErrorText);

                HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}", localVarRequestOptions, stopwatch.Elapsed, timeoutException);

                _httpRequestResults.Add(requestException);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                throw timeoutException;
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClan", localVarResponse);
                if (_exception != null) 
                {
                    HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}", localVarRequestOptions, stopwatch.Elapsed, _exception);

                    _httpRequestResults.Add(requestException);

                    OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                    throw _exception;
                }
            }

            HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/clans/{clanTag}", localVarRequestOptions, stopwatch.Elapsed, localVarResponse.StatusCode);

            _httpRequestResults.Add(requestSuccess);

            OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));

            return localVarResponse;
        }

        /// <summary>
        /// Get clan information Get information about a single clan by clan tag. Clan tags can be found using clan search operation. Note that clan tags start with hash character &#39;#&#39; and that needs to be URL-encoded properly to work in URL, so for example clan tag &#39;#2ABC&#39; would become &#39;%232ABC&#39; in the URL. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ApiResponse (Clan)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<Clan>?> GetClanResponseOrDefaultAsync (string clanTag, System.Threading.CancellationToken? cancellationToken = default)
        {
            try
            {
                return await GetClanResponseAsync (clanTag, cancellationToken.GetValueOrDefault());
            }
            catch(ApiException)
            {
                return null;
            }
            catch (TimeoutException)
            {
                return null;
            }
        }

        /// <summary>
        /// Get clan information Get information about a single clan by clan tag. Clan tags can be found using clan search operation. Note that clan tags start with hash character &#39;#&#39; and that needs to be URL-encoded properly to work in URL, so for example clan tag &#39;#2ABC&#39; would become &#39;%232ABC&#39; in the URL. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of Clan</returns>
        public async System.Threading.Tasks.Task<Clan?> GetClanOrDefaultAsync (string clanTag, System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<Clan>? localVarResponse = await GetClanResponseOrDefaultAsync(clanTag, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }



        /// <summary>
        /// List clan members List clan members.
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of List&lt;ClanMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClanMember>> GetClanMembersAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string), System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<List<ClanMember>> localVarResponse = await GetClanMembersResponseAsync(clanTag, limit, after, before,  cancellationToken.GetValueOrDefault());
             return localVarResponse.Data;
        }

        /// <summary>
        /// List clan members List clan members.
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ClanMember&gt;)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<List<ClanMember>>> GetClanMembersResponseAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string), System.Threading.CancellationToken? cancellationToken = default)
        {
            // verify the required parameter 'clanTag' is set
            if (clanTag == null)
                throw new CocApi.Client.ApiException(400, "Missing required parameter 'clanTag' when calling ClansApi->GetClanMembers");
            string formattedTag = Clash.FormatTag(clanTag);

            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            localVarRequestOptions.PathParameters.Add("clanTag", CocApi.Client.ClientUtils.ParameterToString(formattedTag)); // path parameter  //clanTag
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            // authentication (JWT) required
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await _tokenProvider.GetTokenAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false));
            

            // make the HTTP request
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();

            stopwatch.Start();

            ApiResponse<List<ClanMember>>? localVarResponse = null;

            try
            {
                localVarResponse = await this.AsynchronousClient.GetAsync<List<ClanMember>>("/clans/{clanTag}/members", localVarRequestOptions, this.Configuration, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                stopwatch.Stop();

                HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}/members", localVarRequestOptions, stopwatch.Elapsed, e);

                _httpRequestResults.Add(requestException);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                throw;
            }

            stopwatch.Stop();

            if (localVarResponse.ErrorText == "The request timed-out." || localVarResponse.ErrorText == "The operation has timed out.")
            {
                TimeoutException timeoutException = new TimeoutException(localVarResponse.ErrorText);

                HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}/members", localVarRequestOptions, stopwatch.Elapsed, timeoutException);

                _httpRequestResults.Add(requestException);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                throw timeoutException;
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClanMembers", localVarResponse);
                if (_exception != null) 
                {
                    HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}/members", localVarRequestOptions, stopwatch.Elapsed, _exception);

                    _httpRequestResults.Add(requestException);

                    OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                    throw _exception;
                }
            }

            HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/clans/{clanTag}/members", localVarRequestOptions, stopwatch.Elapsed, localVarResponse.StatusCode);

            _httpRequestResults.Add(requestSuccess);

            OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));

            return localVarResponse;
        }

        /// <summary>
        /// List clan members List clan members.
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;ClanMember&gt;)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<List<ClanMember>>?> GetClanMembersResponseOrDefaultAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string), System.Threading.CancellationToken? cancellationToken = default)
        {
            try
            {
                return await GetClanMembersResponseAsync (clanTag, limit, after, before, cancellationToken.GetValueOrDefault());
            }
            catch(ApiException)
            {
                return null;
            }
            catch (TimeoutException)
            {
                return null;
            }
        }

        /// <summary>
        /// List clan members List clan members.
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of List&lt;ClanMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClanMember>?> GetClanMembersOrDefaultAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string), System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<List<ClanMember>>? localVarResponse = await GetClanMembersResponseOrDefaultAsync(clanTag, limit, after, before, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }



        /// <summary>
        /// Retrieve information about clan&#39;s current clan war league group Retrieve information about clan&#39;s current clan war league group
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ClanWarLeagueGroup</returns>
        public async System.Threading.Tasks.Task<ClanWarLeagueGroup> GetClanWarLeagueGroupAsync (string clanTag, System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<ClanWarLeagueGroup> localVarResponse = await GetClanWarLeagueGroupResponseAsync(clanTag,  cancellationToken.GetValueOrDefault());
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information about clan&#39;s current clan war league group Retrieve information about clan&#39;s current clan war league group
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ApiResponse (ClanWarLeagueGroup)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWarLeagueGroup>> GetClanWarLeagueGroupResponseAsync (string clanTag, System.Threading.CancellationToken? cancellationToken = default)
        {
            // verify the required parameter 'clanTag' is set
            if (clanTag == null)
                throw new CocApi.Client.ApiException(400, "Missing required parameter 'clanTag' when calling ClansApi->GetClanWarLeagueGroup");
            string formattedTag = Clash.FormatTag(clanTag);

            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            localVarRequestOptions.PathParameters.Add("clanTag", CocApi.Client.ClientUtils.ParameterToString(formattedTag)); // path parameter  //clanTag

            // authentication (JWT) required
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await _tokenProvider.GetTokenAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false));
            

            // make the HTTP request
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();

            stopwatch.Start();

            ApiResponse<ClanWarLeagueGroup>? localVarResponse = null;

            try
            {
                localVarResponse = await this.AsynchronousClient.GetAsync<ClanWarLeagueGroup>("/clans/{clanTag}/currentwar/leaguegroup", localVarRequestOptions, this.Configuration, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                stopwatch.Stop();

                HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}/currentwar/leaguegroup", localVarRequestOptions, stopwatch.Elapsed, e);

                _httpRequestResults.Add(requestException);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                throw;
            }

            stopwatch.Stop();

            if (localVarResponse.ErrorText == "The request timed-out." || localVarResponse.ErrorText == "The operation has timed out.")
            {
                TimeoutException timeoutException = new TimeoutException(localVarResponse.ErrorText);

                HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}/currentwar/leaguegroup", localVarRequestOptions, stopwatch.Elapsed, timeoutException);

                _httpRequestResults.Add(requestException);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                throw timeoutException;
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClanWarLeagueGroup", localVarResponse);
                if (_exception != null) 
                {
                    HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}/currentwar/leaguegroup", localVarRequestOptions, stopwatch.Elapsed, _exception);

                    _httpRequestResults.Add(requestException);

                    OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                    throw _exception;
                }
            }

            HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/clans/{clanTag}/currentwar/leaguegroup", localVarRequestOptions, stopwatch.Elapsed, localVarResponse.StatusCode);

            _httpRequestResults.Add(requestSuccess);

            OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information about clan&#39;s current clan war league group Retrieve information about clan&#39;s current clan war league group
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ApiResponse (ClanWarLeagueGroup)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWarLeagueGroup>?> GetClanWarLeagueGroupResponseOrDefaultAsync (string clanTag, System.Threading.CancellationToken? cancellationToken = default)
        {
            try
            {
                return await GetClanWarLeagueGroupResponseAsync (clanTag, cancellationToken.GetValueOrDefault());
            }
            catch(ApiException)
            {
                return null;
            }
            catch (TimeoutException)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve information about clan&#39;s current clan war league group Retrieve information about clan&#39;s current clan war league group
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ClanWarLeagueGroup</returns>
        public async System.Threading.Tasks.Task<ClanWarLeagueGroup?> GetClanWarLeagueGroupOrDefaultAsync (string clanTag, System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<ClanWarLeagueGroup>? localVarResponse = await GetClanWarLeagueGroupResponseOrDefaultAsync(clanTag, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }



        /// <summary>
        /// Retrieve information about individual clan war league war Retrieve information about individual clan war league war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warTag">Tag of the war.</param>
        /// <returns>Task of ClanWar</returns>
        public async System.Threading.Tasks.Task<ClanWar> GetClanWarLeagueWarAsync (string warTag, System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<ClanWar> localVarResponse = await GetClanWarLeagueWarResponseAsync(warTag,  cancellationToken.GetValueOrDefault());
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information about individual clan war league war Retrieve information about individual clan war league war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warTag">Tag of the war.</param>
        /// <returns>Task of ApiResponse (ClanWar)</returns>
        internal async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWar>> getClanWarLeagueWarResponseAsync (string warTag, System.Threading.CancellationToken? cancellationToken = default)
        {
            // verify the required parameter 'warTag' is set
            if (warTag == null)
                throw new CocApi.Client.ApiException(400, "Missing required parameter 'warTag' when calling ClansApi->GetClanWarLeagueWar");
            string formattedTag = Clash.FormatTag(warTag);

            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            localVarRequestOptions.PathParameters.Add("warTag", CocApi.Client.ClientUtils.ParameterToString(formattedTag)); // path parameter  //warTag

            // authentication (JWT) required
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await _tokenProvider.GetTokenAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false));
            

            // make the HTTP request
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();

            stopwatch.Start();

            ApiResponse<ClanWar>? localVarResponse = null;

            try
            {
                localVarResponse = await this.AsynchronousClient.GetAsync<ClanWar>("/clanwarleagues/wars/{warTag}", localVarRequestOptions, this.Configuration, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                stopwatch.Stop();

                HttpRequestException requestException = new HttpRequestException("/clanwarleagues/wars/{warTag}", localVarRequestOptions, stopwatch.Elapsed, e);

                _httpRequestResults.Add(requestException);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                throw;
            }

            stopwatch.Stop();

            if (localVarResponse.ErrorText == "The request timed-out." || localVarResponse.ErrorText == "The operation has timed out.")
            {
                TimeoutException timeoutException = new TimeoutException(localVarResponse.ErrorText);

                HttpRequestException requestException = new HttpRequestException("/clanwarleagues/wars/{warTag}", localVarRequestOptions, stopwatch.Elapsed, timeoutException);

                _httpRequestResults.Add(requestException);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                throw timeoutException;
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClanWarLeagueWar", localVarResponse);
                if (_exception != null) 
                {
                    HttpRequestException requestException = new HttpRequestException("/clanwarleagues/wars/{warTag}", localVarRequestOptions, stopwatch.Elapsed, _exception);

                    _httpRequestResults.Add(requestException);

                    OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                    throw _exception;
                }
            }

            HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/clanwarleagues/wars/{warTag}", localVarRequestOptions, stopwatch.Elapsed, localVarResponse.StatusCode);

            _httpRequestResults.Add(requestSuccess);

            OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information about individual clan war league war Retrieve information about individual clan war league war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warTag">Tag of the war.</param>
        /// <returns>Task of ApiResponse (ClanWar)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWar>?> GetClanWarLeagueWarResponseOrDefaultAsync (string warTag, System.Threading.CancellationToken? cancellationToken = default)
        {
            try
            {
                return await GetClanWarLeagueWarResponseAsync (warTag, cancellationToken.GetValueOrDefault());
            }
            catch(ApiException)
            {
                return null;
            }
            catch (TimeoutException)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve information about individual clan war league war Retrieve information about individual clan war league war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="warTag">Tag of the war.</param>
        /// <returns>Task of ClanWar</returns>
        public async System.Threading.Tasks.Task<ClanWar?> GetClanWarLeagueWarOrDefaultAsync (string warTag, System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<ClanWar>? localVarResponse = await GetClanWarLeagueWarResponseOrDefaultAsync(warTag, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }



        /// <summary>
        /// Retrieve clan&#39;s clan war log Retrieve clan&#39;s clan war log
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of ClanWarLog</returns>
        public async System.Threading.Tasks.Task<ClanWarLog> GetClanWarLogAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string), System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<ClanWarLog> localVarResponse = await GetClanWarLogResponseAsync(clanTag, limit, after, before,  cancellationToken.GetValueOrDefault());
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve clan&#39;s clan war log Retrieve clan&#39;s clan war log
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of ApiResponse (ClanWarLog)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWarLog>> GetClanWarLogResponseAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string), System.Threading.CancellationToken? cancellationToken = default)
        {
            // verify the required parameter 'clanTag' is set
            if (clanTag == null)
                throw new CocApi.Client.ApiException(400, "Missing required parameter 'clanTag' when calling ClansApi->GetClanWarLog");
            string formattedTag = Clash.FormatTag(clanTag);

            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            localVarRequestOptions.PathParameters.Add("clanTag", CocApi.Client.ClientUtils.ParameterToString(formattedTag)); // path parameter  //clanTag
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }

            // authentication (JWT) required
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await _tokenProvider.GetTokenAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false));
            

            // make the HTTP request
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();

            stopwatch.Start();

            ApiResponse<ClanWarLog>? localVarResponse = null;

            try
            {
                localVarResponse = await this.AsynchronousClient.GetAsync<ClanWarLog>("/clans/{clanTag}/warlog", localVarRequestOptions, this.Configuration, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                stopwatch.Stop();

                HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}/warlog", localVarRequestOptions, stopwatch.Elapsed, e);

                _httpRequestResults.Add(requestException);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                throw;
            }

            stopwatch.Stop();

            if (localVarResponse.ErrorText == "The request timed-out." || localVarResponse.ErrorText == "The operation has timed out.")
            {
                TimeoutException timeoutException = new TimeoutException(localVarResponse.ErrorText);

                HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}/warlog", localVarRequestOptions, stopwatch.Elapsed, timeoutException);

                _httpRequestResults.Add(requestException);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                throw timeoutException;
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetClanWarLog", localVarResponse);
                if (_exception != null) 
                {
                    HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}/warlog", localVarRequestOptions, stopwatch.Elapsed, _exception);

                    _httpRequestResults.Add(requestException);

                    OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                    throw _exception;
                }
            }

            HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/clans/{clanTag}/warlog", localVarRequestOptions, stopwatch.Elapsed, localVarResponse.StatusCode);

            _httpRequestResults.Add(requestSuccess);

            OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve clan&#39;s clan war log Retrieve clan&#39;s clan war log
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of ApiResponse (ClanWarLog)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWarLog>?> GetClanWarLogResponseOrDefaultAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string), System.Threading.CancellationToken? cancellationToken = default)
        {
            try
            {
                return await GetClanWarLogResponseAsync (clanTag, limit, after, before, cancellationToken.GetValueOrDefault());
            }
            catch(ApiException)
            {
                return null;
            }
            catch (TimeoutException)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve clan&#39;s clan war log Retrieve clan&#39;s clan war log
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <returns>Task of ClanWarLog</returns>
        public async System.Threading.Tasks.Task<ClanWarLog?> GetClanWarLogOrDefaultAsync (string clanTag, int? limit = default(int?), string after = default(string), string before = default(string), System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<ClanWarLog>? localVarResponse = await GetClanWarLogResponseOrDefaultAsync(clanTag, limit, after, before, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }



        /// <summary>
        /// Retrieve information about clan&#39;s current clan war Retrieve information about clan&#39;s current clan war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ClanWar</returns>
        public async System.Threading.Tasks.Task<ClanWar> GetCurrentWarAsync (string clanTag, System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<ClanWar> localVarResponse = await GetCurrentWarResponseAsync(clanTag,  cancellationToken.GetValueOrDefault());
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve information about clan&#39;s current clan war Retrieve information about clan&#39;s current clan war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ApiResponse (ClanWar)</returns>
        internal async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWar>> getCurrentWarResponseAsync (string clanTag, System.Threading.CancellationToken? cancellationToken = default)
        {
            // verify the required parameter 'clanTag' is set
            if (clanTag == null)
                throw new CocApi.Client.ApiException(400, "Missing required parameter 'clanTag' when calling ClansApi->GetCurrentWar");
            string formattedTag = Clash.FormatTag(clanTag);

            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            localVarRequestOptions.PathParameters.Add("clanTag", CocApi.Client.ClientUtils.ParameterToString(formattedTag)); // path parameter  //clanTag

            // authentication (JWT) required
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await _tokenProvider.GetTokenAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false));
            

            // make the HTTP request
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();

            stopwatch.Start();

            ApiResponse<ClanWar>? localVarResponse = null;

            try
            {
                localVarResponse = await this.AsynchronousClient.GetAsync<ClanWar>("/clans/{clanTag}/currentwar", localVarRequestOptions, this.Configuration, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                stopwatch.Stop();

                HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}/currentwar", localVarRequestOptions, stopwatch.Elapsed, e);

                _httpRequestResults.Add(requestException);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                throw;
            }

            stopwatch.Stop();

            if (localVarResponse.ErrorText == "The request timed-out." || localVarResponse.ErrorText == "The operation has timed out.")
            {
                TimeoutException timeoutException = new TimeoutException(localVarResponse.ErrorText);

                HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}/currentwar", localVarRequestOptions, stopwatch.Elapsed, timeoutException);

                _httpRequestResults.Add(requestException);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                throw timeoutException;
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetCurrentWar", localVarResponse);
                if (_exception != null) 
                {
                    HttpRequestException requestException = new HttpRequestException("/clans/{clanTag}/currentwar", localVarRequestOptions, stopwatch.Elapsed, _exception);

                    _httpRequestResults.Add(requestException);

                    OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                    throw _exception;
                }
            }

            HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/clans/{clanTag}/currentwar", localVarRequestOptions, stopwatch.Elapsed, localVarResponse.StatusCode);

            _httpRequestResults.Add(requestSuccess);

            OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve information about clan&#39;s current clan war Retrieve information about clan&#39;s current clan war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ApiResponse (ClanWar)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanWar>?> GetCurrentWarResponseOrDefaultAsync (string clanTag, System.Threading.CancellationToken? cancellationToken = default)
        {
            try
            {
                return await GetCurrentWarResponseAsync (clanTag, cancellationToken.GetValueOrDefault());
            }
            catch(ApiException)
            {
                return null;
            }
            catch (TimeoutException)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieve information about clan&#39;s current clan war Retrieve information about clan&#39;s current clan war
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="clanTag">Tag of the clan.</param>
        /// <returns>Task of ClanWar</returns>
        public async System.Threading.Tasks.Task<ClanWar?> GetCurrentWarOrDefaultAsync (string clanTag, System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<ClanWar>? localVarResponse = await GetCurrentWarResponseOrDefaultAsync(clanTag, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }



        /// <summary>
        /// Search clans Search all clans by name and/or filtering the results using various criteria. At least one filtering criteria must be defined and if name is used as part of search, it is required to be at least three characters long. It is not possible to specify ordering for results so clients should not rely on any specific ordering as that may change in the future releases of the API. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Search clans by name. If name is used as part of search query, it needs to be at least three characters long. Name search parameter is interpreted as wild card search, so it may appear anywhere in the clan name.  (optional)</param>
        /// <param name="warFrequency">Filter by clan war frequency (optional)</param>
        /// <param name="locationId">Filter by clan location identifier. For list of available locations, refer to getLocations operation.  (optional)</param>
        /// <param name="minMembers">Filter by minimum number of clan members (optional)</param>
        /// <param name="maxMembers">Filter by maximum number of clan members (optional)</param>
        /// <param name="minClanPoints">Filter by minimum amount of clan points. (optional)</param>
        /// <param name="minClanLevel">Filter by minimum clan level. (optional)</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="labelIds">Comma separatered list of label IDs to use for filtering results. (optional)</param>
        /// <returns>Task of ClanList</returns>
        public async System.Threading.Tasks.Task<ClanList> SearchClansAsync (string name = default(string), string warFrequency = default(string), int? locationId = default(int?), int? minMembers = default(int?), int? maxMembers = default(int?), int? minClanPoints = default(int?), int? minClanLevel = default(int?), int? limit = default(int?), string after = default(string), string before = default(string), string labelIds = default(string), System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<ClanList> localVarResponse = await SearchClansResponseAsync(name, warFrequency, locationId, minMembers, maxMembers, minClanPoints, minClanLevel, limit, after, before, labelIds,  cancellationToken.GetValueOrDefault());
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search clans Search all clans by name and/or filtering the results using various criteria. At least one filtering criteria must be defined and if name is used as part of search, it is required to be at least three characters long. It is not possible to specify ordering for results so clients should not rely on any specific ordering as that may change in the future releases of the API. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Search clans by name. If name is used as part of search query, it needs to be at least three characters long. Name search parameter is interpreted as wild card search, so it may appear anywhere in the clan name.  (optional)</param>
        /// <param name="warFrequency">Filter by clan war frequency (optional)</param>
        /// <param name="locationId">Filter by clan location identifier. For list of available locations, refer to getLocations operation.  (optional)</param>
        /// <param name="minMembers">Filter by minimum number of clan members (optional)</param>
        /// <param name="maxMembers">Filter by maximum number of clan members (optional)</param>
        /// <param name="minClanPoints">Filter by minimum amount of clan points. (optional)</param>
        /// <param name="minClanLevel">Filter by minimum clan level. (optional)</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="labelIds">Comma separatered list of label IDs to use for filtering results. (optional)</param>
        /// <returns>Task of ApiResponse (ClanList)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanList>> SearchClansResponseAsync (string name = default(string), string warFrequency = default(string), int? locationId = default(int?), int? minMembers = default(int?), int? maxMembers = default(int?), int? minClanPoints = default(int?), int? minClanLevel = default(int?), int? limit = default(int?), string after = default(string), string before = default(string), string labelIds = default(string), System.Threading.CancellationToken? cancellationToken = default)
        {
            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }
            if (warFrequency != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "warFrequency", warFrequency));
            }
            if (locationId != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "locationId", locationId));
            }
            if (minMembers != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "minMembers", minMembers));
            }
            if (maxMembers != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "maxMembers", maxMembers));
            }
            if (minClanPoints != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "minClanPoints", minClanPoints));
            }
            if (minClanLevel != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "minClanLevel", minClanLevel));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (after != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "after", after));
            }
            if (before != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "before", before));
            }
            if (labelIds != null)
            {
                localVarRequestOptions.QueryParameters.Add(CocApi.Client.ClientUtils.ParameterToMultiMap("", "labelIds", labelIds));
            }

            // authentication (JWT) required
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await _tokenProvider.GetTokenAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false));
            

            // make the HTTP request
            System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();

            stopwatch.Start();

            ApiResponse<ClanList>? localVarResponse = null;

            try
            {
                localVarResponse = await this.AsynchronousClient.GetAsync<ClanList>("/clans", localVarRequestOptions, this.Configuration, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
            }
            catch (Exception e)
            {
                stopwatch.Stop();

                HttpRequestException requestException = new HttpRequestException("/clans", localVarRequestOptions, stopwatch.Elapsed, e);

                _httpRequestResults.Add(requestException);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                throw;
            }

            stopwatch.Stop();

            if (localVarResponse.ErrorText == "The request timed-out." || localVarResponse.ErrorText == "The operation has timed out.")
            {
                TimeoutException timeoutException = new TimeoutException(localVarResponse.ErrorText);

                HttpRequestException requestException = new HttpRequestException("/clans", localVarRequestOptions, stopwatch.Elapsed, timeoutException);

                _httpRequestResults.Add(requestException);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                throw timeoutException;
            }

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SearchClans", localVarResponse);
                if (_exception != null) 
                {
                    HttpRequestException requestException = new HttpRequestException("/clans", localVarRequestOptions, stopwatch.Elapsed, _exception);

                    _httpRequestResults.Add(requestException);

                    OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

                    throw _exception;
                }
            }

            HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/clans", localVarRequestOptions, stopwatch.Elapsed, localVarResponse.StatusCode);

            _httpRequestResults.Add(requestSuccess);

            OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));

            return localVarResponse;
        }

        /// <summary>
        /// Search clans Search all clans by name and/or filtering the results using various criteria. At least one filtering criteria must be defined and if name is used as part of search, it is required to be at least three characters long. It is not possible to specify ordering for results so clients should not rely on any specific ordering as that may change in the future releases of the API. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Search clans by name. If name is used as part of search query, it needs to be at least three characters long. Name search parameter is interpreted as wild card search, so it may appear anywhere in the clan name.  (optional)</param>
        /// <param name="warFrequency">Filter by clan war frequency (optional)</param>
        /// <param name="locationId">Filter by clan location identifier. For list of available locations, refer to getLocations operation.  (optional)</param>
        /// <param name="minMembers">Filter by minimum number of clan members (optional)</param>
        /// <param name="maxMembers">Filter by maximum number of clan members (optional)</param>
        /// <param name="minClanPoints">Filter by minimum amount of clan points. (optional)</param>
        /// <param name="minClanLevel">Filter by minimum clan level. (optional)</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="labelIds">Comma separatered list of label IDs to use for filtering results. (optional)</param>
        /// <returns>Task of ApiResponse (ClanList)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<ClanList>?> SearchClansResponseOrDefaultAsync (string name = default(string), string warFrequency = default(string), int? locationId = default(int?), int? minMembers = default(int?), int? maxMembers = default(int?), int? minClanPoints = default(int?), int? minClanLevel = default(int?), int? limit = default(int?), string after = default(string), string before = default(string), string labelIds = default(string), System.Threading.CancellationToken? cancellationToken = default)
        {
            try
            {
                return await SearchClansResponseAsync (name, warFrequency, locationId, minMembers, maxMembers, minClanPoints, minClanLevel, limit, after, before, labelIds, cancellationToken.GetValueOrDefault());
            }
            catch(ApiException)
            {
                return null;
            }
            catch (TimeoutException)
            {
                return null;
            }
        }

        /// <summary>
        /// Search clans Search all clans by name and/or filtering the results using various criteria. At least one filtering criteria must be defined and if name is used as part of search, it is required to be at least three characters long. It is not possible to specify ordering for results so clients should not rely on any specific ordering as that may change in the future releases of the API. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Search clans by name. If name is used as part of search query, it needs to be at least three characters long. Name search parameter is interpreted as wild card search, so it may appear anywhere in the clan name.  (optional)</param>
        /// <param name="warFrequency">Filter by clan war frequency (optional)</param>
        /// <param name="locationId">Filter by clan location identifier. For list of available locations, refer to getLocations operation.  (optional)</param>
        /// <param name="minMembers">Filter by minimum number of clan members (optional)</param>
        /// <param name="maxMembers">Filter by maximum number of clan members (optional)</param>
        /// <param name="minClanPoints">Filter by minimum amount of clan points. (optional)</param>
        /// <param name="minClanLevel">Filter by minimum clan level. (optional)</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="labelIds">Comma separatered list of label IDs to use for filtering results. (optional)</param>
        /// <returns>Task of ClanList</returns>
        public async System.Threading.Tasks.Task<ClanList?> SearchClansOrDefaultAsync (string name = default(string), string warFrequency = default(string), int? locationId = default(int?), int? minMembers = default(int?), int? maxMembers = default(int?), int? minClanPoints = default(int?), int? minClanLevel = default(int?), int? limit = default(int?), string after = default(string), string before = default(string), string labelIds = default(string), System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<ClanList>? localVarResponse = await SearchClansResponseOrDefaultAsync(name, warFrequency, locationId, minMembers, maxMembers, minClanPoints, minClanLevel, limit, after, before, labelIds, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }

    }
}