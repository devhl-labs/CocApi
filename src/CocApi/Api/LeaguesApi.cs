/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using CocApi.Client;
using CocApi.Model;

namespace CocApi.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ILeaguesApi
    {
        /// <summary>
        /// Get league information
        /// </summary>
        /// <remarks>
        /// Get league information
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (League)</returns>
        System.Threading.Tasks.Task<ApiResponse<League>> FetchLeagueResponseAsync(string leagueId, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get league information
        /// </summary>
        /// <remarks>
        /// Get league information
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (League)</returns>
        System.Threading.Tasks.Task<League> FetchLeagueAsync(string leagueId, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get league information
        /// </summary>
        /// <remarks>
        /// Get league information
        /// </remarks>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (League?)</returns>
        System.Threading.Tasks.Task<League?> FetchLeagueOrDefaultAsync(string leagueId, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// Get league season rankings
        /// </summary>
        /// <remarks>
        /// Get league season rankings. Note that league season information is available only for Legend League. 
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="seasonId">Identifier of the season.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerRankingList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PlayerRankingList>> FetchLeagueSeasonRankingsResponseAsync(string leagueId, string seasonId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get league season rankings
        /// </summary>
        /// <remarks>
        /// Get league season rankings. Note that league season information is available only for Legend League. 
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="seasonId">Identifier of the season.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerRankingList)</returns>
        System.Threading.Tasks.Task<PlayerRankingList> FetchLeagueSeasonRankingsAsync(string leagueId, string seasonId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get league season rankings
        /// </summary>
        /// <remarks>
        /// Get league season rankings. Note that league season information is available only for Legend League. 
        /// </remarks>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="seasonId">Identifier of the season.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerRankingList?)</returns>
        System.Threading.Tasks.Task<PlayerRankingList?> FetchLeagueSeasonRankingsOrDefaultAsync(string leagueId, string seasonId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// Get league seasons
        /// </summary>
        /// <remarks>
        /// Get league seasons. Note that league season information is available only for Legend League. 
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeagueSeasonList)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeagueSeasonList>> FetchLeagueSeasonsResponseAsync(string leagueId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get league seasons
        /// </summary>
        /// <remarks>
        /// Get league seasons. Note that league season information is available only for Legend League. 
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeagueSeasonList)</returns>
        System.Threading.Tasks.Task<LeagueSeasonList> FetchLeagueSeasonsAsync(string leagueId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get league seasons
        /// </summary>
        /// <remarks>
        /// Get league seasons. Note that league season information is available only for Legend League. 
        /// </remarks>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeagueSeasonList?)</returns>
        System.Threading.Tasks.Task<LeagueSeasonList?> FetchLeagueSeasonsOrDefaultAsync(string leagueId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// List leagues
        /// </summary>
        /// <remarks>
        /// List leagues
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeagueList)</returns>
        System.Threading.Tasks.Task<ApiResponse<LeagueList>> FetchLeaguesResponseAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// List leagues
        /// </summary>
        /// <remarks>
        /// List leagues
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeagueList)</returns>
        System.Threading.Tasks.Task<LeagueList> FetchLeaguesAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// List leagues
        /// </summary>
        /// <remarks>
        /// List leagues
        /// </remarks>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeagueList?)</returns>
        System.Threading.Tasks.Task<LeagueList?> FetchLeaguesOrDefaultAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// Get war league information
        /// </summary>
        /// <remarks>
        /// Get war league information
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WarLeague)</returns>
        System.Threading.Tasks.Task<ApiResponse<WarLeague>> FetchWarLeagueResponseAsync(string leagueId, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get war league information
        /// </summary>
        /// <remarks>
        /// Get war league information
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WarLeague)</returns>
        System.Threading.Tasks.Task<WarLeague> FetchWarLeagueAsync(string leagueId, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// Get war league information
        /// </summary>
        /// <remarks>
        /// Get war league information
        /// </remarks>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WarLeague?)</returns>
        System.Threading.Tasks.Task<WarLeague?> FetchWarLeagueOrDefaultAsync(string leagueId, System.Threading.CancellationToken? cancellationToken = null);
        /// <summary>
        /// List war leagues
        /// </summary>
        /// <remarks>
        /// List war leagues
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WarLeagueList)</returns>
        System.Threading.Tasks.Task<ApiResponse<WarLeagueList>> FetchWarLeaguesResponseAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// List war leagues
        /// </summary>
        /// <remarks>
        /// List war leagues
        /// </remarks>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WarLeagueList)</returns>
        System.Threading.Tasks.Task<WarLeagueList> FetchWarLeaguesAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
        
        /// <summary>
        /// List war leagues
        /// </summary>
        /// <remarks>
        /// List war leagues
        /// </remarks>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WarLeagueList?)</returns>
        System.Threading.Tasks.Task<WarLeagueList?> FetchWarLeaguesOrDefaultAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null);
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class LeaguesApi : ILeaguesApi
    {
        private readonly System.Net.Http.HttpClient _httpClient;

        private void OnHttpRequestResult(HttpRequestResultEventArgs log) => CocApi.Requests.OnHttpRequestResult(this, log);

        public delegate System.Threading.Tasks.Task HttpRequestResultEventHandler(object sender, HttpRequestResultEventArgs log);

        /// <summary>
        /// Initializes a new instance of the <see cref="LeaguesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public LeaguesApi(System.Net.Http.HttpClient httpClient, TokenProvider tokenProvider)
        {
            _httpClient = httpClient;
            GetTokenAsync = tokenProvider.GetAsync;
        }

        /// <summary>
        /// Returns the token to be used in the api query
        /// </summary>
        public Func<System.Threading.CancellationToken?, System.Threading.Tasks.ValueTask<string>>? GetTokenAsync { get; set; }  


        /// <summary>
        /// Get league information Get league information
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of League</returns>
        public async System.Threading.Tasks.Task<League> FetchLeagueAsync(string leagueId, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<League> result = await FetchLeagueResponseAsync(leagueId, cancellationToken).ConfigureAwait(false);
            return result.Content ?? throw new NullReferenceException();
        }

        /// <summary>
        /// Get league information Get league information
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of League</returns>
        public async System.Threading.Tasks.Task<League?> FetchLeagueOrDefaultAsync(string leagueId, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<League> result = await FetchLeagueResponseAsync(leagueId, cancellationToken).ConfigureAwait(false);
            
            return result.IsSuccessStatusCode
                ? result.Content
                : null;
        } 

        /// <summary>
        /// Get league information Get league information
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (League)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<League>> FetchLeagueResponseAsync(string leagueId, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (leagueId == null)
                throw new ArgumentNullException(nameof(leagueId));
            
            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/leagues/{leagueId}";
            path = path.Replace("{leagueId}", Uri.EscapeDataString(leagueId));



            path = $"{path}?";
            

            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");




            // authentication (JWT) required
            //isKeyInHeader
            string? token = GetTokenAsync != null
                ? await GetTokenAsync(cancellationToken).ConfigureAwait(false)
                : null;

            if (token != null)
                request.Headers.Add("authorization", $"Bearer {token}");            


            request.Method = new System.Net.Http.HttpMethod("GET");

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            DateTime start = DateTime.UtcNow;

            DateTime end;

            HttpStatusCode httpStatusCode = HttpStatusCode.OK;

            string? reasonPhrase;

            string responseContent = string.Empty;

            ApiResponse<League> apiResponse;

            try
            {
                using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                httpStatusCode = responseMessage.StatusCode;

                reasonPhrase = responseMessage.ReasonPhrase;

                responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                end = DateTime.UtcNow;

                apiResponse = new(responseMessage, responseContent);
            }
            catch (Exception e)
            {
                end = DateTime.UtcNow;

                HttpRequestException httpRequestException = new("/leagues/{leagueId}", path, end - start, e);

                OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestException));

                throw httpRequestException;
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<League>(apiResponse.RawContent, CocApi.Clash.JsonSerializerSettings);
                
                HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/leagues/{leagueId}", path, end - start, httpStatusCode);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));
            }
            else
            {
                HttpRequestNonSuccess httpRequestNonSuccess = new("/leagues/{leagueId}", path, end - start, httpStatusCode, reasonPhrase);

                OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestNonSuccess));
            }

            return apiResponse;
        }

        /// <summary>
        /// Get league season rankings Get league season rankings. Note that league season information is available only for Legend League. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="seasonId">Identifier of the season.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerRankingList</returns>
        public async System.Threading.Tasks.Task<PlayerRankingList> FetchLeagueSeasonRankingsAsync(string leagueId, string seasonId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<PlayerRankingList> result = await FetchLeagueSeasonRankingsResponseAsync(leagueId, seasonId, limit, after, before, cancellationToken).ConfigureAwait(false);
            return result.Content ?? throw new NullReferenceException();
        }

        /// <summary>
        /// Get league season rankings Get league season rankings. Note that league season information is available only for Legend League. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="seasonId">Identifier of the season.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of PlayerRankingList</returns>
        public async System.Threading.Tasks.Task<PlayerRankingList?> FetchLeagueSeasonRankingsOrDefaultAsync(string leagueId, string seasonId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<PlayerRankingList> result = await FetchLeagueSeasonRankingsResponseAsync(leagueId, seasonId, limit, after, before, cancellationToken).ConfigureAwait(false);
            
            return result.IsSuccessStatusCode
                ? result.Content
                : null;
        } 

        /// <summary>
        /// Get league season rankings Get league season rankings. Note that league season information is available only for Legend League. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="seasonId">Identifier of the season.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (PlayerRankingList)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<PlayerRankingList>> FetchLeagueSeasonRankingsResponseAsync(string leagueId, string seasonId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (leagueId == null)
                throw new ArgumentNullException(nameof(leagueId)); 
            if (seasonId == null)
                throw new ArgumentNullException(nameof(seasonId));
            
            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/leagues/{leagueId}/seasons/{seasonId}";
            path = path.Replace("{leagueId}", Uri.EscapeDataString(leagueId));

            path = path.Replace("{seasonId}", Uri.EscapeDataString(seasonId));



            path = $"{path}?";
            
            if (limit != null)
                path = $"{path}limit={Uri.EscapeDataString(limit.ToString()!)}&";  

            if (after != null)
                path = $"{path}after={Uri.EscapeDataString(after.ToString()!)}&";  

            if (before != null)
                path = $"{path}before={Uri.EscapeDataString(before.ToString()!)}&";  


            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");




            // authentication (JWT) required
            //isKeyInHeader
            string? token = GetTokenAsync != null
                ? await GetTokenAsync(cancellationToken).ConfigureAwait(false)
                : null;

            if (token != null)
                request.Headers.Add("authorization", $"Bearer {token}");            


            request.Method = new System.Net.Http.HttpMethod("GET");

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            DateTime start = DateTime.UtcNow;

            DateTime end;

            HttpStatusCode httpStatusCode = HttpStatusCode.OK;

            string? reasonPhrase;

            string responseContent = string.Empty;

            ApiResponse<PlayerRankingList> apiResponse;

            try
            {
                using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                httpStatusCode = responseMessage.StatusCode;

                reasonPhrase = responseMessage.ReasonPhrase;

                responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                end = DateTime.UtcNow;

                apiResponse = new(responseMessage, responseContent);
            }
            catch (Exception e)
            {
                end = DateTime.UtcNow;

                HttpRequestException httpRequestException = new("/leagues/{leagueId}/seasons/{seasonId}", path, end - start, e);

                OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestException));

                throw httpRequestException;
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<PlayerRankingList>(apiResponse.RawContent, CocApi.Clash.JsonSerializerSettings);
                
                HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/leagues/{leagueId}/seasons/{seasonId}", path, end - start, httpStatusCode);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));
            }
            else
            {
                HttpRequestNonSuccess httpRequestNonSuccess = new("/leagues/{leagueId}/seasons/{seasonId}", path, end - start, httpStatusCode, reasonPhrase);

                OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestNonSuccess));
            }

            return apiResponse;
        }

        /// <summary>
        /// Get league seasons Get league seasons. Note that league season information is available only for Legend League. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeagueSeasonList</returns>
        public async System.Threading.Tasks.Task<LeagueSeasonList> FetchLeagueSeasonsAsync(string leagueId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<LeagueSeasonList> result = await FetchLeagueSeasonsResponseAsync(leagueId, limit, after, before, cancellationToken).ConfigureAwait(false);
            return result.Content ?? throw new NullReferenceException();
        }

        /// <summary>
        /// Get league seasons Get league seasons. Note that league season information is available only for Legend League. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeagueSeasonList</returns>
        public async System.Threading.Tasks.Task<LeagueSeasonList?> FetchLeagueSeasonsOrDefaultAsync(string leagueId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<LeagueSeasonList> result = await FetchLeagueSeasonsResponseAsync(leagueId, limit, after, before, cancellationToken).ConfigureAwait(false);
            
            return result.IsSuccessStatusCode
                ? result.Content
                : null;
        } 

        /// <summary>
        /// Get league seasons Get league seasons. Note that league season information is available only for Legend League. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeagueSeasonList)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<LeagueSeasonList>> FetchLeagueSeasonsResponseAsync(string leagueId, int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (leagueId == null)
                throw new ArgumentNullException(nameof(leagueId));
            
            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/leagues/{leagueId}/seasons";
            path = path.Replace("{leagueId}", Uri.EscapeDataString(leagueId));



            path = $"{path}?";
            
            if (limit != null)
                path = $"{path}limit={Uri.EscapeDataString(limit.ToString()!)}&";  

            if (after != null)
                path = $"{path}after={Uri.EscapeDataString(after.ToString()!)}&";  

            if (before != null)
                path = $"{path}before={Uri.EscapeDataString(before.ToString()!)}&";  


            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");




            // authentication (JWT) required
            //isKeyInHeader
            string? token = GetTokenAsync != null
                ? await GetTokenAsync(cancellationToken).ConfigureAwait(false)
                : null;

            if (token != null)
                request.Headers.Add("authorization", $"Bearer {token}");            


            request.Method = new System.Net.Http.HttpMethod("GET");

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            DateTime start = DateTime.UtcNow;

            DateTime end;

            HttpStatusCode httpStatusCode = HttpStatusCode.OK;

            string? reasonPhrase;

            string responseContent = string.Empty;

            ApiResponse<LeagueSeasonList> apiResponse;

            try
            {
                using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                httpStatusCode = responseMessage.StatusCode;

                reasonPhrase = responseMessage.ReasonPhrase;

                responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                end = DateTime.UtcNow;

                apiResponse = new(responseMessage, responseContent);
            }
            catch (Exception e)
            {
                end = DateTime.UtcNow;

                HttpRequestException httpRequestException = new("/leagues/{leagueId}/seasons", path, end - start, e);

                OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestException));

                throw httpRequestException;
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<LeagueSeasonList>(apiResponse.RawContent, CocApi.Clash.JsonSerializerSettings);
                
                HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/leagues/{leagueId}/seasons", path, end - start, httpStatusCode);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));
            }
            else
            {
                HttpRequestNonSuccess httpRequestNonSuccess = new("/leagues/{leagueId}/seasons", path, end - start, httpStatusCode, reasonPhrase);

                OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestNonSuccess));
            }

            return apiResponse;
        }

        /// <summary>
        /// List leagues List leagues
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeagueList</returns>
        public async System.Threading.Tasks.Task<LeagueList> FetchLeaguesAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<LeagueList> result = await FetchLeaguesResponseAsync(limit, after, before, cancellationToken).ConfigureAwait(false);
            return result.Content ?? throw new NullReferenceException();
        }

        /// <summary>
        /// List leagues List leagues
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of LeagueList</returns>
        public async System.Threading.Tasks.Task<LeagueList?> FetchLeaguesOrDefaultAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<LeagueList> result = await FetchLeaguesResponseAsync(limit, after, before, cancellationToken).ConfigureAwait(false);
            
            return result.IsSuccessStatusCode
                ? result.Content
                : null;
        } 

        /// <summary>
        /// List leagues List leagues
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (LeagueList)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<LeagueList>> FetchLeaguesResponseAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            
            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/leagues";


            path = $"{path}?";
            
            if (limit != null)
                path = $"{path}limit={Uri.EscapeDataString(limit.ToString()!)}&";  

            if (after != null)
                path = $"{path}after={Uri.EscapeDataString(after.ToString()!)}&";  

            if (before != null)
                path = $"{path}before={Uri.EscapeDataString(before.ToString()!)}&";  


            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");




            // authentication (JWT) required
            //isKeyInHeader
            string? token = GetTokenAsync != null
                ? await GetTokenAsync(cancellationToken).ConfigureAwait(false)
                : null;

            if (token != null)
                request.Headers.Add("authorization", $"Bearer {token}");            


            request.Method = new System.Net.Http.HttpMethod("GET");

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            DateTime start = DateTime.UtcNow;

            DateTime end;

            HttpStatusCode httpStatusCode = HttpStatusCode.OK;

            string? reasonPhrase;

            string responseContent = string.Empty;

            ApiResponse<LeagueList> apiResponse;

            try
            {
                using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                httpStatusCode = responseMessage.StatusCode;

                reasonPhrase = responseMessage.ReasonPhrase;

                responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                end = DateTime.UtcNow;

                apiResponse = new(responseMessage, responseContent);
            }
            catch (Exception e)
            {
                end = DateTime.UtcNow;

                HttpRequestException httpRequestException = new("/leagues", path, end - start, e);

                OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestException));

                throw httpRequestException;
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<LeagueList>(apiResponse.RawContent, CocApi.Clash.JsonSerializerSettings);
                
                HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/leagues", path, end - start, httpStatusCode);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));
            }
            else
            {
                HttpRequestNonSuccess httpRequestNonSuccess = new("/leagues", path, end - start, httpStatusCode, reasonPhrase);

                OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestNonSuccess));
            }

            return apiResponse;
        }

        /// <summary>
        /// Get war league information Get war league information
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WarLeague</returns>
        public async System.Threading.Tasks.Task<WarLeague> FetchWarLeagueAsync(string leagueId, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<WarLeague> result = await FetchWarLeagueResponseAsync(leagueId, cancellationToken).ConfigureAwait(false);
            return result.Content ?? throw new NullReferenceException();
        }

        /// <summary>
        /// Get war league information Get war league information
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WarLeague</returns>
        public async System.Threading.Tasks.Task<WarLeague?> FetchWarLeagueOrDefaultAsync(string leagueId, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<WarLeague> result = await FetchWarLeagueResponseAsync(leagueId, cancellationToken).ConfigureAwait(false);
            
            return result.IsSuccessStatusCode
                ? result.Content
                : null;
        } 

        /// <summary>
        /// Get war league information Get war league information
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="leagueId">Identifier of the league.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WarLeague)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<WarLeague>> FetchWarLeagueResponseAsync(string leagueId, System.Threading.CancellationToken? cancellationToken = null)
        {
            if (leagueId == null)
                throw new ArgumentNullException(nameof(leagueId));
            
            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/warleagues/{leagueId}";
            path = path.Replace("{leagueId}", Uri.EscapeDataString(leagueId));



            path = $"{path}?";
            

            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");




            // authentication (JWT) required
            //isKeyInHeader
            string? token = GetTokenAsync != null
                ? await GetTokenAsync(cancellationToken).ConfigureAwait(false)
                : null;

            if (token != null)
                request.Headers.Add("authorization", $"Bearer {token}");            


            request.Method = new System.Net.Http.HttpMethod("GET");

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            DateTime start = DateTime.UtcNow;

            DateTime end;

            HttpStatusCode httpStatusCode = HttpStatusCode.OK;

            string? reasonPhrase;

            string responseContent = string.Empty;

            ApiResponse<WarLeague> apiResponse;

            try
            {
                using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                httpStatusCode = responseMessage.StatusCode;

                reasonPhrase = responseMessage.ReasonPhrase;

                responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                end = DateTime.UtcNow;

                apiResponse = new(responseMessage, responseContent);
            }
            catch (Exception e)
            {
                end = DateTime.UtcNow;

                HttpRequestException httpRequestException = new("/warleagues/{leagueId}", path, end - start, e);

                OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestException));

                throw httpRequestException;
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<WarLeague>(apiResponse.RawContent, CocApi.Clash.JsonSerializerSettings);
                
                HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/warleagues/{leagueId}", path, end - start, httpStatusCode);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));
            }
            else
            {
                HttpRequestNonSuccess httpRequestNonSuccess = new("/warleagues/{leagueId}", path, end - start, httpStatusCode, reasonPhrase);

                OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestNonSuccess));
            }

            return apiResponse;
        }

        /// <summary>
        /// List war leagues List war leagues
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WarLeagueList</returns>
        public async System.Threading.Tasks.Task<WarLeagueList> FetchWarLeaguesAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<WarLeagueList> result = await FetchWarLeaguesResponseAsync(limit, after, before, cancellationToken).ConfigureAwait(false);
            return result.Content ?? throw new NullReferenceException();
        }

        /// <summary>
        /// List war leagues List war leagues
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of WarLeagueList</returns>
        public async System.Threading.Tasks.Task<WarLeagueList?> FetchWarLeaguesOrDefaultAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            CocApi.Client.ApiResponse<WarLeagueList> result = await FetchWarLeaguesResponseAsync(limit, after, before, cancellationToken).ConfigureAwait(false);
            
            return result.IsSuccessStatusCode
                ? result.Content
                : null;
        } 

        /// <summary>
        /// List war leagues List war leagues
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">Limit the number of items returned in the response. (optional)</param>
        /// <param name="after">Return only items that occur after this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="before">Return only items that occur before this marker. Before marker can be found from the response, inside the &#39;paging&#39; property. Note that only after or before can be specified for a request, not both.  (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (WarLeagueList)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<WarLeagueList>> FetchWarLeaguesResponseAsync(int? limit = null, string? after = null, string? before = null, System.Threading.CancellationToken? cancellationToken = null)
        {
            
            using System.Net.Http.HttpRequestMessage request = new System.Net.Http.HttpRequestMessage();

            string path = "/warleagues";


            path = $"{path}?";
            
            if (limit != null)
                path = $"{path}limit={Uri.EscapeDataString(limit.ToString()!)}&";  

            if (after != null)
                path = $"{path}after={Uri.EscapeDataString(after.ToString()!)}&";  

            if (before != null)
                path = $"{path}before={Uri.EscapeDataString(before.ToString()!)}&";  


            if (path.EndsWith("&"))
                path = path[..^1];

            if (path.EndsWith("?"))
                path = path[..^1];

            request.RequestUri = new Uri($"{_httpClient.BaseAddress}{path}");




            // authentication (JWT) required
            //isKeyInHeader
            string? token = GetTokenAsync != null
                ? await GetTokenAsync(cancellationToken).ConfigureAwait(false)
                : null;

            if (token != null)
                request.Headers.Add("authorization", $"Bearer {token}");            


            request.Method = new System.Net.Http.HttpMethod("GET");

            request.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

            DateTime start = DateTime.UtcNow;

            DateTime end;

            HttpStatusCode httpStatusCode = HttpStatusCode.OK;

            string? reasonPhrase;

            string responseContent = string.Empty;

            ApiResponse<WarLeagueList> apiResponse;

            try
            {
                using System.Net.Http.HttpResponseMessage responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);

                httpStatusCode = responseMessage.StatusCode;

                reasonPhrase = responseMessage.ReasonPhrase;

                responseContent = await responseMessage.Content.ReadAsStringAsync().ConfigureAwait(false);

                end = DateTime.UtcNow;

                apiResponse = new(responseMessage, responseContent);
            }
            catch (Exception e)
            {
                end = DateTime.UtcNow;

                HttpRequestException httpRequestException = new("/warleagues", path, end - start, e);

                OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestException));

                throw httpRequestException;
            }

            if (apiResponse.IsSuccessStatusCode)
            {
                apiResponse.Content = Newtonsoft.Json.JsonConvert.DeserializeObject<WarLeagueList>(apiResponse.RawContent, CocApi.Clash.JsonSerializerSettings);
                
                HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/warleagues", path, end - start, httpStatusCode);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));
            }
            else
            {
                HttpRequestNonSuccess httpRequestNonSuccess = new("/warleagues", path, end - start, httpStatusCode, reasonPhrase);

                OnHttpRequestResult(new HttpRequestResultEventArgs(httpRequestNonSuccess));
            }

            return apiResponse;
        }
    }
}

