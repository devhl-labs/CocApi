/* 
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using System.Collections.Immutable;
using CocApi.Client;
using CocApi.Model;
using System.Net.Http;
using Newtonsoft.Json;
using System.Threading;
using System.Threading.Tasks;

namespace CocApi.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class PlayersApi
    {
        //private readonly CocApi.TokenQueue _tokenProvider;
        private CocApi.Client.ExceptionFactory _exceptionFactory = (name, response) => null;
        public delegate System.Threading.Tasks.Task HttpRequestResultEventHandler(object sender, HttpRequestResultEventArgs log);        
        public event HttpRequestResultEventHandler HttpRequestResult;
        //private readonly System.Collections.Concurrent.ConcurrentBag<IHttpRequestResult> // _httpRequestResults = new System.Collections.Concurrent.ConcurrentBag<IHttpRequestResult>();

        internal void OnHttpRequestResult(HttpRequestResultEventArgs log) => HttpRequestResult?.Invoke(this, log);
        //public ImmutableArray<IHttpRequestResult> HttpRequestResults => // _httpRequestResults.ToImmutableArray();

        /// <summary>
        /// Initializes a new instance of the <see cref="PlayersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PlayersApi(TimeSpan? httpRequestTimeOut = null, string basePath = "https://api.clashofclans.com/v1", int maxConnections = 25)
        {
            _maxConnections = maxConnections;
            _semaphore = new SemaphoreSlim(_maxConnections, _maxConnections);

            HttpClientHandler httpClientHandler = new HttpClientHandler
            {
                MaxConnectionsPerServer = maxConnections, 
            };

            _httpClient = new HttpClient(httpClientHandler)
            {
                BaseAddress = new Uri(basePath)
            };

            this.Configuration = CocApi.Client.Configuration.MergeConfigurations(
                CocApi.Client.GlobalConfiguration.Instance,
                new CocApi.Client.Configuration { BasePath = basePath, Timeout = ((int?)httpRequestTimeOut?.TotalMilliseconds) ?? 100000  }
            );
            this.Client = new CocApi.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new CocApi.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = CocApi.Client.Configuration.DefaultExceptionFactory;
            //this._tokenProvider = tokenProvider;
        }









        private readonly HttpClient _httpClient; // HttpClientHandler.MaxConnectionsPerServer = _maxConnections 
        private readonly int _maxConnections;
        private readonly SemaphoreSlim _semaphore;
        private long _circuitStatus;
        private const long OPEN = 0;
        private const long TRIPPED = 1;

        private string _isTrippedReason = string.Empty;

        private readonly object _isTrippedReasonLock = new object();

        private void TripCircuit(string reason)
        {
            if (Interlocked.CompareExchange(ref _circuitStatus, TRIPPED, OPEN) == OPEN)
            {
                lock (_isTrippedReasonLock)                
                    _isTrippedReason = reason;

                _ = Task.Run(() =>
                {
                    _ = OpenCircuitAsync();
                });                
            }
        }

        private async Task OpenCircuitAsync()
        {
            await Task.Delay(TimeSpan.FromMinutes(1));

            if (Interlocked.CompareExchange(ref _circuitStatus, OPEN, TRIPPED) == TRIPPED)
            {
                lock (_isTrippedReasonLock)
                    _isTrippedReason = string.Empty;
            }
        }

        private bool IsTripped()
        {
            return Interlocked.Read(ref _circuitStatus) == TRIPPED;
        }

        private async Task<ApiResponse<T>> GetAsync<T>(
            string token, string path, Uri requestUri, RequestOptions requestOptions,
            string methodName, CancellationToken? cancellationToken = default)
        {
            await _semaphore.WaitAsync();

            try
            {
                if (IsTripped())
                    throw ThrowOnHttpRequestException(
                        new CachedHttpRequestException(_isTrippedReason), path, requestOptions, null);

                using HttpRequestMessage request = new HttpRequestMessage();
                request.Headers.Add("authorization", $"Bearer {token}");
                request.RequestUri = requestUri;
                HttpResponseMessage? responseMessage = null;
                System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
                stopwatch.Start();

                try
                {
                    responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault());
                }
                catch (Exception e)
                {
                    TripCircuit(e.Message);
                    throw ThrowOnHttpRequestException(e, path, requestOptions, stopwatch);
                }

                stopwatch.Stop();

                string responseContent = await responseMessage.Content.ReadAsStringAsync();

                Multimap<string, string> headers = new Multimap<string, string>
                {
                    new KeyValuePair<string, IList<string>>("Cache-Control", new List<string>(responseMessage.Headers.First(h => h.Key == "Cache-Control").Value)),
                    new KeyValuePair<string, IList<string>>("Date", new List<string>(responseMessage.Headers.First(h => h.Key == "Date").Value))
                };

                ApiResponse<T> apiResponse = new ApiResponse<T>(responseMessage.StatusCode, headers, JsonConvert.DeserializeObject<T>(responseContent, Clash.JsonSerializerSettings), responseContent);

                if (!responseMessage.IsSuccessStatusCode)
                {
                    Exception e = this.ExceptionFactory(methodName, apiResponse);

                    if (e != null)
                    {
                        if (responseMessage.StatusCode == (HttpStatusCode)500 ||
                        responseMessage.StatusCode == (HttpStatusCode)502 ||
                        responseMessage.StatusCode == (HttpStatusCode)503 ||
                        responseMessage.StatusCode == (HttpStatusCode)504)
                            TripCircuit(e.Message);

                        throw ThrowOnHttpRequestException(new CachedHttpRequestException(e.Message), path, requestOptions, stopwatch);
                    }
                }

                HttpRequestSuccess requestSuccess = new HttpRequestSuccess(path, requestOptions, stopwatch.Elapsed, responseMessage.StatusCode);

                // _httpRequestResults.Add(requestSuccess);

                OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));

                return apiResponse;
            }
            finally
            {
                _semaphore.Release();
            }
        }

        private Exception ThrowOnHttpRequestException(Exception e, string path, RequestOptions requestOptions, System.Diagnostics.Stopwatch? stopWatch)
        {
            stopWatch?.Stop();

            HttpRequestException requestException = new HttpRequestException(path, requestOptions, stopWatch?.Elapsed ?? TimeSpan.FromSeconds(0), e);

            // _httpRequestResults.Add(requestException);

            OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

            return e;
        }





















        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public CocApi.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public CocApi.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public CocApi.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CocApi.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }



        /// <summary>
        /// Get player information Get information about a single player by player tag. Player tags can be found either in game or by from clan member lists. Note that player tags start with hash character &#39;#&#39; and that needs to be URL-encoded properly to work in URL, so for example player tag &#39;#2ABC&#39; would become &#39;%232ABC&#39; in the URL. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerTag">Tag of the player.</param>
        /// <returns>Task of Player</returns>
        public async System.Threading.Tasks.Task<Player> GetPlayerAsync (string token, string playerTag, System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<Player> localVarResponse = await GetPlayerResponseAsync(token, playerTag,  cancellationToken.GetValueOrDefault());
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get player information Get information about a single player by player tag. Player tags can be found either in game or by from clan member lists. Note that player tags start with hash character &#39;#&#39; and that needs to be URL-encoded properly to work in URL, so for example player tag &#39;#2ABC&#39; would become &#39;%232ABC&#39; in the URL. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerTag">Tag of the player.</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<Player>> GetPlayerResponseAsync (string token, string playerTag, System.Threading.CancellationToken? cancellationToken = default)
        {
            // verify the required parameter 'playerTag' is set
            if (playerTag == null)
                throw new CocApi.Client.ApiException(400, "Missing required parameter 'playerTag' when calling PlayersApi->GetPlayer");
            string formattedTag = Clash.FormatTag(playerTag);

            CocApi.Client.RequestOptions localVarRequestOptions = new CocApi.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = CocApi.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = CocApi.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            
            localVarRequestOptions.PathParameters.Add("playerTag", CocApi.Client.ClientUtils.ParameterToString(formattedTag));  //playerTag

            // authentication (JWT) required
            //localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + await _tokenProvider.GetTokenAsync(cancellationToken.GetValueOrDefault()).ConfigureAwait(false));
            localVarRequestOptions.HeaderParameters.Add("authorization", "Bearer " + token);









            return await GetAsync<Player>(
                token, "/players/{playerTag}", new Uri($"{Configuration.BasePath}/{Player.Url(formattedTag)}"),
                localVarRequestOptions, "GetPlayer", cancellationToken);















            //using HttpRequestMessage request = new HttpRequestMessage();
            //request.Headers.Add("authorization", $"Bearer {token}");
            //request.RequestUri = new Uri($"{Configuration.BasePath}/{Player.Url(formattedTag)}");
            //System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
            //HttpResponseMessage? responseMessage = null;
            //stopwatch.Start();

            //try
            //{
            //    responseMessage = await _httpClient.SendAsync(request, cancellationToken.GetValueOrDefault());
            //}
            //catch (Exception e)
            //{
            //    stopwatch.Stop();

            //    HttpRequestException requestException = new HttpRequestException("/players/{playerTag}", localVarRequestOptions, stopwatch.Elapsed, e);

            //    // _httpRequestResults.Add(requestException);

            //    OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

            //    throw;
            //}

            //stopwatch.Stop();

            //string responseContent = await responseMessage.Content.ReadAsStringAsync();

            //Multimap<string, string> headers = new Multimap<string, string>();
            //headers.Add(new KeyValuePair<string, IList<string>>("Cache-Control", new List<string>(responseMessage.Headers.First(h => h.Key == "Cache-Control").Value)));
            //headers.Add(new KeyValuePair<string, IList<string>>("Date", new List<string>(responseMessage.Headers.First(h => h.Key == "Date").Value)));

            //ApiResponse<Player> apiResponse = new ApiResponse<Player>(responseMessage.StatusCode, headers, JsonConvert.DeserializeObject<Player>(responseContent, Clash.JsonSerializerSettings), responseContent);

            //if (!responseMessage.IsSuccessStatusCode)
            //{
            //    Exception _exception = this.ExceptionFactory("GetPlayer", apiResponse);
            //    if (_exception != null)
            //    {
            //        HttpRequestException requestException = new HttpRequestException("/players/{playerTag}", localVarRequestOptions, stopwatch.Elapsed, _exception);

            //        // _httpRequestResults.Add(requestException);

            //        OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

            //        throw _exception;
            //    }
            //}

            //HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/players/{playerTag}", localVarRequestOptions, stopwatch.Elapsed, apiResponse.StatusCode);

            //// _httpRequestResults.Add(requestSuccess);

            //OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));

            //return apiResponse;





































            //// make the HTTP request
            //System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();

            //stopwatch.Start();

            //ApiResponse<Player>? localVarResponse = null;

            //try
            //{
            //    localVarResponse = await this.AsynchronousClient.GetAsync<Player>("/players/{playerTag}", localVarRequestOptions, this.Configuration, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
            //}
            //catch (Exception e)
            //{
            //    stopwatch.Stop();

            //    HttpRequestException requestException = new HttpRequestException("/players/{playerTag}", localVarRequestOptions, stopwatch.Elapsed, e);

            //    // _httpRequestResults.Add(requestException);

            //    OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

            //    throw;
            //}

            //stopwatch.Stop();

            //if (localVarResponse.ErrorText == "The request timed-out." || localVarResponse.ErrorText == "The operation has timed out.")
            //{
            //    TimeoutException timeoutException = new TimeoutException(localVarResponse.ErrorText);

            //    HttpRequestException requestException = new HttpRequestException("/players/{playerTag}", localVarRequestOptions, stopwatch.Elapsed, timeoutException);

            //    // _httpRequestResults.Add(requestException);

            //    OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

            //    throw timeoutException;
            //}

            //if (this.ExceptionFactory != null)
            //{
            //    Exception _exception = this.ExceptionFactory("GetPlayer", localVarResponse);
            //    if (_exception != null) 
            //    {
            //        HttpRequestException requestException = new HttpRequestException("/players/{playerTag}", localVarRequestOptions, stopwatch.Elapsed, _exception);

            //        // _httpRequestResults.Add(requestException);

            //        OnHttpRequestResult(new HttpRequestResultEventArgs(requestException));

            //        throw _exception;
            //    }
            //}

            //HttpRequestSuccess requestSuccess = new HttpRequestSuccess("/players/{playerTag}", localVarRequestOptions, stopwatch.Elapsed, localVarResponse.StatusCode);

            //// _httpRequestResults.Add(requestSuccess);

            //OnHttpRequestResult(new HttpRequestResultEventArgs(requestSuccess));

            //return localVarResponse;
        }

        /// <summary>
        /// Get player information Get information about a single player by player tag. Player tags can be found either in game or by from clan member lists. Note that player tags start with hash character &#39;#&#39; and that needs to be URL-encoded properly to work in URL, so for example player tag &#39;#2ABC&#39; would become &#39;%232ABC&#39; in the URL. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerTag">Tag of the player.</param>
        /// <returns>Task of ApiResponse (Player)</returns>
        public async System.Threading.Tasks.Task<CocApi.Client.ApiResponse<Player>?> GetPlayerResponseOrDefaultAsync (string token, string playerTag, System.Threading.CancellationToken? cancellationToken = default)
        {
            try
            {
                return await GetPlayerResponseAsync (token, playerTag, cancellationToken.GetValueOrDefault());
            }
            catch(ApiException)
            {
                return null;
            }
            catch (TimeoutException)
            {
                return null;
            }
        }

        /// <summary>
        /// Get player information Get information about a single player by player tag. Player tags can be found either in game or by from clan member lists. Note that player tags start with hash character &#39;#&#39; and that needs to be URL-encoded properly to work in URL, so for example player tag &#39;#2ABC&#39; would become &#39;%232ABC&#39; in the URL. 
        /// </summary>
        /// <exception cref="CocApi.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="playerTag">Tag of the player.</param>
        /// <returns>Task of Player</returns>
        public async System.Threading.Tasks.Task<Player?> GetPlayerOrDefaultAsync (string token, string playerTag, System.Threading.CancellationToken? cancellationToken = default)
        {
             CocApi.Client.ApiResponse<Player>? localVarResponse = await GetPlayerResponseOrDefaultAsync(token, playerTag, cancellationToken.GetValueOrDefault()).ConfigureAwait(false);
             if (localVarResponse == null)
                return null;

             return localVarResponse.Data;
        }

    }
}