/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CocApi.Client.OpenAPIDateConverter;

namespace CocApi.Model
{
    /// <summary>
    /// PlayerLegendStatistics
    /// </summary>
    [DataContract(Name = "PlayerLegendStatistics")]
    public partial class PlayerLegendStatistics : IEquatable<PlayerLegendStatistics>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerLegendStatistics" /> class.
        /// </summary>
        /// <param name="currentSeason">currentSeason.</param>
        /// <param name="previousVersusSeason">previousVersusSeason.</param>
        /// <param name="bestVersusSeason">bestVersusSeason.</param>
        /// <param name="legendTrophies">legendTrophies.</param>
        /// <param name="previousSeason">previousSeason.</param>
        /// <param name="bestSeason">bestSeason.</param>
        public PlayerLegendStatistics(LegendLeagueTournamentSeasonResult currentSeason, LegendLeagueTournamentSeasonResult previousVersusSeason, LegendLeagueTournamentSeasonResult bestVersusSeason, int legendTrophies, LegendLeagueTournamentSeasonResult previousSeason, LegendLeagueTournamentSeasonResult bestSeason)
        {
            CurrentSeason = currentSeason;
            PreviousVersusSeason = previousVersusSeason;
            BestVersusSeason = bestVersusSeason;
            LegendTrophies = legendTrophies;
            PreviousSeason = previousSeason;
            BestSeason = bestSeason;
        }

        /// <summary>
        /// Gets or Sets CurrentSeason
        /// </summary>
        [DataMember(Name = "currentSeason", EmitDefaultValue = false)]
        public LegendLeagueTournamentSeasonResult CurrentSeason { get; private set; }

        /// <summary>
        /// Gets or Sets PreviousVersusSeason
        /// </summary>
        [DataMember(Name = "previousVersusSeason", EmitDefaultValue = false)]
        public LegendLeagueTournamentSeasonResult? PreviousVersusSeason { get; private set; }

        /// <summary>
        /// Gets or Sets BestVersusSeason
        /// </summary>
        [DataMember(Name = "bestVersusSeason", EmitDefaultValue = false)]
        public LegendLeagueTournamentSeasonResult? BestVersusSeason { get; private set; }

        /// <summary>
        /// Gets or Sets LegendTrophies
        /// </summary>
        [DataMember(Name = "legendTrophies", EmitDefaultValue = false)]
        public int LegendTrophies { get; private set; }

        /// <summary>
        /// Gets or Sets PreviousSeason
        /// </summary>
        [DataMember(Name = "previousSeason", EmitDefaultValue = false)]
        public LegendLeagueTournamentSeasonResult? PreviousSeason { get; private set; }

        /// <summary>
        /// Gets or Sets BestSeason
        /// </summary>
        [DataMember(Name = "bestSeason", EmitDefaultValue = false)]
        public LegendLeagueTournamentSeasonResult? BestSeason { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerLegendStatistics {\n");
            sb.Append("  CurrentSeason: ").Append(CurrentSeason).Append('\n');
            sb.Append("  PreviousVersusSeason: ").Append(PreviousVersusSeason).Append('\n');
            sb.Append("  BestVersusSeason: ").Append(BestVersusSeason).Append('\n');
            sb.Append("  LegendTrophies: ").Append(LegendTrophies).Append('\n');
            sb.Append("  PreviousSeason: ").Append(PreviousSeason).Append('\n');
            sb.Append("  BestSeason: ").Append(BestSeason).Append('\n');
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson(Newtonsoft.Json.JsonSerializerSettings? jsonSerializerSettings = null)
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, jsonSerializerSettings ?? CocApi.Client.ClientUtils.JsonSerializerSettings);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return Equals(input as PlayerLegendStatistics);
        }

        /// <summary>
        /// Returns true if PlayerLegendStatistics instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayerLegendStatistics to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerLegendStatistics? input)
        {
            if (input == null)
                return false;

            return 
                (
                    CurrentSeason == input.CurrentSeason ||
                    (CurrentSeason != null &&
                    CurrentSeason.Equals(input.CurrentSeason))
                ) && 
                (
                    PreviousVersusSeason == input.PreviousVersusSeason ||
                    (PreviousVersusSeason != null &&
                    PreviousVersusSeason.Equals(input.PreviousVersusSeason))
                ) && 
                (
                    BestVersusSeason == input.BestVersusSeason ||
                    (BestVersusSeason != null &&
                    BestVersusSeason.Equals(input.BestVersusSeason))
                ) && 
                (
                    LegendTrophies == input.LegendTrophies ||
                    LegendTrophies.Equals(input.LegendTrophies)
                ) && 
                (
                    PreviousSeason == input.PreviousSeason ||
                    (PreviousSeason != null &&
                    PreviousSeason.Equals(input.PreviousSeason))
                ) && 
                (
                    BestSeason == input.BestSeason ||
                    (BestSeason != null &&
                    BestSeason.Equals(input.BestSeason))
                );
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

