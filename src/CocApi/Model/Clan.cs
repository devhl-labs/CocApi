/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CocApi.Client.OpenAPIDateConverter;

namespace CocApi.Model
{
    /// <summary>
    /// Clan
    /// </summary>
    [DataContract(Name = "Clan")]
    public partial class Clan : IEquatable<Clan>, IValidatableObject
    {
        ///// <summary>
        ///// Defines WarFrequency
        ///// </summary>
        //[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        //public enum WarFrequencyEnum
        //{
        //    /// <summary>
        //    /// Enum Unknown for value: unknown
        //    /// </summary>
        //    [EnumMember(Value = "unknown")]
        //    Unknown = 1,

        //    /// <summary>
        //    /// Enum Never for value: never
        //    /// </summary>
        //    [EnumMember(Value = "never")]
        //    Never = 2,

        //    /// <summary>
        //    /// Enum LessThanOncePerWeek for value: lessThanOncePerWeek
        //    /// </summary>
        //    [EnumMember(Value = "lessThanOncePerWeek")]
        //    LessThanOncePerWeek = 3,

        //    /// <summary>
        //    /// Enum OncePerWeek for value: oncePerWeek
        //    /// </summary>
        //    [EnumMember(Value = "oncePerWeek")]
        //    OncePerWeek = 4,

        //    /// <summary>
        //    /// Enum MoreThanOncePerWeek for value: moreThanOncePerWeek
        //    /// </summary>
        //    [EnumMember(Value = "moreThanOncePerWeek")]
        //    MoreThanOncePerWeek = 5,

        //    /// <summary>
        //    /// Enum Always for value: always
        //    /// </summary>
        //    [EnumMember(Value = "always")]
        //    Always = 6

        //}

        /// <summary>
        /// Gets or Sets WarFrequency
        /// </summary>
        [DataMember(Name = "warFrequency", EmitDefaultValue = false)]
        public WarFrequency? WarFrequency { get; private set; }
        
        ///// <summary>
        ///// Defines Type
        ///// </summary>
        //[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        //public enum TypeEnum
        //{
        //    /// <summary>
        //    /// Enum InviteOnly for value: InviteOnly
        //    /// </summary>
        //    [EnumMember(Value = "InviteOnly")]
        //    InviteOnly = 1,

        //    /// <summary>
        //    /// Enum Closed for value: Closed
        //    /// </summary>
        //    [EnumMember(Value = "Closed")]
        //    Closed = 2,

        //    /// <summary>
        //    /// Enum Open for value: Open
        //    /// </summary>
        //    [EnumMember(Value = "Open")]
        //    Open = 3

        //}

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public RecruitingType? Type { get; private set; }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Clan" /> class.
        /// </summary>
        /// <param name="warLeague">warLeague.</param>
        /// <param name="memberList">memberList.</param>
        /// <param name="requiredTrophies">requiredTrophies.</param>
        /// <param name="clanVersusPoints">clanVersusPoints.</param>
        /// <param name="tag">tag.</param>
        /// <param name="isWarLogPublic">isWarLogPublic.</param>
        /// <param name="warFrequency">warFrequency.</param>
        /// <param name="clanLevel">clanLevel.</param>
        /// <param name="warWinStreak">warWinStreak.</param>
        /// <param name="warWins">warWins.</param>
        /// <param name="warTies">warTies.</param>
        /// <param name="warLosses">warLosses.</param>
        /// <param name="clanPoints">clanPoints.</param>
        /// <param name="chatLanguage">chatLanguage.</param>
        /// <param name="labels">labels.</param>
        /// <param name="name">name.</param>
        /// <param name="location">location.</param>
        /// <param name="type">type.</param>
        /// <param name="members">members.</param>
        /// <param name="description">description.</param>
        /// <param name="badgeUrls">badgeUrls.</param>
        public Clan(WarLeague warLeague, List<ClanMember> memberList, int requiredTrophies, int clanVersusPoints, string tag, bool isWarLogPublic, WarFrequency? warFrequency, int clanLevel, int warWinStreak, int warWins, int warTies, int warLosses, int clanPoints, Language chatLanguage, List<Label> labels, string name, Location location, RecruitingType? type, int members, string description, ClanBadgeUrls badgeUrls)
        {
            WarLeague = warLeague;
            //MemberList = memberList;
            RequiredTrophies = requiredTrophies;
            ClanVersusPoints = clanVersusPoints;
            Tag = tag;
            IsWarLogPublic = isWarLogPublic;
            WarFrequency = warFrequency;
            ClanLevel = clanLevel;
            WarWinStreak = warWinStreak;
            WarWins = warWins;
            WarTies = warTies;
            WarLosses = warLosses;
            ClanPoints = clanPoints;
            ChatLanguage = chatLanguage;
            Labels = labels;
            Name = name;
            Location = location;
            Type = type;
            Members = memberList;
            Description = description;
            BadgeUrls = badgeUrls;
        }

        /// <summary>
        /// Gets or Sets WarLeague
        /// </summary>
        [DataMember(Name = "warLeague", EmitDefaultValue = false)]
        public WarLeague WarLeague { get; private set; }



        /// <summary>
        /// Gets or Sets RequiredTrophies
        /// </summary>
        [DataMember(Name = "requiredTrophies", EmitDefaultValue = false)]
        public int RequiredTrophies { get; private set; }

        /// <summary>
        /// Gets or Sets ClanVersusPoints
        /// </summary>
        [DataMember(Name = "clanVersusPoints", EmitDefaultValue = false)]
        public int ClanVersusPoints { get; private set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public string Tag { get; private set; }

        /// <summary>
        /// Gets or Sets IsWarLogPublic
        /// </summary>
        [DataMember(Name = "isWarLogPublic", EmitDefaultValue = false)]
        public bool IsWarLogPublic { get; private set; }

        /// <summary>
        /// Gets or Sets ClanLevel
        /// </summary>
        [DataMember(Name = "clanLevel", EmitDefaultValue = false)]
        public int ClanLevel { get; private set; }

        /// <summary>
        /// Gets or Sets WarWinStreak
        /// </summary>
        [DataMember(Name = "warWinStreak", EmitDefaultValue = false)]
        public int WarWinStreak { get; private set; }

        /// <summary>
        /// Gets or Sets WarWins
        /// </summary>
        [DataMember(Name = "warWins", EmitDefaultValue = false)]
        public int WarWins { get; private set; }

        /// <summary>
        /// Gets or Sets WarTies
        /// </summary>
        [DataMember(Name = "warTies", EmitDefaultValue = false)]
        public int WarTies { get; private set; }

        /// <summary>
        /// Gets or Sets WarLosses
        /// </summary>
        [DataMember(Name = "warLosses", EmitDefaultValue = false)]
        public int WarLosses { get; private set; }

        /// <summary>
        /// Gets or Sets ClanPoints
        /// </summary>
        [DataMember(Name = "clanPoints", EmitDefaultValue = false)]
        public int ClanPoints { get; private set; }

        /// <summary>
        /// Gets or Sets ChatLanguage
        /// </summary>
        [DataMember(Name = "chatLanguage", EmitDefaultValue = false)]
        public Language ChatLanguage { get; private set; }

        /// <summary>
        /// Gets or Sets Labels
        /// </summary>
        [DataMember(Name = "labels", EmitDefaultValue = false)]
        public List<Label> Labels { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public Location? Location { get; private set; }

        /// <summary>
        /// Gets or Sets Members
        /// </summary>
        [DataMember(Name = "memberList", EmitDefaultValue = false)]
        public List<ClanMember> Members { get; private set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; private set; }

        /// <summary>
        /// Gets or Sets BadgeUrls
        /// </summary>
        [DataMember(Name = "badgeUrls", EmitDefaultValue = false)]
        public ClanBadgeUrls BadgeUrls { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Clan {\n");
            sb.Append("  WarLeague: ").Append(WarLeague).Append('\n');

            sb.Append("  RequiredTrophies: ").Append(RequiredTrophies).Append('\n');
            sb.Append("  ClanVersusPoints: ").Append(ClanVersusPoints).Append('\n');
            sb.Append("  Tag: ").Append(Tag).Append('\n');
            sb.Append("  IsWarLogPublic: ").Append(IsWarLogPublic).Append('\n');
            sb.Append("  WarFrequency: ").Append(WarFrequency).Append('\n');
            sb.Append("  ClanLevel: ").Append(ClanLevel).Append('\n');
            sb.Append("  WarWinStreak: ").Append(WarWinStreak).Append('\n');
            sb.Append("  WarWins: ").Append(WarWins).Append('\n');
            sb.Append("  WarTies: ").Append(WarTies).Append('\n');
            sb.Append("  WarLosses: ").Append(WarLosses).Append('\n');
            sb.Append("  ClanPoints: ").Append(ClanPoints).Append('\n');
            sb.Append("  ChatLanguage: ").Append(ChatLanguage).Append('\n');
            sb.Append("  Labels: ").Append(Labels).Append('\n');
            sb.Append("  Name: ").Append(Name).Append('\n');
            sb.Append("  Location: ").Append(Location).Append('\n');
            sb.Append("  Type: ").Append(Type).Append('\n');
            sb.Append("  Members: ").Append(Members).Append('\n');
            sb.Append("  Description: ").Append(Description).Append('\n');
            sb.Append("  BadgeUrls: ").Append(BadgeUrls).Append('\n');
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson(Newtonsoft.Json.JsonSerializerSettings? jsonSerializerSettings = null)
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, jsonSerializerSettings ?? CocApi.Client.ClientUtils.JsonSerializerSettings);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return Equals(input as Clan);
        }

        /// <summary>
        /// Returns true if Clan instances are equal
        /// </summary>
        /// <param name="input">Instance of Clan to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Clan? input)
        {
            if (input == null)
                return false;

            return 
                (
                    WarLeague == input.WarLeague ||
                    (WarLeague != null &&
                    WarLeague.Equals(input.WarLeague))
                ) && 

                (
                    RequiredTrophies == input.RequiredTrophies ||
                    RequiredTrophies.Equals(input.RequiredTrophies)
                ) && 
                (
                    ClanVersusPoints == input.ClanVersusPoints ||
                    ClanVersusPoints.Equals(input.ClanVersusPoints)
                ) && 
                (
                    Tag == input.Tag ||
                    (Tag != null &&
                    Tag.Equals(input.Tag))
                ) && 
                (
                    IsWarLogPublic == input.IsWarLogPublic ||
                    IsWarLogPublic.Equals(input.IsWarLogPublic)
                ) && 
                (
                    WarFrequency == input.WarFrequency ||
                    WarFrequency.Equals(input.WarFrequency)
                ) && 
                (
                    ClanLevel == input.ClanLevel ||
                    ClanLevel.Equals(input.ClanLevel)
                ) && 
                (
                    WarWinStreak == input.WarWinStreak ||
                    WarWinStreak.Equals(input.WarWinStreak)
                ) && 
                (
                    WarWins == input.WarWins ||
                    WarWins.Equals(input.WarWins)
                ) && 
                (
                    WarTies == input.WarTies ||
                    WarTies.Equals(input.WarTies)
                ) && 
                (
                    WarLosses == input.WarLosses ||
                    WarLosses.Equals(input.WarLosses)
                ) && 
                (
                    ClanPoints == input.ClanPoints ||
                    ClanPoints.Equals(input.ClanPoints)
                ) && 
                (
                    ChatLanguage == input.ChatLanguage ||
                    (ChatLanguage != null &&
                    ChatLanguage.Equals(input.ChatLanguage))
                ) && 
                (
                    Labels == input.Labels ||
                    Labels != null &&
                    input.Labels != null &&
                    Labels.SequenceEqual(input.Labels)
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Location == input.Location ||
                    (Location != null &&
                    Location.Equals(input.Location))
                ) && 
                (
                    Type == input.Type ||
                    Type.Equals(input.Type)
                ) && 
                (
                    Members == input.Members ||
                    Members.Equals(input.Members)
                ) && 
                (
                    Description == input.Description ||
                    (Description != null &&
                    Description.Equals(input.Description))
                ) && 
                (
                    BadgeUrls == input.BadgeUrls ||
                    (BadgeUrls != null &&
                    BadgeUrls.Equals(input.BadgeUrls))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.WarLeague != null)
                    hashCode = hashCode * 59 + this.WarLeague.GetHashCode();
                if (this.Members != null)
                    hashCode = hashCode * 59 + this.Members.GetHashCode();
                hashCode = hashCode * 59 + this.RequiredTrophies.GetHashCode();
                hashCode = hashCode * 59 + this.ClanVersusPoints.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                hashCode = hashCode * 59 + this.IsWarLogPublic.GetHashCode();
                hashCode = hashCode * 59 + this.WarFrequency.GetHashCode();
                hashCode = hashCode * 59 + this.ClanLevel.GetHashCode();
                hashCode = hashCode * 59 + this.WarWinStreak.GetHashCode();
                hashCode = hashCode * 59 + this.WarWins.GetHashCode();
                hashCode = hashCode * 59 + this.WarTies.GetHashCode();
                hashCode = hashCode * 59 + this.WarLosses.GetHashCode();
                hashCode = hashCode * 59 + this.ClanPoints.GetHashCode();
                if (this.ChatLanguage != null)
                    hashCode = hashCode * 59 + this.ChatLanguage.GetHashCode();
                if (this.Labels != null)
                    hashCode = hashCode * 59 + this.Labels.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                hashCode = hashCode * 59 + this.Type.GetHashCode();
                hashCode = hashCode * 59 + this.Members.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.BadgeUrls != null)
                    hashCode = hashCode * 59 + this.BadgeUrls.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

