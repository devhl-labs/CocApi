/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CocApi.Client.OpenAPIDateConverter;

namespace CocApi.Model
{
    /// <summary>
    /// ClanMember
    /// </summary>
    [DataContract(Name = "ClanMember")]
    public partial class ClanMember : IEquatable<ClanMember>, IValidatableObject
    {
        /// <summary>
        /// Defines Role
        /// </summary>
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RoleEnum
        {
            /// <summary>
            /// Enum Member for value: member
            /// </summary>
            [EnumMember(Value = "member")]
            Member = 1,

            /// <summary>
            /// Enum Admin for value: admin
            /// </summary>
            [EnumMember(Value = "admin")]
            Admin = 2,

            /// <summary>
            /// Enum CoLeader for value: coLeader
            /// </summary>
            [EnumMember(Value = "coLeader")]
            CoLeader = 3,

            /// <summary>
            /// Enum Leader for value: leader
            /// </summary>
            [EnumMember(Value = "leader")]
            Leader = 4

        }

        /// <summary>
        /// Gets or Sets Role
        /// </summary>
        [DataMember(Name = "role", EmitDefaultValue = false)]
        public Role? Role { get; private set; }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ClanMember" /> class.
        /// </summary>
        /// <param name="league">league.</param>
        /// <param name="tag">tag.</param>
        /// <param name="name">name.</param>
        /// <param name="role">role.</param>
        /// <param name="expLevel">expLevel.</param>
        /// <param name="clanRank">clanRank.</param>
        /// <param name="previousClanRank">previousClanRank.</param>
        /// <param name="donations">donations.</param>
        /// <param name="donationsReceived">donationsReceived.</param>
        /// <param name="trophies">trophies.</param>
        /// <param name="versusTrophies">versusTrophies.</param>
        public ClanMember(League league = default(League), string tag = default(string), string name = default(string), Role? role = default(Role?), int expLevel = default(int), int clanRank = default(int), int previousClanRank = default(int), int donations = default(int), int donationsReceived = default(int), int trophies = default(int), int versusTrophies = default(int))
        {
            League = league;
            Tag = tag;
            Name = name;
            Role = role;
            ExpLevel = expLevel;
            ClanRank = clanRank;
            PreviousClanRank = previousClanRank;
            Donations = donations;
            DonationsReceived = donationsReceived;
            Trophies = trophies;
            VersusTrophies = versusTrophies;
        }

        /// <summary>
        /// Gets or Sets League
        /// </summary>
        [DataMember(Name = "league", EmitDefaultValue = false)]
        public League League { get; private set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name = "tag", EmitDefaultValue = false)]
        public string Tag { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or Sets ExpLevel
        /// </summary>
        [DataMember(Name = "expLevel", EmitDefaultValue = false)]
        public int ExpLevel { get; private set; }

        /// <summary>
        /// Gets or Sets ClanRank
        /// </summary>
        [DataMember(Name = "clanRank", EmitDefaultValue = false)]
        public int ClanRank { get; private set; }

        /// <summary>
        /// Gets or Sets PreviousClanRank
        /// </summary>
        [DataMember(Name = "previousClanRank", EmitDefaultValue = false)]
        public int PreviousClanRank { get; private set; }

        /// <summary>
        /// Gets or Sets Donations
        /// </summary>
        [DataMember(Name = "donations", EmitDefaultValue = false)]
        public int Donations { get; private set; }

        /// <summary>
        /// Gets or Sets DonationsReceived
        /// </summary>
        [DataMember(Name = "donationsReceived", EmitDefaultValue = false)]
        public int DonationsReceived { get; private set; }

        /// <summary>
        /// Gets or Sets Trophies
        /// </summary>
        [DataMember(Name = "trophies", EmitDefaultValue = false)]
        public int Trophies { get; private set; }

        /// <summary>
        /// Gets or Sets VersusTrophies
        /// </summary>
        [DataMember(Name = "versusTrophies", EmitDefaultValue = false)]
        public int VersusTrophies { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClanMember {\n");
            sb.Append("  League: ").Append(League).Append('\n');
            sb.Append("  Tag: ").Append(Tag).Append('\n');
            sb.Append("  Name: ").Append(Name).Append('\n');
            sb.Append("  Role: ").Append(Role).Append('\n');
            sb.Append("  ExpLevel: ").Append(ExpLevel).Append('\n');
            sb.Append("  ClanRank: ").Append(ClanRank).Append('\n');
            sb.Append("  PreviousClanRank: ").Append(PreviousClanRank).Append('\n');
            sb.Append("  Donations: ").Append(Donations).Append('\n');
            sb.Append("  DonationsReceived: ").Append(DonationsReceived).Append('\n');
            sb.Append("  Trophies: ").Append(Trophies).Append('\n');
            sb.Append("  VersusTrophies: ").Append(VersusTrophies).Append('\n');
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson(Newtonsoft.Json.JsonSerializerSettings? jsonSerializerSettings = null)
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, jsonSerializerSettings ?? CocApi.Client.ClientUtils.JsonSerializerSettings);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return Equals(input as ClanMember);
        }

        /// <summary>
        /// Returns true if ClanMember instances are equal
        /// </summary>
        /// <param name="input">Instance of ClanMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClanMember? input)
        {
            if (input == null)
                return false;

            return 
                (
                    League == input.League ||
                    (League != null &&
                    League.Equals(input.League))
                ) && 
                (
                    Tag == input.Tag ||
                    (Tag != null &&
                    Tag.Equals(input.Tag))
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Role == input.Role ||
                    Role.Equals(input.Role)
                ) && 
                (
                    ExpLevel == input.ExpLevel ||
                    ExpLevel.Equals(input.ExpLevel)
                ) && 
                (
                    ClanRank == input.ClanRank ||
                    ClanRank.Equals(input.ClanRank)
                ) && 
                (
                    PreviousClanRank == input.PreviousClanRank ||
                    PreviousClanRank.Equals(input.PreviousClanRank)
                ) && 
                (
                    Donations == input.Donations ||
                    Donations.Equals(input.Donations)
                ) && 
                (
                    DonationsReceived == input.DonationsReceived ||
                    DonationsReceived.Equals(input.DonationsReceived)
                ) && 
                (
                    Trophies == input.Trophies ||
                    Trophies.Equals(input.Trophies)
                ) && 
                (
                    VersusTrophies == input.VersusTrophies ||
                    VersusTrophies.Equals(input.VersusTrophies)
                );
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

