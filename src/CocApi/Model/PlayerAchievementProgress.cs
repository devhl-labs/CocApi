/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CocApi.Client.OpenAPIDateConverter;

namespace CocApi.Model
{
    /// <summary>
    /// PlayerAchievementProgress
    /// </summary>
    [DataContract(Name = "PlayerAchievementProgress")]
    public partial class PlayerAchievementProgress : IEquatable<PlayerAchievementProgress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PlayerAchievementProgress" /> class.
        /// </summary>
        /// <param name="stars">stars.</param>
        /// <param name="value">value.</param>
        /// <param name="name">name.</param>
        /// <param name="target">target.</param>
        /// <param name="info">info.</param>
        /// <param name="completionInfo">completionInfo.</param>
        /// <param name="village">village.</param>
        public PlayerAchievementProgress(int stars, int value, string name, int target, string info, string completionInfo, string village)
        {
            Stars = stars;
            Value = value;
            Name = name;
            Target = target;
            Info = info;
            CompletionInfo = completionInfo;
            Village = village;
        }

        /// <summary>
        /// Gets or Sets Stars
        /// </summary>
        [DataMember(Name = "stars", EmitDefaultValue = false)]
        public int Stars { get; private set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public int Value { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; private set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name = "target", EmitDefaultValue = false)]
        public int Target { get; private set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>
        [DataMember(Name = "info", EmitDefaultValue = false)]
        public string Info { get; private set; }

        /// <summary>
        /// Gets or Sets CompletionInfo
        /// </summary>
        [DataMember(Name = "completionInfo", EmitDefaultValue = false)]
        public string CompletionInfo { get; private set; }

        /// <summary>
        /// Gets or Sets Village
        /// </summary>
        [DataMember(Name = "village", EmitDefaultValue = false)]
        public string Village { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayerAchievementProgress {\n");
            sb.Append("  Stars: ").Append(Stars).Append('\n');
            sb.Append("  Value: ").Append(Value).Append('\n');
            sb.Append("  Name: ").Append(Name).Append('\n');
            sb.Append("  Target: ").Append(Target).Append('\n');
            sb.Append("  Info: ").Append(Info).Append('\n');
            sb.Append("  CompletionInfo: ").Append(CompletionInfo).Append('\n');
            sb.Append("  Village: ").Append(Village).Append('\n');
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson(Newtonsoft.Json.JsonSerializerSettings? jsonSerializerSettings = null)
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, jsonSerializerSettings ?? CocApi.Client.ClientUtils.JsonSerializerSettings);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return Equals(input as PlayerAchievementProgress);
        }

        /// <summary>
        /// Returns true if PlayerAchievementProgress instances are equal
        /// </summary>
        /// <param name="input">Instance of PlayerAchievementProgress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayerAchievementProgress? input)
        {
            if (input == null)
                return false;

            return 
                (
                    Stars == input.Stars ||
                    Stars.Equals(input.Stars)
                ) && 
                (
                    Value == input.Value ||
                    Value.Equals(input.Value)
                ) && 
                (
                    Name == input.Name ||
                    (Name != null &&
                    Name.Equals(input.Name))
                ) && 
                (
                    Target == input.Target ||
                    Target.Equals(input.Target)
                ) && 
                (
                    Info == input.Info ||
                    (Info != null &&
                    Info.Equals(input.Info))
                ) && 
                (
                    CompletionInfo == input.CompletionInfo ||
                    (CompletionInfo != null &&
                    CompletionInfo.Equals(input.CompletionInfo))
                ) && 
                (
                    Village == input.Village ||
                    (Village != null &&
                    Village.Equals(input.Village))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Stars.GetHashCode();
                hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.Target.GetHashCode();
                if (this.Info != null)
                    hashCode = hashCode * 59 + this.Info.GetHashCode();
                if (this.CompletionInfo != null)
                    hashCode = hashCode * 59 + this.CompletionInfo.GetHashCode();
                if (this.Village != null)
                    hashCode = hashCode * 59 + this.Village.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

