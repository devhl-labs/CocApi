/*
 * Clash of Clans API
 *
 * Check out <a href=\"https://developer.clashofclans.com/#/getting-started\" target=\"_parent\">Getting Started</a> for instructions and links to other resources. Clash of Clans API uses <a href=\"https://jwt.io/\" target=\"_blank\">JSON Web Tokens</a> for authorizing the requests. Tokens are created by developers on <a href=\"https://developer.clashofclans.com/#/account\" target=\"_parent\">My Account</a> page and must be passed in every API request in Authorization HTTP header using Bearer authentication scheme. Correct Authorization header looks like this: \"Authorization: Bearer API_TOKEN\". 
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = CocApi.Client.OpenAPIDateConverter;

namespace CocApi.Model
{
    /// <summary>
    /// ClanWarLogEntry
    /// </summary>
    [DataContract(Name = "ClanWarLogEntry")]
    public partial class ClanWarLogEntry : IEquatable<ClanWarLogEntry>, IValidatableObject
    {
        /// <summary>
        /// Defines Result
        /// </summary>
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ResultEnum
        {
            /// <summary>
            /// Enum Lose for value: lose
            /// </summary>
            [EnumMember(Value = "lose")]
            Lose = 1,

            /// <summary>
            /// Enum Tie for value: tie
            /// </summary>
            [EnumMember(Value = "tie")]
            Tie = 2,

            /// <summary>
            /// Enum Win for value: win
            /// </summary>
            [EnumMember(Value = "win")]
            Win = 3

        }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public ResultEnum? Result { get; private set; }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="ClanWarLogEntry" /> class.
        /// </summary>
        /// <param name="clan">clan.</param>
        /// <param name="teamSize">teamSize.</param>
        /// <param name="opponent">opponent.</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="result">result.</param>
        public ClanWarLogEntry(WarClanLogEntry clan, int teamSize, WarClanLogEntry opponent, DateTime endTime, ResultEnum? result)
        {
            Clan = clan;
            TeamSize = teamSize;
            Opponent = opponent;
            EndTime = endTime;
            Result = result;
        }

        /// <summary>
        /// Gets or Sets Clan
        /// </summary>
        [DataMember(Name = "clan", EmitDefaultValue = false)]
        public WarClanLogEntry Clan { get; private set; }

        /// <summary>
        /// Gets or Sets TeamSize
        /// </summary>
        [DataMember(Name = "teamSize", EmitDefaultValue = false)]
        public int TeamSize { get; private set; }

        /// <summary>
        /// Gets or Sets Opponent
        /// </summary>
        [DataMember(Name = "opponent", EmitDefaultValue = false)]
        public WarClanLogEntry Opponent { get; private set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public DateTime EndTime { get; private set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClanWarLogEntry {\n");
            sb.Append("  Clan: ").Append(Clan).Append('\n');
            sb.Append("  TeamSize: ").Append(TeamSize).Append('\n');
            sb.Append("  Opponent: ").Append(Opponent).Append('\n');
            sb.Append("  EndTime: ").Append(EndTime).Append('\n');
            sb.Append("  Result: ").Append(Result).Append('\n');
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson(Newtonsoft.Json.JsonSerializerSettings? jsonSerializerSettings = null)
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, jsonSerializerSettings ?? CocApi.Client.ClientUtils.JsonSerializerSettings);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object? input)
        {
            return Equals(input as ClanWarLogEntry);
        }

        /// <summary>
        /// Returns true if ClanWarLogEntry instances are equal
        /// </summary>
        /// <param name="input">Instance of ClanWarLogEntry to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClanWarLogEntry? input)
        {
            if (input == null)
                return false;

            return 
                (
                    Clan == input.Clan ||
                    (Clan != null &&
                    Clan.Equals(input.Clan))
                ) && 
                (
                    TeamSize == input.TeamSize ||
                    TeamSize.Equals(input.TeamSize)
                ) && 
                (
                    Opponent == input.Opponent ||
                    (Opponent != null &&
                    Opponent.Equals(input.Opponent))
                ) && 
                (
                    EndTime == input.EndTime ||
                    (EndTime != null &&
                    EndTime.Equals(input.EndTime))
                ) && 
                (
                    Result == input.Result ||
                    Result.Equals(input.Result)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Clan != null)
                    hashCode = hashCode * 59 + this.Clan.GetHashCode();
                hashCode = hashCode * 59 + this.TeamSize.GetHashCode();
                if (this.Opponent != null)
                    hashCode = hashCode * 59 + this.Opponent.GetHashCode();
                if (this.EndTime != null)
                    hashCode = hashCode * 59 + this.EndTime.GetHashCode();
                hashCode = hashCode * 59 + this.Result.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

